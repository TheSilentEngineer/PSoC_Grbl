ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"protocol.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.protocol_auto_cycle_start,"ax",%progbits
  19              		.align	2
  20              		.global	protocol_auto_cycle_start
  21              		.thumb
  22              		.thumb_func
  23              		.type	protocol_auto_cycle_start, %function
  24              	protocol_auto_cycle_start:
  25              	.LFB65:
  26              		.file 1 "protocol.c"
   1:protocol.c    **** /*
   2:protocol.c    ****   protocol.c - controls Grbl execution protocol and procedures
   3:protocol.c    ****   Part of Grbl
   4:protocol.c    **** 
   5:protocol.c    ****   Copyright (c) 2011-2016 Sungeun K. Jeon for Gnea Research LLC
   6:protocol.c    ****   Copyright (c) 2009-2011 Simen Svale Skogsrud
   7:protocol.c    **** 
   8:protocol.c    ****   Grbl is free software: you can redistribute it and/or modify
   9:protocol.c    ****   it under the terms of the GNU General Public License as published by
  10:protocol.c    ****   the Free Software Foundation, either version 3 of the License, or
  11:protocol.c    ****   (at your option) any later version.
  12:protocol.c    **** 
  13:protocol.c    ****   Grbl is distributed in the hope that it will be useful,
  14:protocol.c    ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:protocol.c    ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:protocol.c    ****   GNU General Public License for more details.
  17:protocol.c    **** 
  18:protocol.c    ****   You should have received a copy of the GNU General Public License
  19:protocol.c    ****   along with Grbl.  If not, see <http://www.gnu.org/licenses/>.
  20:protocol.c    **** */
  21:protocol.c    **** 
  22:protocol.c    **** #include "grbl.h"
  23:protocol.c    **** 
  24:protocol.c    **** // Define line flags. Includes comment type tracking and line overflow detection.
  25:protocol.c    **** #define LINE_FLAG_OVERFLOW bit(0)
  26:protocol.c    **** #define LINE_FLAG_COMMENT_PARENTHESES bit(1)
  27:protocol.c    **** #define LINE_FLAG_COMMENT_SEMICOLON bit(2)
  28:protocol.c    **** 
  29:protocol.c    **** 
  30:protocol.c    **** static char line[LINE_BUFFER_SIZE]; // Line to be executed. Zero-terminated.
  31:protocol.c    **** 
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 2


  32:protocol.c    **** static void protocol_exec_rt_suspend();
  33:protocol.c    **** 
  34:protocol.c    **** 
  35:protocol.c    **** /*
  36:protocol.c    ****   GRBL PRIMARY LOOP:
  37:protocol.c    **** */
  38:protocol.c    **** void protocol_main_loop()
  39:protocol.c    **** {
  40:protocol.c    ****   // Perform some machine checks to make sure everything is good to go.
  41:protocol.c    ****   #ifdef CHECK_LIMITS_AT_INIT
  42:protocol.c    ****     if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE)) {
  43:protocol.c    ****       if (limits_get_state()) {
  44:protocol.c    ****         sys.state = STATE_ALARM; // Ensure alarm state is active.
  45:protocol.c    ****         report_feedback_message(MESSAGE_CHECK_LIMITS);
  46:protocol.c    ****       }
  47:protocol.c    ****     }
  48:protocol.c    ****   #endif
  49:protocol.c    ****   // Check for and report alarm state after a reset, error, or an initial power up.
  50:protocol.c    ****   // NOTE: Sleep mode disables the stepper drivers and position can't be guaranteed.
  51:protocol.c    ****   // Re-initialize the sleep state as an ALARM mode to ensure user homes or acknowledges.
  52:protocol.c    ****   if (sys.state & (STATE_ALARM | STATE_SLEEP)) {
  53:protocol.c    ****     report_feedback_message(MESSAGE_ALARM_LOCK);
  54:protocol.c    ****     sys.state = STATE_ALARM; // Ensure alarm state is set.
  55:protocol.c    ****   } else {
  56:protocol.c    ****     // Check if the safety door is open.
  57:protocol.c    ****     sys.state = STATE_IDLE;
  58:protocol.c    ****     if (system_check_safety_door_ajar()) {
  59:protocol.c    ****       bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
  60:protocol.c    ****       protocol_execute_realtime(); // Enter safety door mode. Should return as IDLE state.
  61:protocol.c    ****     }
  62:protocol.c    ****     // All systems go!
  63:protocol.c    ****     system_execute_startup(line); // Execute startup script.
  64:protocol.c    ****   }
  65:protocol.c    **** 
  66:protocol.c    ****   // ---------------------------------------------------------------------------------
  67:protocol.c    ****   // Primary loop! Upon a system abort, this exits back to main() to reset the system.
  68:protocol.c    ****   // This is also where Grbl idles while waiting for something to do.
  69:protocol.c    ****   // ---------------------------------------------------------------------------------
  70:protocol.c    **** 
  71:protocol.c    ****   uint8_t line_flags = 0;
  72:protocol.c    ****   uint8_t char_counter = 0;
  73:protocol.c    ****   uint8_t c;
  74:protocol.c    ****   for (;;) {
  75:protocol.c    **** 
  76:protocol.c    ****     // Process one line of incoming serial data, as the data becomes available. Performs an
  77:protocol.c    ****     // initial filtering by removing spaces and comments and capitalizing all letters.
  78:protocol.c    ****     while((c = serial_read()) != SERIAL_NO_DATA) {
  79:protocol.c    ****       if ((c == '\n') || (c == '\r')) { // End of line reached
  80:protocol.c    **** 
  81:protocol.c    ****         protocol_execute_realtime(); // Runtime command check point.
  82:protocol.c    ****         if (sys.abort) { return; } // Bail to calling function upon system abort
  83:protocol.c    **** 
  84:protocol.c    ****         line[char_counter] = 0; // Set string termination character.
  85:protocol.c    ****         #ifdef REPORT_ECHO_LINE_RECEIVED
  86:protocol.c    ****           report_echo_line_received(line);
  87:protocol.c    ****         #endif
  88:protocol.c    **** 
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 3


  89:protocol.c    ****         // Direct and execute one line of formatted input, and report status of execution.
  90:protocol.c    ****         if (line_flags & LINE_FLAG_OVERFLOW) {
  91:protocol.c    ****           // Report line overflow error.
  92:protocol.c    ****           report_status_message(STATUS_OVERFLOW);
  93:protocol.c    ****         } else if (line[0] == 0) {
  94:protocol.c    ****           // Empty or comment line. For syncing purposes.
  95:protocol.c    ****           report_status_message(STATUS_OK);
  96:protocol.c    ****         } else if (line[0] == '$') {
  97:protocol.c    ****           // Grbl '$' system command
  98:protocol.c    ****           report_status_message(system_execute_line(line));
  99:protocol.c    ****         } else if (sys.state & (STATE_ALARM | STATE_JOG)) {
 100:protocol.c    ****           // Everything else is gcode. Block if in alarm or jog mode.
 101:protocol.c    ****           report_status_message(STATUS_SYSTEM_GC_LOCK);
 102:protocol.c    ****         } else {
 103:protocol.c    ****           // Parse and execute g-code block.
 104:protocol.c    ****           report_status_message(gc_execute_line(line));
 105:protocol.c    ****         }
 106:protocol.c    **** 
 107:protocol.c    ****         // Reset tracking data for next line.
 108:protocol.c    ****         line_flags = 0;
 109:protocol.c    ****         char_counter = 0;
 110:protocol.c    **** 
 111:protocol.c    ****       } else {
 112:protocol.c    **** 
 113:protocol.c    ****         if (line_flags) {
 114:protocol.c    ****           // Throw away all (except EOL) comment characters and overflow characters.
 115:protocol.c    ****           if (c == ')') {
 116:protocol.c    ****             // End of '()' comment. Resume line allowed.
 117:protocol.c    ****             if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PAR
 118:protocol.c    ****           }
 119:protocol.c    ****         } else {
 120:protocol.c    ****           if (c <= ' ') {
 121:protocol.c    ****             // Throw away whitepace and control characters
 122:protocol.c    ****           } else if (c == '/') {
 123:protocol.c    ****             // Block delete NOT SUPPORTED. Ignore character.
 124:protocol.c    ****             // NOTE: If supported, would simply need to check the system if block delete is enabled
 125:protocol.c    ****           } else if (c == '(') {
 126:protocol.c    ****             // Enable comments flag and ignore all characters until ')' or EOL.
 127:protocol.c    ****             // NOTE: This doesn't follow the NIST definition exactly, but is good enough for now.
 128:protocol.c    ****             // In the future, we could simply remove the items within the comments, but retain the
 129:protocol.c    ****             // comment control characters, so that the g-code parser can error-check it.
 130:protocol.c    ****             line_flags |= LINE_FLAG_COMMENT_PARENTHESES;
 131:protocol.c    ****           } else if (c == ';') {
 132:protocol.c    ****             // NOTE: ';' comment to EOL is a LinuxCNC definition. Not NIST.
 133:protocol.c    ****             line_flags |= LINE_FLAG_COMMENT_SEMICOLON;
 134:protocol.c    ****           // TODO: Install '%' feature
 135:protocol.c    ****           // } else if (c == '%') {
 136:protocol.c    ****             // Program start-end percent sign NOT SUPPORTED.
 137:protocol.c    ****             // NOTE: This maybe installed to tell Grbl when a program is running vs manual input,
 138:protocol.c    ****             // where, during a program, the system auto-cycle start will continue to execute
 139:protocol.c    ****             // everything until the next '%' sign. This will help fix resuming issues with certain
 140:protocol.c    ****             // functions that empty the planner buffer to execute its task on-time.
 141:protocol.c    ****           } else if (char_counter >= (LINE_BUFFER_SIZE-1)) {
 142:protocol.c    ****             // Detect line buffer overflow and set flag.
 143:protocol.c    ****             line_flags |= LINE_FLAG_OVERFLOW;
 144:protocol.c    ****           } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
 145:protocol.c    ****             line[char_counter++] = c-'a'+'A';
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 4


 146:protocol.c    ****           } else {
 147:protocol.c    ****             line[char_counter++] = c;
 148:protocol.c    ****           }
 149:protocol.c    ****         }
 150:protocol.c    **** 
 151:protocol.c    ****       }
 152:protocol.c    ****       
 153:protocol.c    ****        // Execute and LCD print status PSoc
 154:protocol.c    ****     if (exec_lcd_status) { 
 155:protocol.c    ****       lcd_report_realtime(); 
 156:protocol.c    ****       exec_lcd_status = false;
 157:protocol.c    ****       //printPgmString(PSTR("LCD\r\n"));
 158:protocol.c    ****     }
 159:protocol.c    ****       
 160:protocol.c    ****     }
 161:protocol.c    **** 
 162:protocol.c    ****     // If there are no more characters in the serial read buffer to be processed and executed,
 163:protocol.c    ****     // this indicates that g-code streaming has either filled the planner buffer or has
 164:protocol.c    ****     // completed. In either case, auto-cycle start, if enabled, any queued moves.
 165:protocol.c    ****     protocol_auto_cycle_start();
 166:protocol.c    **** 
 167:protocol.c    ****     protocol_execute_realtime();  // Runtime command check point.
 168:protocol.c    ****     if (sys.abort) { return; } // Bail to main() program loop to reset system.
 169:protocol.c    ****   }
 170:protocol.c    **** 
 171:protocol.c    ****   return; /* Never reached */
 172:protocol.c    **** }
 173:protocol.c    **** 
 174:protocol.c    **** 
 175:protocol.c    **** // Block until all buffered steps are executed or in a cycle state. Works with feed hold
 176:protocol.c    **** // during a synchronize call, if it should happen. Also, waits for clean cycle end.
 177:protocol.c    **** void protocol_buffer_synchronize()
 178:protocol.c    **** {
 179:protocol.c    ****   // If system is queued, ensure cycle resumes if the auto start flag is present.
 180:protocol.c    ****   protocol_auto_cycle_start();
 181:protocol.c    ****   do {
 182:protocol.c    ****     protocol_execute_realtime();   // Check and execute run-time commands
 183:protocol.c    ****     if (sys.abort) { return; } // Check for system abort
 184:protocol.c    ****   } while (plan_get_current_block() || (sys.state == STATE_CYCLE));
 185:protocol.c    **** }
 186:protocol.c    **** 
 187:protocol.c    **** 
 188:protocol.c    **** // Auto-cycle start triggers when there is a motion ready to execute and if the main program is not
 189:protocol.c    **** // actively parsing commands.
 190:protocol.c    **** // NOTE: This function is called from the main loop, buffer sync, and mc_line() only and executes
 191:protocol.c    **** // when one of these conditions exist respectively: There are no more blocks sent (i.e. streaming
 192:protocol.c    **** // is finished, single commands), a command that needs to wait for the motions in the buffer to
 193:protocol.c    **** // execute calls a buffer sync, or the planner buffer is full and ready to go.
 194:protocol.c    **** void protocol_auto_cycle_start()
 195:protocol.c    **** {
  27              		.loc 1 195 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 3, -8
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 5


  34              		.cfi_offset 14, -4
 196:protocol.c    ****   if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
  35              		.loc 1 196 0
  36 0002 FFF7FEFF 		bl	plan_get_current_block
  37              	.LVL0:
  38 0006 10B1     		cbz	r0, .L1
 197:protocol.c    ****     system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
  39              		.loc 1 197 0
  40 0008 0220     		movs	r0, #2
  41 000a FFF7FEFF 		bl	system_set_exec_state_flag
  42              	.LVL1:
  43              	.L1:
  44 000e 08BD     		pop	{r3, pc}
  45              		.cfi_endproc
  46              	.LFE65:
  47              		.size	protocol_auto_cycle_start, .-protocol_auto_cycle_start
  48              		.section	.text.protocol_exec_rt_system,"ax",%progbits
  49              		.align	2
  50              		.global	protocol_exec_rt_system
  51              		.thumb
  52              		.thumb_func
  53              		.type	protocol_exec_rt_system, %function
  54              	protocol_exec_rt_system:
  55              	.LFB67:
 198:protocol.c    ****   }
 199:protocol.c    **** }
 200:protocol.c    **** 
 201:protocol.c    **** 
 202:protocol.c    **** // This function is the general interface to Grbl's real-time command execution system. It is calle
 203:protocol.c    **** // from various check points in the main program, primarily where there may be a while loop waiting
 204:protocol.c    **** // for a buffer to clear space or any point where the execution time from the last check point may
 205:protocol.c    **** // be more than a fraction of a second. This is a way to execute realtime commands asynchronously
 206:protocol.c    **** // (aka multitasking) with grbl's g-code parsing and planning functions. This function also serves
 207:protocol.c    **** // as an interface for the interrupts to set the system realtime flags, where only the main program
 208:protocol.c    **** // handles them, removing the need to define more computationally-expensive volatile variables. Thi
 209:protocol.c    **** // also provides a controlled way to execute certain tasks without having two or more instances of
 210:protocol.c    **** // the same task, such as the planner recalculating the buffer upon a feedhold or overrides.
 211:protocol.c    **** // NOTE: The sys_rt_exec_state variable flags are set by any process, step or serial interrupts, pi
 212:protocol.c    **** // limit switches, or the main program.
 213:protocol.c    **** void protocol_execute_realtime()
 214:protocol.c    **** {
 215:protocol.c    ****   protocol_exec_rt_system();
 216:protocol.c    ****   if (sys.suspend) { protocol_exec_rt_suspend(); }
 217:protocol.c    ****   
 218:protocol.c    ****    // Execute and LCD print status PSoc
 219:protocol.c    ****     if (exec_lcd_status) { 
 220:protocol.c    ****       lcd_report_realtime(); 
 221:protocol.c    ****       exec_lcd_status = false;
 222:protocol.c    ****     }
 223:protocol.c    ****   
 224:protocol.c    **** }
 225:protocol.c    **** 
 226:protocol.c    **** 
 227:protocol.c    **** // Executes run-time commands, when required. This function primarily operates as Grbl's state
 228:protocol.c    **** // machine and controls the various real-time features Grbl has to offer.
 229:protocol.c    **** // NOTE: Do not alter this unless you know exactly what you are doing!
 230:protocol.c    **** void protocol_exec_rt_system()
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 6


 231:protocol.c    **** {
  56              		.loc 1 231 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 0, uses_anonymous_args = 0
  60 0000 10B5     		push	{r4, lr}
  61              		.cfi_def_cfa_offset 8
  62              		.cfi_offset 4, -8
  63              		.cfi_offset 14, -4
 232:protocol.c    ****   uint8_t rt_exec; // Temp variable to avoid calling volatile multiple times.
 233:protocol.c    ****   rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
  64              		.loc 1 233 0
  65 0002 A14B     		ldr	r3, .L62
  66 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  67              	.LVL2:
 234:protocol.c    ****   if (rt_exec) { // Enter only if any bit flag is true
  68              		.loc 1 234 0
  69 0006 03F0FF04 		and	r4, r3, #255
  70 000a B3B1     		cbz	r3, .L5
 235:protocol.c    ****     // System alarm. Everything has shutdown by something that has gone severely wrong. Report
 236:protocol.c    ****     // the source of the error to the user. If critical, Grbl disables by entering an infinite
 237:protocol.c    ****     // loop until system reset/abort.
 238:protocol.c    ****     sys.state = STATE_ALARM; // Set system alarm state
  71              		.loc 1 238 0
  72 000c 0122     		movs	r2, #1
  73 000e 9F4B     		ldr	r3, .L62+4
  74              	.LVL3:
  75 0010 1A70     		strb	r2, [r3]
 239:protocol.c    ****     report_alarm_message(rt_exec);
  76              		.loc 1 239 0
  77 0012 60B2     		sxtb	r0, r4
  78 0014 FFF7FEFF 		bl	report_alarm_message
  79              	.LVL4:
 240:protocol.c    ****     // Halt everything upon a critical event flag. Currently hard and soft limits flag this.
 241:protocol.c    ****     if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
  80              		.loc 1 241 0
  81 0018 013C     		subs	r4, r4, #1
  82 001a E4B2     		uxtb	r4, r4
  83 001c 012C     		cmp	r4, #1
  84 001e 0AD8     		bhi	.L6
 242:protocol.c    ****       report_feedback_message(MESSAGE_CRITICAL_EVENT);
  85              		.loc 1 242 0
  86 0020 0120     		movs	r0, #1
  87 0022 FFF7FEFF 		bl	report_feedback_message
  88              	.LVL5:
 243:protocol.c    ****       system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
  89              		.loc 1 243 0
  90 0026 1020     		movs	r0, #16
  91 0028 FFF7FEFF 		bl	system_clear_exec_state_flag
  92              	.LVL6:
  93              	.L7:
 244:protocol.c    ****       do {
 245:protocol.c    ****         // Block everything, except reset and status reports, until user issues reset or power
 246:protocol.c    ****         // cycles. Hard limits typically occur while unattended or not paying attention. Gives
 247:protocol.c    ****         // the user and a GUI time to do what is needed before resetting, like killing the
 248:protocol.c    ****         // incoming stream. The same could be said about soft limits. While the position is not
 249:protocol.c    ****         // lost, continued streaming could cause a serious crash if by chance it gets executed.
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 7


 250:protocol.c    ****       } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
  94              		.loc 1 250 0 discriminator 1
  95 002c 984B     		ldr	r3, .L62+8
  96 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  97 0030 13F0100F 		tst	r3, #16
  98 0034 FAD0     		beq	.L7
  99              	.L6:
 251:protocol.c    ****     }
 252:protocol.c    ****     system_clear_exec_alarm(); // Clear alarm
 100              		.loc 1 252 0
 101 0036 FFF7FEFF 		bl	system_clear_exec_alarm
 102              	.LVL7:
 103              	.L5:
 253:protocol.c    ****   }
 254:protocol.c    **** 
 255:protocol.c    ****   rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 104              		.loc 1 255 0
 105 003a 954B     		ldr	r3, .L62+8
 106 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 107              	.LVL8:
 256:protocol.c    ****   if (rt_exec) {
 108              		.loc 1 256 0
 109 003e 03F0FF04 		and	r4, r3, #255
 110 0042 002B     		cmp	r3, #0
 111 0044 00F01181 		beq	.L8
 257:protocol.c    **** 
 258:protocol.c    ****     // Execute system abort.
 259:protocol.c    ****     if (rt_exec & EXEC_RESET) {
 112              		.loc 1 259 0
 113 0048 14F0100F 		tst	r4, #16
 114 004c 03D0     		beq	.L9
 260:protocol.c    ****       sys.abort = true;  // Only place this is set true.
 115              		.loc 1 260 0
 116 004e 0122     		movs	r2, #1
 117 0050 8E4B     		ldr	r3, .L62+4
 118              	.LVL9:
 119 0052 5A70     		strb	r2, [r3, #1]
 261:protocol.c    ****       return; // Nothing else to do but exit.
 120              		.loc 1 261 0
 121 0054 10BD     		pop	{r4, pc}
 122              	.LVL10:
 123              	.L9:
 262:protocol.c    ****     }
 263:protocol.c    **** 
 264:protocol.c    ****     // Execute and serial print status
 265:protocol.c    ****     if (rt_exec & EXEC_STATUS_REPORT) {
 124              		.loc 1 265 0
 125 0056 14F0010F 		tst	r4, #1
 126 005a 04D0     		beq	.L11
 266:protocol.c    ****       report_realtime_status();
 127              		.loc 1 266 0
 128 005c FFF7FEFF 		bl	report_realtime_status
 129              	.LVL11:
 267:protocol.c    ****       system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 130              		.loc 1 267 0
 131 0060 0120     		movs	r0, #1
 132 0062 FFF7FEFF 		bl	system_clear_exec_state_flag
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 8


 133              	.LVL12:
 134              	.L11:
 268:protocol.c    ****     }
 269:protocol.c    ****     
 270:protocol.c    ****     
 271:protocol.c    **** 
 272:protocol.c    ****     // NOTE: Once hold is initiated, the system immediately enters a suspend state to block all
 273:protocol.c    ****     // main program processes until either reset or resumed. This ensures a hold completes safely.
 274:protocol.c    ****     if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 135              		.loc 1 274 0
 136 0066 14F0E80F 		tst	r4, #232
 137 006a 6AD0     		beq	.L12
 275:protocol.c    **** 
 276:protocol.c    ****       // State check for allowable states for hold methods.
 277:protocol.c    ****       if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 138              		.loc 1 277 0
 139 006c 874B     		ldr	r3, .L62+4
 140 006e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 141 0070 13F0030F 		tst	r3, #3
 142 0074 53D1     		bne	.L13
 278:protocol.c    ****       
 279:protocol.c    ****         // If in CYCLE or JOG states, immediately initiate a motion HOLD.
 280:protocol.c    ****         if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 143              		.loc 1 280 0
 144 0076 13F0280F 		tst	r3, #40
 145 007a 14D0     		beq	.L14
 281:protocol.c    ****           if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already
 146              		.loc 1 281 0
 147 007c 834B     		ldr	r3, .L62+4
 148 007e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 149 0080 13F0C00F 		tst	r3, #192
 150 0084 0FD1     		bne	.L14
 282:protocol.c    ****             st_update_plan_block_parameters(); // Notify stepper module to recompute for hold decel
 151              		.loc 1 282 0
 152 0086 FFF7FEFF 		bl	st_update_plan_block_parameters
 153              	.LVL13:
 283:protocol.c    ****             sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active fla
 154              		.loc 1 283 0
 155 008a 804B     		ldr	r3, .L62+4
 156 008c 0222     		movs	r2, #2
 157 008e 1A71     		strb	r2, [r3, #4]
 284:protocol.c    ****             if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping
 158              		.loc 1 284 0
 159 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 160 0092 202B     		cmp	r3, #32
 161 0094 07D1     		bne	.L14
 285:protocol.c    ****               if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 162              		.loc 1 285 0
 163 0096 14F0800F 		tst	r4, #128
 164 009a 04D1     		bne	.L14
 165              		.loc 1 285 0 is_stmt 0 discriminator 1
 166 009c 7B4A     		ldr	r2, .L62+4
 167 009e 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 168 00a0 63F07F03 		orn	r3, r3, #127
 169 00a4 9370     		strb	r3, [r2, #2]
 170              	.L14:
 286:protocol.c    ****             }
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 9


 287:protocol.c    ****           }
 288:protocol.c    ****         }
 289:protocol.c    ****         // If IDLE, Grbl is not in motion. Simply indicate suspend state and hold is complete.
 290:protocol.c    ****         if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 171              		.loc 1 290 0 is_stmt 1
 172 00a6 794B     		ldr	r3, .L62+4
 173 00a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 174 00aa 13B9     		cbnz	r3, .L15
 175              		.loc 1 290 0 is_stmt 0 discriminator 1
 176 00ac 0121     		movs	r1, #1
 177 00ae 774A     		ldr	r2, .L62+4
 178 00b0 9170     		strb	r1, [r2, #2]
 179              	.L15:
 291:protocol.c    **** 
 292:protocol.c    ****         // Execute and flag a motion cancel with deceleration and return to idle. Used primarily by
 293:protocol.c    ****         // to halt and cancel the remainder of the motion.
 294:protocol.c    ****         if (rt_exec & EXEC_MOTION_CANCEL) {
 180              		.loc 1 294 0 is_stmt 1
 181 00b2 14F0400F 		tst	r4, #64
 182 00b6 07D0     		beq	.L16
 295:protocol.c    ****           // MOTION_CANCEL only occurs during a CYCLE, but a HOLD and SAFETY_DOOR may been initiate
 296:protocol.c    ****           // to hold the CYCLE. Motion cancel is valid for a single planner block motion only, whil
 297:protocol.c    ****           // will handle and clear multiple planner block motions.
 298:protocol.c    ****           if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is
 183              		.loc 1 298 0
 184 00b8 13F0200F 		tst	r3, #32
 185 00bc 04D1     		bne	.L16
 186              		.loc 1 298 0 is_stmt 0 discriminator 1
 187 00be 7349     		ldr	r1, .L62+4
 188 00c0 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 189 00c2 42F04002 		orr	r2, r2, #64
 190 00c6 8A70     		strb	r2, [r1, #2]
 191              	.L16:
 299:protocol.c    ****         }
 300:protocol.c    **** 
 301:protocol.c    ****         // Execute a feed hold with deceleration, if required. Then, suspend system.
 302:protocol.c    ****         if (rt_exec & EXEC_FEED_HOLD) {
 192              		.loc 1 302 0 is_stmt 1
 193 00c8 14F0080F 		tst	r4, #8
 194 00cc 05D0     		beq	.L17
 303:protocol.c    ****           // Block SAFETY_DOOR, JOG, and SLEEP states from changing to HOLD state.
 304:protocol.c    ****           if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOL
 195              		.loc 1 304 0
 196 00ce 13F0E00F 		tst	r3, #224
 197 00d2 02D1     		bne	.L17
 198              		.loc 1 304 0 is_stmt 0 discriminator 1
 199 00d4 1022     		movs	r2, #16
 200 00d6 6D4B     		ldr	r3, .L62+4
 201 00d8 1A70     		strb	r2, [r3]
 202              	.L17:
 305:protocol.c    ****         }
 306:protocol.c    **** 
 307:protocol.c    ****         // Execute a safety door stop with a feed hold and disable spindle/coolant.
 308:protocol.c    ****         // NOTE: Safety door differs from feed holds by stopping everything no matter state, disabl
 309:protocol.c    ****         // devices (spindle/coolant), and blocks resuming until switch is re-engaged.
 310:protocol.c    ****         if (rt_exec & EXEC_SAFETY_DOOR) {
 203              		.loc 1 310 0 is_stmt 1
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 10


 204 00da 14F0200F 		tst	r4, #32
 205 00de 1ED0     		beq	.L13
 311:protocol.c    ****           report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 206              		.loc 1 311 0
 207 00e0 0620     		movs	r0, #6
 208 00e2 FFF7FEFF 		bl	report_feedback_message
 209              	.LVL14:
 312:protocol.c    ****           // If jogging, block safety door methods until jog cancel is complete. Just flag that it 
 313:protocol.c    ****           if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 210              		.loc 1 313 0
 211 00e6 694B     		ldr	r3, .L62+4
 212 00e8 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 213 00ea 13F0800F 		tst	r3, #128
 214 00ee 11D1     		bne	.L18
 314:protocol.c    ****             // Check if the safety re-opened during a restore parking motion only. Ignore if
 315:protocol.c    ****             // already retracting, parked or in sleep state.
 316:protocol.c    ****             if (sys.state == STATE_SAFETY_DOOR) {
 215              		.loc 1 316 0
 216 00f0 664A     		ldr	r2, .L62+4
 217 00f2 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 218 00f4 402A     		cmp	r2, #64
 219 00f6 08D1     		bne	.L19
 317:protocol.c    ****               if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 220              		.loc 1 317 0
 221 00f8 13F0080F 		tst	r3, #8
 222 00fc 05D0     		beq	.L19
 318:protocol.c    ****                 #ifdef PARKING_ENABLE
 319:protocol.c    ****                   // Set hold and reset appropriate control flags to restart parking sequence.
 320:protocol.c    ****                   if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 321:protocol.c    ****                     st_update_plan_block_parameters(); // Notify stepper module to recompute for ho
 322:protocol.c    ****                     sys.step_control = (STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION
 323:protocol.c    ****                     sys.suspend &= ~(SUSPEND_HOLD_COMPLETE);
 324:protocol.c    ****                   } // else NO_MOTION is active.
 325:protocol.c    ****                 #endif
 326:protocol.c    ****                 sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_REST
 223              		.loc 1 326 0
 224 00fe 03F0E303 		and	r3, r3, #227
 327:protocol.c    ****                 sys.suspend |= SUSPEND_RESTART_RETRACT;
 225              		.loc 1 327 0
 226 0102 43F00203 		orr	r3, r3, #2
 227 0106 6149     		ldr	r1, .L62+4
 228 0108 8B70     		strb	r3, [r1, #2]
 229              	.L19:
 328:protocol.c    ****               }
 329:protocol.c    ****             }
 330:protocol.c    ****             if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 230              		.loc 1 330 0
 231 010a 802A     		cmp	r2, #128
 232 010c 02D0     		beq	.L18
 233              		.loc 1 330 0 is_stmt 0 discriminator 1
 234 010e 4022     		movs	r2, #64
 235 0110 5E4B     		ldr	r3, .L62+4
 236 0112 1A70     		strb	r2, [r3]
 237              	.L18:
 331:protocol.c    ****           }
 332:protocol.c    ****           // NOTE: This flag doesn't change when the door closes, unlike sys.state. Ensures any par
 333:protocol.c    ****           // are executed if the door switch closes and the state returns to HOLD.
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 11


 334:protocol.c    ****           sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 238              		.loc 1 334 0 is_stmt 1
 239 0114 5D4A     		ldr	r2, .L62+4
 240 0116 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 241 0118 43F02003 		orr	r3, r3, #32
 242 011c 9370     		strb	r3, [r2, #2]
 243              	.L13:
 335:protocol.c    ****         }
 336:protocol.c    ****         
 337:protocol.c    ****       }
 338:protocol.c    **** 
 339:protocol.c    ****       if (rt_exec & EXEC_SLEEP) {
 244              		.loc 1 339 0
 245 011e 14F0800F 		tst	r4, #128
 246 0122 0BD0     		beq	.L20
 340:protocol.c    ****         if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPL
 247              		.loc 1 340 0
 248 0124 594B     		ldr	r3, .L62+4
 249 0126 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 250 0128 012B     		cmp	r3, #1
 251 012a 04D1     		bne	.L21
 252              		.loc 1 340 0 is_stmt 0 discriminator 1
 253 012c 574A     		ldr	r2, .L62+4
 254 012e 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 255 0130 43F00503 		orr	r3, r3, #5
 256 0134 9370     		strb	r3, [r2, #2]
 257              	.L21:
 341:protocol.c    ****         sys.state = STATE_SLEEP; 
 258              		.loc 1 341 0 is_stmt 1
 259 0136 8022     		movs	r2, #128
 260 0138 544B     		ldr	r3, .L62+4
 261 013a 1A70     		strb	r2, [r3]
 262              	.L20:
 342:protocol.c    ****       }
 343:protocol.c    **** 
 344:protocol.c    ****       system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_S
 263              		.loc 1 344 0
 264 013c E820     		movs	r0, #232
 265 013e FFF7FEFF 		bl	system_clear_exec_state_flag
 266              	.LVL15:
 267              	.L12:
 345:protocol.c    ****     }
 346:protocol.c    **** 
 347:protocol.c    ****     // Execute a cycle start by starting the stepper interrupt to begin executing the blocks in que
 348:protocol.c    ****     if (rt_exec & EXEC_CYCLE_START) {
 268              		.loc 1 348 0
 269 0142 14F0020F 		tst	r4, #2
 270 0146 4AD0     		beq	.L22
 349:protocol.c    ****       // Block if called at same time as the hold commands: feed hold, motion cancel, and safety do
 350:protocol.c    ****       // Ensures auto-cycle-start doesn't resume a hold without an explicit user-input.
 351:protocol.c    ****       if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 271              		.loc 1 351 0
 272 0148 14F0680F 		tst	r4, #104
 273 014c 44D1     		bne	.L23
 352:protocol.c    ****         // Resume door state when parking motion has retracted and door has been closed.
 353:protocol.c    ****         if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 274              		.loc 1 353 0
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 12


 275 014e 4F4B     		ldr	r3, .L62+4
 276 0150 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 277 0152 402B     		cmp	r3, #64
 278 0154 12D1     		bne	.L24
 279              		.loc 1 353 0 is_stmt 0 discriminator 1
 280 0156 4D4B     		ldr	r3, .L62+4
 281 0158 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 282 015a 13F0200F 		tst	r3, #32
 283 015e 0DD1     		bne	.L24
 354:protocol.c    ****           if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 284              		.loc 1 354 0 is_stmt 1
 285 0160 13F0100F 		tst	r3, #16
 286 0164 03D0     		beq	.L25
 355:protocol.c    ****             sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 287              		.loc 1 355 0
 288 0166 0022     		movs	r2, #0
 289 0168 484B     		ldr	r3, .L62+4
 290 016a 1A70     		strb	r2, [r3]
 291 016c 06E0     		b	.L24
 292              	.L25:
 356:protocol.c    ****           } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 293              		.loc 1 356 0
 294 016e 13F0040F 		tst	r3, #4
 295 0172 03D0     		beq	.L24
 357:protocol.c    ****             // Flag to re-energize powered components and restore original position, if disabled by
 358:protocol.c    ****             // NOTE: For a safety door to resume, the switch must be closed, as indicated by HOLD s
 359:protocol.c    ****             // the retraction execution is complete, which implies the initial feed hold is not act
 360:protocol.c    ****             // restore normal operation, the restore procedures must be initiated by the following 
 361:protocol.c    ****             // they are complete, it will call CYCLE_START automatically to resume and exit the sus
 362:protocol.c    ****             sys.suspend |= SUSPEND_INITIATE_RESTORE;
 296              		.loc 1 362 0
 297 0174 43F00803 		orr	r3, r3, #8
 298 0178 444A     		ldr	r2, .L62+4
 299 017a 9370     		strb	r3, [r2, #2]
 300              	.L24:
 363:protocol.c    ****           }
 364:protocol.c    ****         }
 365:protocol.c    ****         // Cycle start only when IDLE or when a hold is complete and ready to resume.
 366:protocol.c    ****         if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_C
 301              		.loc 1 366 0
 302 017c 434B     		ldr	r3, .L62+4
 303 017e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 304 0180 3BB1     		cbz	r3, .L26
 305              		.loc 1 366 0 is_stmt 0 discriminator 1
 306 0182 13F0100F 		tst	r3, #16
 307 0186 27D0     		beq	.L23
 308              		.loc 1 366 0 discriminator 2
 309 0188 404A     		ldr	r2, .L62+4
 310 018a 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 311 018c 12F0010F 		tst	r2, #1
 312 0190 22D0     		beq	.L23
 313              	.L26:
 367:protocol.c    ****           if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 314              		.loc 1 367 0 is_stmt 1
 315 0192 102B     		cmp	r3, #16
 316 0194 07D1     		bne	.L27
 317              		.loc 1 367 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 13


 318 0196 3D4B     		ldr	r3, .L62+4
 319 0198 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 320 019a 23B1     		cbz	r3, .L27
 368:protocol.c    ****             sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend ro
 321              		.loc 1 368 0 is_stmt 1
 322 019c 43F00803 		orr	r3, r3, #8
 323 01a0 3A4A     		ldr	r2, .L62+4
 324 01a2 9372     		strb	r3, [r2, #10]
 325 01a4 18E0     		b	.L23
 326              	.L27:
 369:protocol.c    ****           } else {
 370:protocol.c    ****             // Start cycle only if queued motions exist in planner buffer and the motion is not can
 371:protocol.c    ****             sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 327              		.loc 1 371 0
 328 01a6 0022     		movs	r2, #0
 329 01a8 384B     		ldr	r3, .L62+4
 330 01aa 1A71     		strb	r2, [r3, #4]
 372:protocol.c    ****             if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 331              		.loc 1 372 0
 332 01ac FFF7FEFF 		bl	plan_get_current_block
 333              	.LVL16:
 334 01b0 70B1     		cbz	r0, .L28
 335              		.loc 1 372 0 is_stmt 0 discriminator 1
 336 01b2 364B     		ldr	r3, .L62+4
 337 01b4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 338 01b6 13F0400F 		tst	r3, #64
 339 01ba 09D1     		bne	.L28
 373:protocol.c    ****               sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 340              		.loc 1 373 0 is_stmt 1
 341 01bc 334B     		ldr	r3, .L62+4
 342 01be 0022     		movs	r2, #0
 343 01c0 9A70     		strb	r2, [r3, #2]
 374:protocol.c    ****               sys.state = STATE_CYCLE;
 344              		.loc 1 374 0
 345 01c2 0822     		movs	r2, #8
 346 01c4 1A70     		strb	r2, [r3]
 375:protocol.c    ****               st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 347              		.loc 1 375 0
 348 01c6 FFF7FEFF 		bl	st_prep_buffer
 349              	.LVL17:
 376:protocol.c    ****               st_wake_up();
 350              		.loc 1 376 0
 351 01ca FFF7FEFF 		bl	st_wake_up
 352              	.LVL18:
 353 01ce 03E0     		b	.L23
 354              	.L28:
 377:protocol.c    ****             } else { // Otherwise, do nothing. Set and resume IDLE state.
 378:protocol.c    ****               sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 355              		.loc 1 378 0
 356 01d0 2E4B     		ldr	r3, .L62+4
 357 01d2 0022     		movs	r2, #0
 358 01d4 9A70     		strb	r2, [r3, #2]
 379:protocol.c    ****               sys.state = STATE_IDLE;
 359              		.loc 1 379 0
 360 01d6 1A70     		strb	r2, [r3]
 361              	.L23:
 380:protocol.c    ****             }
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 14


 381:protocol.c    ****           }
 382:protocol.c    ****         }
 383:protocol.c    ****       }
 384:protocol.c    ****       system_clear_exec_state_flag(EXEC_CYCLE_START);
 362              		.loc 1 384 0
 363 01d8 0220     		movs	r0, #2
 364 01da FFF7FEFF 		bl	system_clear_exec_state_flag
 365              	.LVL19:
 366              	.L22:
 385:protocol.c    ****     }
 386:protocol.c    **** 
 387:protocol.c    ****     if (rt_exec & EXEC_CYCLE_STOP) {
 367              		.loc 1 387 0
 368 01de 14F0040F 		tst	r4, #4
 369 01e2 42D0     		beq	.L8
 388:protocol.c    ****       // Reinitializes the cycle plan and stepper system after a feed hold for a resume. Called by
 389:protocol.c    ****       // realtime command execution in the main program, ensuring that the planner re-plans safely.
 390:protocol.c    ****       // NOTE: Bresenham algorithm variables are still maintained through both the planner and step
 391:protocol.c    ****       // cycle reinitializations. The stepper path should continue exactly as if nothing has happen
 392:protocol.c    ****       // NOTE: EXEC_CYCLE_STOP is set by the stepper subsystem when a cycle or feed hold completes.
 393:protocol.c    ****       if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.su
 370              		.loc 1 393 0
 371 01e4 294B     		ldr	r3, .L62+4
 372 01e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 373 01e8 13F0D00F 		tst	r3, #208
 374 01ec 18D0     		beq	.L29
 375              		.loc 1 393 0 is_stmt 0 discriminator 1
 376 01ee 274B     		ldr	r3, .L62+4
 377 01f0 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 378 01f2 ABB9     		cbnz	r3, .L29
 379              		.loc 1 393 0 discriminator 2
 380 01f4 254B     		ldr	r3, .L62+4
 381 01f6 93F90230 		ldrsb	r3, [r3, #2]
 382 01fa 002B     		cmp	r3, #0
 383 01fc 10DB     		blt	.L29
 394:protocol.c    ****         // Hold complete. Set to indicate ready to resume.  Remain in HOLD or DOOR states until use
 395:protocol.c    ****         // has issued a resume command or reset.
 396:protocol.c    ****         plan_cycle_reinitialize();
 384              		.loc 1 396 0 is_stmt 1
 385 01fe FFF7FEFF 		bl	plan_cycle_reinitialize
 386              	.LVL20:
 397:protocol.c    ****         if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 387              		.loc 1 397 0
 388 0202 224B     		ldr	r3, .L62+4
 389 0204 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 390 0206 13F0020F 		tst	r3, #2
 391 020a 04D0     		beq	.L30
 392              		.loc 1 397 0 is_stmt 0 discriminator 1
 393 020c 1F49     		ldr	r1, .L62+4
 394 020e 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 395 0210 42F00102 		orr	r2, r2, #1
 396 0214 8A70     		strb	r2, [r1, #2]
 397              	.L30:
 398:protocol.c    ****         bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 398              		.loc 1 398 0 is_stmt 1
 399 0216 23F00603 		bic	r3, r3, #6
 400 021a 1C4A     		ldr	r2, .L62+4
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 15


 401 021c 1371     		strb	r3, [r2, #4]
 402 021e 21E0     		b	.L31
 403              	.L29:
 399:protocol.c    ****       } else {
 400:protocol.c    ****         // Motion complete. Includes CYCLE/JOG/HOMING states and jog cancel/motion cancel/soft limi
 401:protocol.c    ****         // NOTE: Motion and jog cancel both immediately return to idle after the hold completes.
 402:protocol.c    ****         if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positio
 404              		.loc 1 402 0
 405 0220 1A4B     		ldr	r3, .L62+4
 406 0222 93F90230 		ldrsb	r3, [r3, #2]
 407 0226 002B     		cmp	r3, #0
 408 0228 0ADA     		bge	.L32
 403:protocol.c    ****           sys.step_control = STEP_CONTROL_NORMAL_OP;
 409              		.loc 1 403 0
 410 022a 0022     		movs	r2, #0
 411 022c 174B     		ldr	r3, .L62+4
 412 022e 1A71     		strb	r2, [r3, #4]
 404:protocol.c    ****           plan_reset();
 413              		.loc 1 404 0
 414 0230 FFF7FEFF 		bl	plan_reset
 415              	.LVL21:
 405:protocol.c    ****           st_reset();
 416              		.loc 1 405 0
 417 0234 FFF7FEFF 		bl	st_reset
 418              	.LVL22:
 406:protocol.c    ****           gc_sync_position();
 419              		.loc 1 406 0
 420 0238 FFF7FEFF 		bl	gc_sync_position
 421              	.LVL23:
 407:protocol.c    ****           plan_sync_position();
 422              		.loc 1 407 0
 423 023c FFF7FEFF 		bl	plan_sync_position
 424              	.LVL24:
 425              	.L32:
 408:protocol.c    ****         }
 409:protocol.c    ****         if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during 
 426              		.loc 1 409 0
 427 0240 124B     		ldr	r3, .L62+4
 428 0242 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 429 0244 13F0200F 		tst	r3, #32
 430 0248 08D0     		beq	.L33
 410:protocol.c    ****           sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 431              		.loc 1 410 0
 432 024a 03F07F03 		and	r3, r3, #127
 433 024e 0F4A     		ldr	r2, .L62+4
 411:protocol.c    ****           sys.suspend |= SUSPEND_HOLD_COMPLETE;
 434              		.loc 1 411 0
 435 0250 43F00103 		orr	r3, r3, #1
 436 0254 9370     		strb	r3, [r2, #2]
 412:protocol.c    ****           sys.state = STATE_SAFETY_DOOR;
 437              		.loc 1 412 0
 438 0256 4023     		movs	r3, #64
 439 0258 1370     		strb	r3, [r2]
 440 025a 03E0     		b	.L31
 441              	.L33:
 413:protocol.c    ****         } else {
 414:protocol.c    ****           sys.suspend = SUSPEND_DISABLE;
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 16


 442              		.loc 1 414 0
 443 025c 0B4B     		ldr	r3, .L62+4
 444 025e 0022     		movs	r2, #0
 445 0260 9A70     		strb	r2, [r3, #2]
 415:protocol.c    ****           sys.state = STATE_IDLE;
 446              		.loc 1 415 0
 447 0262 1A70     		strb	r2, [r3]
 448              	.L31:
 416:protocol.c    ****         }
 417:protocol.c    ****       }
 418:protocol.c    ****       system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 449              		.loc 1 418 0
 450 0264 0420     		movs	r0, #4
 451 0266 FFF7FEFF 		bl	system_clear_exec_state_flag
 452              	.LVL25:
 453              	.L8:
 419:protocol.c    ****     }
 420:protocol.c    ****   }
 421:protocol.c    **** 
 422:protocol.c    ****   // Execute overrides.
 423:protocol.c    ****   rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 454              		.loc 1 423 0
 455 026a 0A4B     		ldr	r3, .L62+12
 456 026c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 457              	.LVL26:
 424:protocol.c    ****   if (rt_exec) {
 458              		.loc 1 424 0
 459 026e 03F0FF04 		and	r4, r3, #255
 460 0272 002B     		cmp	r3, #0
 461 0274 48D0     		beq	.L34
 462              	.LBB2:
 425:protocol.c    ****     system_clear_exec_motion_overrides(); // Clear all motion override flags.
 463              		.loc 1 425 0
 464 0276 FFF7FEFF 		bl	system_clear_exec_motion_overrides
 465              	.LVL27:
 426:protocol.c    **** 
 427:protocol.c    ****     uint8_t new_f_override =  sys.f_override;
 466              		.loc 1 427 0
 467 027a 044B     		ldr	r3, .L62+4
 468 027c DA79     		ldrb	r2, [r3, #7]	@ zero_extendqisi2
 469              	.LVL28:
 428:protocol.c    ****     if (rt_exec & EXEC_FEED_OVR_RESET) { new_f_override = DEFAULT_FEED_OVERRIDE; }
 470              		.loc 1 428 0
 471 027e 14F0010F 		tst	r4, #1
 472 0282 09D1     		bne	.L56
 427:protocol.c    ****     if (rt_exec & EXEC_FEED_OVR_RESET) { new_f_override = DEFAULT_FEED_OVERRIDE; }
 473              		.loc 1 427 0
 474 0284 1346     		mov	r3, r2
 475 0286 08E0     		b	.L35
 476              	.L63:
 477              		.align	2
 478              	.L62:
 479 0288 00000000 		.word	sys_rt_exec_alarm
 480 028c 00000000 		.word	sys
 481 0290 00000000 		.word	sys_rt_exec_state
 482 0294 00000000 		.word	sys_rt_exec_motion_override
 483              	.L56:
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 17


 484              		.loc 1 428 0
 485 0298 6423     		movs	r3, #100
 486              	.L35:
 487              	.LVL29:
 429:protocol.c    ****     if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 488              		.loc 1 429 0
 489 029a 14F0020F 		tst	r4, #2
 490 029e 01D0     		beq	.L36
 491              		.loc 1 429 0 is_stmt 0 discriminator 1
 492 02a0 0A33     		adds	r3, r3, #10
 493              	.LVL30:
 494 02a2 DBB2     		uxtb	r3, r3
 495              	.LVL31:
 496              	.L36:
 430:protocol.c    ****     if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 497              		.loc 1 430 0 is_stmt 1
 498 02a4 14F0040F 		tst	r4, #4
 499 02a8 01D0     		beq	.L37
 500              		.loc 1 430 0 is_stmt 0 discriminator 1
 501 02aa 0A3B     		subs	r3, r3, #10
 502              	.LVL32:
 503 02ac DBB2     		uxtb	r3, r3
 504              	.LVL33:
 505              	.L37:
 431:protocol.c    ****     if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 506              		.loc 1 431 0 is_stmt 1
 507 02ae 14F0080F 		tst	r4, #8
 508 02b2 01D0     		beq	.L38
 509              		.loc 1 431 0 is_stmt 0 discriminator 1
 510 02b4 0133     		adds	r3, r3, #1
 511              	.LVL34:
 512 02b6 DBB2     		uxtb	r3, r3
 513              	.LVL35:
 514              	.L38:
 432:protocol.c    ****     if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 515              		.loc 1 432 0 is_stmt 1
 516 02b8 14F0100F 		tst	r4, #16
 517 02bc 01D0     		beq	.L39
 518              		.loc 1 432 0 is_stmt 0 discriminator 1
 519 02be 013B     		subs	r3, r3, #1
 520              	.LVL36:
 521 02c0 DBB2     		uxtb	r3, r3
 522              	.LVL37:
 523              	.L39:
 433:protocol.c    ****     new_f_override = min(new_f_override,MAX_FEED_RATE_OVERRIDE);
 434:protocol.c    ****     new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 524              		.loc 1 434 0 is_stmt 1
 525 02c2 C82B     		cmp	r3, #200
 526 02c4 28BF     		it	cs
 527 02c6 C823     		movcs	r3, #200
 528              	.LVL38:
 529 02c8 0A2B     		cmp	r3, #10
 530 02ca 38BF     		it	cc
 531 02cc 0A23     		movcc	r3, #10
 532              	.LVL39:
 435:protocol.c    **** 
 436:protocol.c    ****     uint8_t new_r_override = sys.r_override;
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 18


 533              		.loc 1 436 0
 534 02ce 4349     		ldr	r1, .L64
 535 02d0 087A     		ldrb	r0, [r1, #8]	@ zero_extendqisi2
 536              	.LVL40:
 437:protocol.c    ****     if (rt_exec & EXEC_RAPID_OVR_RESET) { new_r_override = DEFAULT_RAPID_OVERRIDE; }
 537              		.loc 1 437 0
 538 02d2 14F0200F 		tst	r4, #32
 539 02d6 01D1     		bne	.L57
 436:protocol.c    ****     if (rt_exec & EXEC_RAPID_OVR_RESET) { new_r_override = DEFAULT_RAPID_OVERRIDE; }
 540              		.loc 1 436 0
 541 02d8 0146     		mov	r1, r0
 542 02da 00E0     		b	.L40
 543              	.L57:
 544              		.loc 1 437 0
 545 02dc 6421     		movs	r1, #100
 546              	.L40:
 547              	.LVL41:
 438:protocol.c    ****     if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 548              		.loc 1 438 0
 549 02de 14F0400F 		tst	r4, #64
 550 02e2 00D0     		beq	.L41
 551 02e4 3221     		movs	r1, #50
 552              	.LVL42:
 553              	.L41:
 439:protocol.c    ****     if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 554              		.loc 1 439 0
 555 02e6 14F0800F 		tst	r4, #128
 556 02ea 00D0     		beq	.L42
 557 02ec 1921     		movs	r1, #25
 558              	.LVL43:
 559              	.L42:
 440:protocol.c    **** 
 441:protocol.c    ****     if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 560              		.loc 1 441 0
 561 02ee 9A42     		cmp	r2, r3
 562 02f0 01D1     		bne	.L43
 563              		.loc 1 441 0 is_stmt 0 discriminator 1
 564 02f2 8142     		cmp	r1, r0
 565 02f4 08D0     		beq	.L34
 566              	.L43:
 442:protocol.c    ****       sys.f_override = new_f_override;
 567              		.loc 1 442 0 is_stmt 1
 568 02f6 394A     		ldr	r2, .L64
 569 02f8 D371     		strb	r3, [r2, #7]
 443:protocol.c    ****       sys.r_override = new_r_override;
 570              		.loc 1 443 0
 571 02fa 1172     		strb	r1, [r2, #8]
 444:protocol.c    ****       sys.report_ovr_counter = 0; // Set to report change immediately
 572              		.loc 1 444 0
 573 02fc 0023     		movs	r3, #0
 574              	.LVL44:
 575 02fe D372     		strb	r3, [r2, #11]
 445:protocol.c    ****       plan_update_velocity_profile_parameters();
 576              		.loc 1 445 0
 577 0300 FFF7FEFF 		bl	plan_update_velocity_profile_parameters
 578              	.LVL45:
 446:protocol.c    ****       plan_cycle_reinitialize();
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 19


 579              		.loc 1 446 0
 580 0304 FFF7FEFF 		bl	plan_cycle_reinitialize
 581              	.LVL46:
 582              	.L34:
 583              	.LBE2:
 447:protocol.c    ****     }
 448:protocol.c    ****   }
 449:protocol.c    **** 
 450:protocol.c    ****   rt_exec = sys_rt_exec_accessory_override;
 584              		.loc 1 450 0
 585 0308 354B     		ldr	r3, .L64+4
 586 030a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 587              	.LVL47:
 451:protocol.c    ****   if (rt_exec) {
 588              		.loc 1 451 0
 589 030c 03F0FF04 		and	r4, r3, #255
 590 0310 002B     		cmp	r3, #0
 591 0312 5AD0     		beq	.L44
 592              	.LBB3:
 452:protocol.c    ****     system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 593              		.loc 1 452 0
 594 0314 FFF7FEFF 		bl	system_clear_exec_accessory_overrides
 595              	.LVL48:
 453:protocol.c    **** 
 454:protocol.c    ****     // NOTE: Unlike motion overrides, spindle overrides do not require a planner reinitialization.
 455:protocol.c    ****     uint8_t last_s_override =  sys.spindle_speed_ovr;
 596              		.loc 1 455 0
 597 0318 304B     		ldr	r3, .L64
 598 031a 5A7A     		ldrb	r2, [r3, #9]	@ zero_extendqisi2
 599              	.LVL49:
 456:protocol.c    ****     if (rt_exec & EXEC_SPINDLE_OVR_RESET) { last_s_override = DEFAULT_SPINDLE_SPEED_OVERRIDE; }
 600              		.loc 1 456 0
 601 031c 14F0010F 		tst	r4, #1
 602 0320 01D1     		bne	.L60
 455:protocol.c    ****     if (rt_exec & EXEC_SPINDLE_OVR_RESET) { last_s_override = DEFAULT_SPINDLE_SPEED_OVERRIDE; }
 603              		.loc 1 455 0
 604 0322 1346     		mov	r3, r2
 605 0324 00E0     		b	.L45
 606              	.L60:
 607              		.loc 1 456 0
 608 0326 6423     		movs	r3, #100
 609              	.L45:
 610              	.LVL50:
 457:protocol.c    ****     if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREM
 611              		.loc 1 457 0
 612 0328 14F0020F 		tst	r4, #2
 613 032c 01D0     		beq	.L46
 614              		.loc 1 457 0 is_stmt 0 discriminator 1
 615 032e 0A33     		adds	r3, r3, #10
 616              	.LVL51:
 617 0330 DBB2     		uxtb	r3, r3
 618              	.LVL52:
 619              	.L46:
 458:protocol.c    ****     if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCRE
 620              		.loc 1 458 0 is_stmt 1
 621 0332 14F0040F 		tst	r4, #4
 622 0336 01D0     		beq	.L47
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 20


 623              		.loc 1 458 0 is_stmt 0 discriminator 1
 624 0338 0A3B     		subs	r3, r3, #10
 625              	.LVL53:
 626 033a DBB2     		uxtb	r3, r3
 627              	.LVL54:
 628              	.L47:
 459:protocol.c    ****     if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT;
 629              		.loc 1 459 0 is_stmt 1
 630 033c 14F0080F 		tst	r4, #8
 631 0340 01D0     		beq	.L48
 632              		.loc 1 459 0 is_stmt 0 discriminator 1
 633 0342 0133     		adds	r3, r3, #1
 634              	.LVL55:
 635 0344 DBB2     		uxtb	r3, r3
 636              	.LVL56:
 637              	.L48:
 460:protocol.c    ****     if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT
 638              		.loc 1 460 0 is_stmt 1
 639 0346 14F0100F 		tst	r4, #16
 640 034a 01D0     		beq	.L49
 641              		.loc 1 460 0 is_stmt 0 discriminator 1
 642 034c 013B     		subs	r3, r3, #1
 643              	.LVL57:
 644 034e DBB2     		uxtb	r3, r3
 645              	.LVL58:
 646              	.L49:
 461:protocol.c    ****     last_s_override = min(last_s_override,MAX_SPINDLE_SPEED_OVERRIDE);
 462:protocol.c    ****     last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 647              		.loc 1 462 0 is_stmt 1
 648 0350 C82B     		cmp	r3, #200
 649 0352 28BF     		it	cs
 650 0354 C823     		movcs	r3, #200
 651              	.LVL59:
 652 0356 0A2B     		cmp	r3, #10
 653 0358 38BF     		it	cc
 654 035a 0A23     		movcc	r3, #10
 655              	.LVL60:
 463:protocol.c    **** 
 464:protocol.c    ****     if (last_s_override != sys.spindle_speed_ovr) {
 656              		.loc 1 464 0
 657 035c 9A42     		cmp	r2, r3
 658 035e 07D0     		beq	.L50
 465:protocol.c    ****       bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 659              		.loc 1 465 0
 660 0360 1E4A     		ldr	r2, .L64
 661 0362 1179     		ldrb	r1, [r2, #4]	@ zero_extendqisi2
 662 0364 41F00801 		orr	r1, r1, #8
 663 0368 1171     		strb	r1, [r2, #4]
 466:protocol.c    ****       sys.spindle_speed_ovr = last_s_override;
 664              		.loc 1 466 0
 665 036a 5372     		strb	r3, [r2, #9]
 467:protocol.c    ****       sys.report_ovr_counter = 0; // Set to report change immediately
 666              		.loc 1 467 0
 667 036c 0023     		movs	r3, #0
 668              	.LVL61:
 669 036e D372     		strb	r3, [r2, #11]
 670              	.LVL62:
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 21


 671              	.L50:
 468:protocol.c    ****     }
 469:protocol.c    **** 
 470:protocol.c    ****     if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 672              		.loc 1 470 0
 673 0370 14F0200F 		tst	r4, #32
 674 0374 11D0     		beq	.L51
 471:protocol.c    ****       // Spindle stop override allowed only while in HOLD state.
 472:protocol.c    ****       // NOTE: Report counters are set in spindle_set_state() when spindle stop is executed.
 473:protocol.c    ****       if (sys.state == STATE_HOLD) {
 675              		.loc 1 473 0
 676 0376 194B     		ldr	r3, .L64
 677 0378 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 678 037a 102B     		cmp	r3, #16
 679 037c 0DD1     		bne	.L51
 474:protocol.c    ****         if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 680              		.loc 1 474 0
 681 037e 174B     		ldr	r3, .L64
 682 0380 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 683 0382 1BB9     		cbnz	r3, .L52
 684              		.loc 1 474 0 is_stmt 0 discriminator 1
 685 0384 0222     		movs	r2, #2
 686 0386 154B     		ldr	r3, .L64
 687 0388 9A72     		strb	r2, [r3, #10]
 688 038a 06E0     		b	.L51
 689              	.L52:
 475:protocol.c    ****         else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE
 690              		.loc 1 475 0 is_stmt 1
 691 038c 13F0010F 		tst	r3, #1
 692 0390 03D0     		beq	.L51
 693              		.loc 1 475 0 is_stmt 0 discriminator 1
 694 0392 43F00403 		orr	r3, r3, #4
 695 0396 114A     		ldr	r2, .L64
 696 0398 9372     		strb	r3, [r2, #10]
 697              	.L51:
 476:protocol.c    ****       }
 477:protocol.c    ****     }
 478:protocol.c    **** 
 479:protocol.c    ****     // NOTE: Since coolant state always performs a planner sync whenever it changes, the current
 480:protocol.c    ****     // run state can be determined by checking the parser state.
 481:protocol.c    ****     if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 698              		.loc 1 481 0 is_stmt 1
 699 039a 14F0C00F 		tst	r4, #192
 700 039e 14D0     		beq	.L44
 482:protocol.c    ****       if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 701              		.loc 1 482 0
 702 03a0 0E4B     		ldr	r3, .L64
 703 03a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 704 03a4 13B1     		cbz	r3, .L53
 705              		.loc 1 482 0 is_stmt 0 discriminator 1
 706 03a6 13F0180F 		tst	r3, #24
 707 03aa 0ED0     		beq	.L44
 708              	.L53:
 709              	.LBB4:
 483:protocol.c    ****         uint8_t coolant_state = gc_state.modal.coolant;
 710              		.loc 1 483 0 is_stmt 1
 711 03ac 0D4B     		ldr	r3, .L64+8
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 22


 712 03ae 1C7A     		ldrb	r4, [r3, #8]	@ zero_extendqisi2
 713              	.LVL63:
 484:protocol.c    ****         #ifdef ENABLE_M7
 485:protocol.c    ****           if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 486:protocol.c    ****             if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE)
 487:protocol.c    ****             else { coolant_state |= COOLANT_MIST_ENABLE; }
 488:protocol.c    ****           }
 489:protocol.c    ****           if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 490:protocol.c    ****             if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABL
 491:protocol.c    ****             else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 492:protocol.c    ****           }
 493:protocol.c    ****         #else
 494:protocol.c    ****           if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE)
 714              		.loc 1 494 0
 715 03b0 14F0400F 		tst	r4, #64
 716 03b4 02D0     		beq	.L54
 717              		.loc 1 494 0 is_stmt 0 discriminator 1
 718 03b6 04F0BF04 		and	r4, r4, #191
 719              	.LVL64:
 720 03ba 01E0     		b	.L55
 721              	.L54:
 495:protocol.c    ****           else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 722              		.loc 1 495 0 is_stmt 1
 723 03bc 44F04004 		orr	r4, r4, #64
 724              	.LVL65:
 725              	.L55:
 496:protocol.c    ****         #endif
 497:protocol.c    ****         coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 726              		.loc 1 497 0
 727 03c0 2046     		mov	r0, r4
 728 03c2 FFF7FEFF 		bl	coolant_set_state
 729              	.LVL66:
 498:protocol.c    ****         gc_state.modal.coolant = coolant_state;
 730              		.loc 1 498 0
 731 03c6 074B     		ldr	r3, .L64+8
 732 03c8 1C72     		strb	r4, [r3, #8]
 733              	.LVL67:
 734              	.L44:
 735              	.LBE4:
 736              	.LBE3:
 499:protocol.c    ****       }
 500:protocol.c    ****     }
 501:protocol.c    ****     
 502:protocol.c    ****    
 503:protocol.c    ****     
 504:protocol.c    ****   }
 505:protocol.c    **** 
 506:protocol.c    ****   #ifdef DEBUG
 507:protocol.c    ****     if (sys_rt_exec_debug) {
 508:protocol.c    ****       report_realtime_debug();
 509:protocol.c    ****       sys_rt_exec_debug = 0;
 510:protocol.c    ****     }
 511:protocol.c    ****   #endif
 512:protocol.c    **** 
 513:protocol.c    ****   // Reload step segment buffer
 514:protocol.c    ****   if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE
 737              		.loc 1 514 0
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 23


 738 03ca 044B     		ldr	r3, .L64
 739 03cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 740 03ce 13F0FC0F 		tst	r3, #252
 741 03d2 01D0     		beq	.L4
 515:protocol.c    ****     st_prep_buffer();
 742              		.loc 1 515 0
 743 03d4 FFF7FEFF 		bl	st_prep_buffer
 744              	.LVL68:
 745              	.L4:
 746 03d8 10BD     		pop	{r4, pc}
 747              	.L65:
 748 03da 00BF     		.align	2
 749              	.L64:
 750 03dc 00000000 		.word	sys
 751 03e0 00000000 		.word	sys_rt_exec_accessory_override
 752 03e4 00000000 		.word	gc_state
 753              		.cfi_endproc
 754              	.LFE67:
 755              		.size	protocol_exec_rt_system, .-protocol_exec_rt_system
 756              		.section	.text.protocol_exec_rt_suspend,"ax",%progbits
 757              		.align	2
 758              		.thumb
 759              		.thumb_func
 760              		.type	protocol_exec_rt_suspend, %function
 761              	protocol_exec_rt_suspend:
 762              	.LFB68:
 516:protocol.c    ****   }
 517:protocol.c    **** 
 518:protocol.c    **** }
 519:protocol.c    **** 
 520:protocol.c    **** 
 521:protocol.c    **** // Handles Grbl system suspend procedures, such as feed hold, safety door, and parking motion.
 522:protocol.c    **** // The system will enter this loop, create local variables for suspend tasks, and return to
 523:protocol.c    **** // whatever function that invoked the suspend, such that Grbl resumes normal operation.
 524:protocol.c    **** // This function is written in a way to promote custom parking motions. Simply use this as a
 525:protocol.c    **** // template
 526:protocol.c    **** static void protocol_exec_rt_suspend()
 527:protocol.c    **** {
 763              		.loc 1 527 0
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 0
 766              		@ frame_needed = 0, uses_anonymous_args = 0
 767 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 768              		.cfi_def_cfa_offset 24
 769              		.cfi_offset 3, -24
 770              		.cfi_offset 4, -20
 771              		.cfi_offset 5, -16
 772              		.cfi_offset 6, -12
 773              		.cfi_offset 7, -8
 774              		.cfi_offset 14, -4
 528:protocol.c    ****   #ifdef PARKING_ENABLE
 529:protocol.c    ****     // Declare and initialize parking local variables
 530:protocol.c    ****     float restore_target[N_AXIS];
 531:protocol.c    ****     float parking_target[N_AXIS];
 532:protocol.c    ****     float retract_waypoint = PARKING_PULLOUT_INCREMENT;
 533:protocol.c    ****     plan_line_data_t plan_data;
 534:protocol.c    ****     plan_line_data_t *pl_data = &plan_data;
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 24


 535:protocol.c    ****     memset(pl_data,0,sizeof(plan_line_data_t));
 536:protocol.c    ****     pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 537:protocol.c    ****     #ifdef USE_LINE_NUMBERS
 538:protocol.c    ****       pl_data->line_number = PARKING_MOTION_LINE_NUMBER;
 539:protocol.c    ****     #endif
 540:protocol.c    ****   #endif
 541:protocol.c    **** 
 542:protocol.c    ****   plan_block_t *block = plan_get_current_block();
 775              		.loc 1 542 0
 776 0002 FFF7FEFF 		bl	plan_get_current_block
 777              	.LVL69:
 543:protocol.c    ****   uint8_t restore_condition;
 544:protocol.c    ****   #ifdef VARIABLE_SPINDLE
 545:protocol.c    ****     float restore_spindle_speed;
 546:protocol.c    ****     if (block == NULL) {
 778              		.loc 1 546 0
 779 0006 28B9     		cbnz	r0, .L67
 547:protocol.c    ****       restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 780              		.loc 1 547 0
 781 0008 734B     		ldr	r3, .L90
 782 000a 5C7A     		ldrb	r4, [r3, #9]	@ zero_extendqisi2
 783 000c 1A7A     		ldrb	r2, [r3, #8]	@ zero_extendqisi2
 784 000e 1443     		orrs	r4, r4, r2
 785              	.LVL70:
 548:protocol.c    ****       restore_spindle_speed = gc_state.spindle_speed;
 786              		.loc 1 548 0
 787 0010 DD68     		ldr	r5, [r3, #12]	@ float
 788              	.LVL71:
 789 0012 01E0     		b	.L68
 790              	.LVL72:
 791              	.L67:
 549:protocol.c    ****     } else {
 550:protocol.c    ****       restore_condition = block->condition;
 792              		.loc 1 550 0
 793 0014 447C     		ldrb	r4, [r0, #17]	@ zero_extendqisi2
 794              	.LVL73:
 551:protocol.c    ****       restore_spindle_speed = block->spindle_speed;
 795              		.loc 1 551 0
 796 0016 056B     		ldr	r5, [r0, #48]	@ float
 797              	.LVL74:
 798              	.L68:
 552:protocol.c    ****     }
 553:protocol.c    ****     #ifdef DISABLE_LASER_DURING_HOLD
 554:protocol.c    ****       if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) { 
 799              		.loc 1 554 0
 800 0018 704B     		ldr	r3, .L90+4
 801 001a 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
 802 001e 13F0020F 		tst	r3, #2
 803 0022 00F0D380 		beq	.L70
 555:protocol.c    ****         system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP);
 804              		.loc 1 555 0
 805 0026 2020     		movs	r0, #32
 806              	.LVL75:
 807 0028 FFF7FEFF 		bl	system_set_exec_accessory_override_flag
 808              	.LVL76:
 809 002c CEE0     		b	.L70
 810              	.L88:
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 25


 556:protocol.c    ****       }
 557:protocol.c    ****     #endif
 558:protocol.c    ****   #else
 559:protocol.c    ****     if (block == NULL) { restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant); }
 560:protocol.c    ****     else { restore_condition = block->condition; }
 561:protocol.c    ****   #endif
 562:protocol.c    **** 
 563:protocol.c    ****   while (sys.suspend) {
 564:protocol.c    **** 
 565:protocol.c    ****     if (sys.abort) { return; }
 811              		.loc 1 565 0
 812 002e 6C4A     		ldr	r2, .L90+8
 813 0030 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 814 0032 002A     		cmp	r2, #0
 815 0034 40F0CF80 		bne	.L66
 566:protocol.c    **** 
 567:protocol.c    ****     // Block until initial hold is complete and the machine has stopped motion.
 568:protocol.c    ****     if (sys.suspend & SUSPEND_HOLD_COMPLETE) {
 816              		.loc 1 568 0
 817 0038 13F0010F 		tst	r3, #1
 818 003c 00F0C480 		beq	.L72
 569:protocol.c    **** 
 570:protocol.c    ****       // Parking manager. Handles de/re-energizing, switch state checks, and parking motions for 
 571:protocol.c    ****       // the safety door and sleep states.
 572:protocol.c    ****       if (sys.state & (STATE_SAFETY_DOOR | STATE_SLEEP)) {
 819              		.loc 1 572 0
 820 0040 674A     		ldr	r2, .L90+8
 821 0042 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 822 0044 12F0C00F 		tst	r2, #192
 823 0048 73D0     		beq	.L73
 573:protocol.c    ****       
 574:protocol.c    ****         // Handles retraction motions and de-energizing.
 575:protocol.c    ****         if (bit_isfalse(sys.suspend,SUSPEND_RETRACT_COMPLETE)) {
 824              		.loc 1 575 0
 825 004a 13F0040F 		tst	r3, #4
 826 004e 10D1     		bne	.L74
 576:protocol.c    **** 
 577:protocol.c    ****           // Ensure any prior spindle stop override is disabled at start of safety door routine.
 578:protocol.c    ****           sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED;
 827              		.loc 1 578 0
 828 0050 634E     		ldr	r6, .L90+8
 829 0052 0027     		movs	r7, #0
 830 0054 B772     		strb	r7, [r6, #10]
 579:protocol.c    **** 
 580:protocol.c    ****           #ifndef PARKING_ENABLE
 581:protocol.c    **** 
 582:protocol.c    ****             spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 831              		.loc 1 582 0
 832 0056 3846     		mov	r0, r7
 833 0058 0021     		movs	r1, #0
 834 005a FFF7FEFF 		bl	spindle_set_state
 835              	.LVL77:
 583:protocol.c    ****             coolant_set_state(COOLANT_DISABLE);     // De-energize
 836              		.loc 1 583 0
 837 005e 3846     		mov	r0, r7
 838 0060 FFF7FEFF 		bl	coolant_set_state
 839              	.LVL78:
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 26


 584:protocol.c    **** 
 585:protocol.c    ****           #else
 586:protocol.c    **** 					
 587:protocol.c    ****             // Get current position and store restore location and spindle retract waypoint.
 588:protocol.c    ****             system_convert_array_steps_to_mpos(parking_target,sys_position);
 589:protocol.c    ****             if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 590:protocol.c    ****               memcpy(restore_target,parking_target,sizeof(parking_target));
 591:protocol.c    ****               retract_waypoint += restore_target[PARKING_AXIS];
 592:protocol.c    ****               retract_waypoint = min(retract_waypoint,PARKING_TARGET);
 593:protocol.c    ****             }
 594:protocol.c    **** 
 595:protocol.c    ****             // Execute slow pull-out parking retract motion. Parking requires homing enabled, the
 596:protocol.c    ****             // current location not exceeding the parking target location, and laser mode disabled.
 597:protocol.c    ****             // NOTE: State is will remain DOOR, until the de-energizing and retract is complete.
 598:protocol.c    ****             if ((bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) &&
 599:protocol.c    ****                             (parking_target[PARKING_AXIS] < PARKING_TARGET) &&
 600:protocol.c    ****                             bit_isfalse(settings.flags,BITFLAG_LASER_MODE)) {
 601:protocol.c    **** 
 602:protocol.c    ****               // Retract spindle by pullout distance. Ensure retraction motion moves away from
 603:protocol.c    ****               // the workpiece and waypoint motion doesn't exceed the parking target location.
 604:protocol.c    ****               if (parking_target[PARKING_AXIS] < retract_waypoint) {
 605:protocol.c    ****                 parking_target[PARKING_AXIS] = retract_waypoint;
 606:protocol.c    ****                 pl_data->feed_rate = PARKING_PULLOUT_RATE;
 607:protocol.c    ****                 pl_data->condition |= (restore_condition & PL_COND_ACCESSORY_MASK); // Retain acces
 608:protocol.c    ****                 pl_data->spindle_speed = restore_spindle_speed;
 609:protocol.c    ****                 mc_parking_motion(parking_target, pl_data);
 610:protocol.c    ****               }
 611:protocol.c    **** 
 612:protocol.c    ****               // NOTE: Clear accessory state after retract and after an aborted restore motion.
 613:protocol.c    ****               pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 614:protocol.c    ****               pl_data->spindle_speed = 0.0;
 615:protocol.c    ****               spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 616:protocol.c    ****               coolant_set_state(COOLANT_DISABLE); // De-energize
 617:protocol.c    **** 
 618:protocol.c    ****               // Execute fast parking retract motion to parking target location.
 619:protocol.c    ****               if (parking_target[PARKING_AXIS] < PARKING_TARGET) {
 620:protocol.c    ****                 parking_target[PARKING_AXIS] = PARKING_TARGET;
 621:protocol.c    ****                 pl_data->feed_rate = PARKING_RATE;
 622:protocol.c    ****                 mc_parking_motion(parking_target, pl_data);
 623:protocol.c    ****               }
 624:protocol.c    **** 
 625:protocol.c    ****             } else {
 626:protocol.c    **** 
 627:protocol.c    ****               // Parking motion not possible. Just disable the spindle and coolant.
 628:protocol.c    ****               // NOTE: Laser mode does not start a parking motion to ensure the laser stops immedia
 629:protocol.c    ****               spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 630:protocol.c    ****               coolant_set_state(COOLANT_DISABLE);     // De-energize
 631:protocol.c    **** 
 632:protocol.c    ****             }
 633:protocol.c    **** 
 634:protocol.c    ****           #endif
 635:protocol.c    **** 
 636:protocol.c    ****           sys.suspend &= ~(SUSPEND_RESTART_RETRACT);
 840              		.loc 1 636 0
 841 0064 B378     		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 842 0066 03F0FD03 		and	r3, r3, #253
 637:protocol.c    ****           sys.suspend |= SUSPEND_RETRACT_COMPLETE;
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 27


 843              		.loc 1 637 0
 844 006a 43F00403 		orr	r3, r3, #4
 845 006e B370     		strb	r3, [r6, #2]
 846 0070 AAE0     		b	.L72
 847              	.L74:
 638:protocol.c    **** 
 639:protocol.c    ****         } else {
 640:protocol.c    **** 
 641:protocol.c    ****           
 642:protocol.c    ****           if (sys.state == STATE_SLEEP) {
 848              		.loc 1 642 0
 849 0072 802A     		cmp	r2, #128
 850 0074 13D1     		bne	.L75
 643:protocol.c    ****             report_feedback_message(MESSAGE_SLEEP_MODE);
 851              		.loc 1 643 0
 852 0076 0B20     		movs	r0, #11
 853 0078 FFF7FEFF 		bl	report_feedback_message
 854              	.LVL79:
 644:protocol.c    ****             // Spindle and coolant should already be stopped, but do it again just to be sure.
 645:protocol.c    ****             spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 855              		.loc 1 645 0
 856 007c 0020     		movs	r0, #0
 857 007e 0021     		movs	r1, #0
 858 0080 FFF7FEFF 		bl	spindle_set_state
 859              	.LVL80:
 646:protocol.c    ****             coolant_set_state(COOLANT_DISABLE); // De-energize
 860              		.loc 1 646 0
 861 0084 0020     		movs	r0, #0
 862 0086 FFF7FEFF 		bl	coolant_set_state
 863              	.LVL81:
 647:protocol.c    ****             st_go_idle(); // Disable steppers
 864              		.loc 1 647 0
 865 008a FFF7FEFF 		bl	st_go_idle
 866              	.LVL82:
 648:protocol.c    ****             while (!(sys.abort)) { protocol_exec_rt_system(); } // Do nothing until reset.
 867              		.loc 1 648 0
 868 008e 01E0     		b	.L76
 869              	.L77:
 870              		.loc 1 648 0 is_stmt 0 discriminator 2
 871 0090 FFF7FEFF 		bl	protocol_exec_rt_system
 872              	.LVL83:
 873              	.L76:
 874              		.loc 1 648 0 discriminator 1
 875 0094 524B     		ldr	r3, .L90+8
 876 0096 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 877 0098 002B     		cmp	r3, #0
 878 009a F9D0     		beq	.L77
 879 009c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 880              	.LVL84:
 881              	.L75:
 649:protocol.c    ****             return; // Abort received. Return to re-initialize.
 650:protocol.c    ****           }    
 651:protocol.c    ****           
 652:protocol.c    ****           // Allows resuming from parking/safety door. Actively checks if safety door is closed and
 653:protocol.c    ****           if (sys.state == STATE_SAFETY_DOOR) {
 882              		.loc 1 653 0 is_stmt 1
 883 009e 402A     		cmp	r2, #64
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 28


 884 00a0 07D1     		bne	.L78
 654:protocol.c    ****             if (!(system_check_safety_door_ajar())) {
 885              		.loc 1 654 0
 886 00a2 FFF7FEFF 		bl	system_check_safety_door_ajar
 887              	.LVL85:
 888 00a6 20B9     		cbnz	r0, .L78
 655:protocol.c    ****               sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready t
 889              		.loc 1 655 0
 890 00a8 4D4A     		ldr	r2, .L90+8
 891 00aa 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 892 00ac 23F02003 		bic	r3, r3, #32
 893 00b0 9370     		strb	r3, [r2, #2]
 894              	.L78:
 656:protocol.c    ****             }
 657:protocol.c    ****           }
 658:protocol.c    **** 
 659:protocol.c    ****           // Handles parking restore and safety door resume.
 660:protocol.c    ****           if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 895              		.loc 1 660 0
 896 00b2 4B4B     		ldr	r3, .L90+8
 897 00b4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 898 00b6 13F0080F 		tst	r3, #8
 899 00ba 00F08580 		beq	.L72
 661:protocol.c    **** 
 662:protocol.c    ****             #ifdef PARKING_ENABLE
 663:protocol.c    ****               // Execute fast restore motion to the pull-out position. Parking requires homing enab
 664:protocol.c    ****               // NOTE: State is will remain DOOR, until the de-energizing and retract is complete.
 665:protocol.c    ****               if ((settings.flags & (BITFLAG_HOMING_ENABLE|BITFLAG_LASER_MODE)) == BITFLAG_HOMING_E
 666:protocol.c    ****                 // Check to ensure the motion doesn't move below pull-out position.
 667:protocol.c    ****                 if (parking_target[PARKING_AXIS] <= PARKING_TARGET) {
 668:protocol.c    ****                   parking_target[PARKING_AXIS] = retract_waypoint;
 669:protocol.c    ****                   pl_data->feed_rate = PARKING_RATE;
 670:protocol.c    ****                   mc_parking_motion(parking_target, pl_data);
 671:protocol.c    ****                 }
 672:protocol.c    ****               }
 673:protocol.c    ****             #endif
 674:protocol.c    **** 
 675:protocol.c    ****             // Delayed Tasks: Restart spindle and coolant, delay to power-up, then resume cycle.
 676:protocol.c    ****             if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 900              		.loc 1 676 0
 901 00be 464A     		ldr	r2, .L90
 902 00c0 527A     		ldrb	r2, [r2, #9]	@ zero_extendqisi2
 903 00c2 C2B1     		cbz	r2, .L79
 677:protocol.c    ****               // Block if safety door re-opened during prior restore actions.
 678:protocol.c    ****               if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 904              		.loc 1 678 0
 905 00c4 13F0020F 		tst	r3, #2
 906 00c8 15D1     		bne	.L79
 679:protocol.c    ****                 if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 907              		.loc 1 679 0
 908 00ca 444B     		ldr	r3, .L90+4
 909 00cc 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
 910 00d0 13F0020F 		tst	r3, #2
 911 00d4 05D0     		beq	.L80
 680:protocol.c    ****                   // When in laser mode, ignore spindle spin-up delay. Set to turn on laser when cy
 681:protocol.c    ****                   bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 912              		.loc 1 681 0
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 29


 913 00d6 424A     		ldr	r2, .L90+8
 914 00d8 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 915 00da 43F00803 		orr	r3, r3, #8
 916 00de 1371     		strb	r3, [r2, #4]
 917 00e0 09E0     		b	.L79
 918              	.L80:
 682:protocol.c    ****                 } else {
 683:protocol.c    ****                   spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SP
 919              		.loc 1 683 0
 920 00e2 04F03000 		and	r0, r4, #48
 921 00e6 2946     		mov	r1, r5
 922 00e8 FFF7FEFF 		bl	spindle_set_state
 923              	.LVL86:
 684:protocol.c    ****                   delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 924              		.loc 1 684 0
 925 00ec 4FF08140 		mov	r0, #1082130432
 926 00f0 0121     		movs	r1, #1
 927 00f2 FFF7FEFF 		bl	delay_sec
 928              	.LVL87:
 929              	.L79:
 685:protocol.c    ****                 }
 686:protocol.c    ****               }
 687:protocol.c    ****             }
 688:protocol.c    ****             if (gc_state.modal.coolant != COOLANT_DISABLE) {
 930              		.loc 1 688 0
 931 00f6 384B     		ldr	r3, .L90
 932 00f8 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 933 00fa 6BB1     		cbz	r3, .L81
 689:protocol.c    ****               // Block if safety door re-opened during prior restore actions.
 690:protocol.c    ****               if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 934              		.loc 1 690 0
 935 00fc 384B     		ldr	r3, .L90+8
 936 00fe 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 937 0100 13F0020F 		tst	r3, #2
 938 0104 08D1     		bne	.L81
 691:protocol.c    ****                 // NOTE: Laser mode will honor this delay. An exhaust system is often controlled by
 692:protocol.c    ****                 coolant_set_state((restore_condition & (PL_COND_FLAG_COOLANT_FLOOD | PL_COND_FLAG_C
 939              		.loc 1 692 0
 940 0106 04F04000 		and	r0, r4, #64
 941 010a FFF7FEFF 		bl	coolant_set_state
 942              	.LVL88:
 693:protocol.c    ****                 delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 943              		.loc 1 693 0
 944 010e 4FF07E50 		mov	r0, #1065353216
 945 0112 0121     		movs	r1, #1
 946 0114 FFF7FEFF 		bl	delay_sec
 947              	.LVL89:
 948              	.L81:
 694:protocol.c    ****               }
 695:protocol.c    ****             }
 696:protocol.c    **** 
 697:protocol.c    ****             #ifdef PARKING_ENABLE
 698:protocol.c    ****               // Execute slow plunge motion from pull-out position to resume position.
 699:protocol.c    ****               if ((settings.flags & (BITFLAG_HOMING_ENABLE|BITFLAG_LASER_MODE)) == BITFLAG_HOMING_E
 700:protocol.c    ****                 // Block if safety door re-opened during prior restore actions.
 701:protocol.c    ****                 if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 702:protocol.c    ****                   // Regardless if the retract parking motion was a valid/safe motion or not, the
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 30


 703:protocol.c    ****                   // restore parking motion should logically be valid, either by returning to the
 704:protocol.c    ****                   // original position through valid machine space or by not moving at all.
 705:protocol.c    ****                   pl_data->feed_rate = PARKING_PULLOUT_RATE;
 706:protocol.c    **** 									pl_data->condition |= (restore_condition & PL_COND_ACCESSORY_MASK); // Restore accessory s
 707:protocol.c    **** 									pl_data->spindle_speed = restore_spindle_speed;
 708:protocol.c    ****                   mc_parking_motion(restore_target, pl_data);
 709:protocol.c    ****                 }
 710:protocol.c    ****               }
 711:protocol.c    ****             #endif
 712:protocol.c    **** 
 713:protocol.c    ****             if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 949              		.loc 1 713 0
 950 0118 314B     		ldr	r3, .L90+8
 951 011a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 952 011c 13F0020F 		tst	r3, #2
 953 0120 52D1     		bne	.L72
 714:protocol.c    ****               sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 954              		.loc 1 714 0
 955 0122 43F01003 		orr	r3, r3, #16
 956 0126 2E4A     		ldr	r2, .L90+8
 957 0128 9370     		strb	r3, [r2, #2]
 715:protocol.c    ****               system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 958              		.loc 1 715 0
 959 012a 0220     		movs	r0, #2
 960 012c FFF7FEFF 		bl	system_set_exec_state_flag
 961              	.LVL90:
 962 0130 4AE0     		b	.L72
 963              	.L73:
 716:protocol.c    ****             }
 717:protocol.c    ****           }
 718:protocol.c    **** 
 719:protocol.c    ****         }
 720:protocol.c    **** 
 721:protocol.c    **** 
 722:protocol.c    ****       } else {
 723:protocol.c    **** 
 724:protocol.c    ****         // Feed hold manager. Controls spindle stop override states.
 725:protocol.c    ****         // NOTE: Hold ensured as completed by condition check at the beginning of suspend routine.
 726:protocol.c    ****         if (sys.spindle_stop_ovr) {
 964              		.loc 1 726 0
 965 0132 2B4B     		ldr	r3, .L90+8
 966 0134 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 967 0136 002B     		cmp	r3, #0
 968 0138 37D0     		beq	.L82
 727:protocol.c    ****           // Handles beginning of spindle stop
 728:protocol.c    ****           if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
 969              		.loc 1 728 0
 970 013a 13F0020F 		tst	r3, #2
 971 013e 0ED0     		beq	.L83
 729:protocol.c    ****             if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 972              		.loc 1 729 0
 973 0140 254B     		ldr	r3, .L90
 974 0142 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 975 0144 3BB1     		cbz	r3, .L84
 730:protocol.c    ****               spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 976              		.loc 1 730 0
 977 0146 0020     		movs	r0, #0
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 31


 978 0148 0021     		movs	r1, #0
 979 014a FFF7FEFF 		bl	spindle_set_state
 980              	.LVL91:
 731:protocol.c    ****               sys.spindle_stop_ovr = SPINDLE_STOP_OVR_ENABLED; // Set stop override state to enable
 981              		.loc 1 731 0
 982 014e 0122     		movs	r2, #1
 983 0150 234B     		ldr	r3, .L90+8
 984 0152 9A72     		strb	r2, [r3, #10]
 985 0154 38E0     		b	.L72
 986              	.L84:
 732:protocol.c    ****             } else {
 733:protocol.c    ****               sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 987              		.loc 1 733 0
 988 0156 0022     		movs	r2, #0
 989 0158 214B     		ldr	r3, .L90+8
 990 015a 9A72     		strb	r2, [r3, #10]
 991 015c 34E0     		b	.L72
 992              	.L83:
 734:protocol.c    ****             }
 735:protocol.c    ****           // Handles restoring of spindle state
 736:protocol.c    ****           } else if (sys.spindle_stop_ovr & (SPINDLE_STOP_OVR_RESTORE | SPINDLE_STOP_OVR_RESTORE_CY
 993              		.loc 1 736 0
 994 015e 13F00C0F 		tst	r3, #12
 995 0162 31D0     		beq	.L72
 737:protocol.c    ****             if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 996              		.loc 1 737 0
 997 0164 1C4B     		ldr	r3, .L90
 998 0166 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 999 0168 9BB1     		cbz	r3, .L85
 738:protocol.c    ****               report_feedback_message(MESSAGE_SPINDLE_RESTORE);
 1000              		.loc 1 738 0
 1001 016a 0A20     		movs	r0, #10
 1002 016c FFF7FEFF 		bl	report_feedback_message
 1003              	.LVL92:
 739:protocol.c    ****               if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 1004              		.loc 1 739 0
 1005 0170 1A4B     		ldr	r3, .L90+4
 1006 0172 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
 1007 0176 13F0020F 		tst	r3, #2
 1008 017a 05D0     		beq	.L86
 740:protocol.c    ****                 // When in laser mode, ignore spindle spin-up delay. Set to turn on laser when cycl
 741:protocol.c    ****                 bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 1009              		.loc 1 741 0
 1010 017c 184A     		ldr	r2, .L90+8
 1011 017e 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 1012 0180 43F00803 		orr	r3, r3, #8
 1013 0184 1371     		strb	r3, [r2, #4]
 1014 0186 04E0     		b	.L85
 1015              	.L86:
 742:protocol.c    ****               } else {
 743:protocol.c    ****                 spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPIN
 1016              		.loc 1 743 0
 1017 0188 04F03000 		and	r0, r4, #48
 1018 018c 2946     		mov	r1, r5
 1019 018e FFF7FEFF 		bl	spindle_set_state
 1020              	.LVL93:
 1021              	.L85:
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 32


 744:protocol.c    ****               }
 745:protocol.c    ****             }
 746:protocol.c    ****             if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 1022              		.loc 1 746 0
 1023 0192 134B     		ldr	r3, .L90+8
 1024 0194 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 1025 0196 13F0080F 		tst	r3, #8
 1026 019a 02D0     		beq	.L87
 747:protocol.c    ****               system_set_exec_state_flag(EXEC_CYCLE_START);  // Set to resume program.
 1027              		.loc 1 747 0
 1028 019c 0220     		movs	r0, #2
 1029 019e FFF7FEFF 		bl	system_set_exec_state_flag
 1030              	.LVL94:
 1031              	.L87:
 748:protocol.c    ****             }
 749:protocol.c    ****             sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 1032              		.loc 1 749 0
 1033 01a2 0022     		movs	r2, #0
 1034 01a4 0E4B     		ldr	r3, .L90+8
 1035 01a6 9A72     		strb	r2, [r3, #10]
 1036 01a8 0EE0     		b	.L72
 1037              	.L82:
 750:protocol.c    ****           }
 751:protocol.c    ****         } else {
 752:protocol.c    ****           // Handles spindle state during hold. NOTE: Spindle speed overrides may be altered during
 753:protocol.c    ****           // NOTE: STEP_CONTROL_UPDATE_SPINDLE_PWM is automatically reset upon resume in step gener
 754:protocol.c    ****           if (bit_istrue(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 1038              		.loc 1 754 0
 1039 01aa 0D4B     		ldr	r3, .L90+8
 1040 01ac 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1041 01ae 13F0080F 		tst	r3, #8
 1042 01b2 09D0     		beq	.L72
 755:protocol.c    ****             spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_
 1043              		.loc 1 755 0
 1044 01b4 04F03000 		and	r0, r4, #48
 1045 01b8 2946     		mov	r1, r5
 1046 01ba FFF7FEFF 		bl	spindle_set_state
 1047              	.LVL95:
 756:protocol.c    ****             bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 1048              		.loc 1 756 0
 1049 01be 084A     		ldr	r2, .L90+8
 1050 01c0 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 1051 01c2 23F00803 		bic	r3, r3, #8
 1052 01c6 1371     		strb	r3, [r2, #4]
 1053              	.L72:
 757:protocol.c    ****           }
 758:protocol.c    ****         }
 759:protocol.c    **** 
 760:protocol.c    ****       }
 761:protocol.c    ****     }
 762:protocol.c    **** 
 763:protocol.c    ****     protocol_exec_rt_system();
 1054              		.loc 1 763 0
 1055 01c8 FFF7FEFF 		bl	protocol_exec_rt_system
 1056              	.LVL96:
 1057              	.L70:
 563:protocol.c    **** 
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 33


 1058              		.loc 1 563 0
 1059 01cc 044B     		ldr	r3, .L90+8
 1060 01ce 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1061 01d0 002B     		cmp	r3, #0
 1062 01d2 7FF42CAF 		bne	.L88
 1063              	.L66:
 1064 01d6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1065              	.LVL97:
 1066              	.L91:
 1067              		.align	2
 1068              	.L90:
 1069 01d8 00000000 		.word	gc_state
 1070 01dc 00000000 		.word	settings
 1071 01e0 00000000 		.word	sys
 1072              		.cfi_endproc
 1073              	.LFE68:
 1074              		.size	protocol_exec_rt_suspend, .-protocol_exec_rt_suspend
 1075              		.section	.text.protocol_execute_realtime,"ax",%progbits
 1076              		.align	2
 1077              		.global	protocol_execute_realtime
 1078              		.thumb
 1079              		.thumb_func
 1080              		.type	protocol_execute_realtime, %function
 1081              	protocol_execute_realtime:
 1082              	.LFB66:
 214:protocol.c    ****   protocol_exec_rt_system();
 1083              		.loc 1 214 0
 1084              		.cfi_startproc
 1085              		@ args = 0, pretend = 0, frame = 0
 1086              		@ frame_needed = 0, uses_anonymous_args = 0
 1087 0000 08B5     		push	{r3, lr}
 1088              		.cfi_def_cfa_offset 8
 1089              		.cfi_offset 3, -8
 1090              		.cfi_offset 14, -4
 215:protocol.c    ****   if (sys.suspend) { protocol_exec_rt_suspend(); }
 1091              		.loc 1 215 0
 1092 0002 FFF7FEFF 		bl	protocol_exec_rt_system
 1093              	.LVL98:
 216:protocol.c    ****   
 1094              		.loc 1 216 0
 1095 0006 074B     		ldr	r3, .L96
 1096 0008 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1097 000a 0BB1     		cbz	r3, .L93
 216:protocol.c    ****   
 1098              		.loc 1 216 0 is_stmt 0 discriminator 1
 1099 000c FFF7FEFF 		bl	protocol_exec_rt_suspend
 1100              	.LVL99:
 1101              	.L93:
 219:protocol.c    ****       lcd_report_realtime(); 
 1102              		.loc 1 219 0 is_stmt 1
 1103 0010 054B     		ldr	r3, .L96+4
 1104 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1105 0014 23B1     		cbz	r3, .L92
 220:protocol.c    ****       exec_lcd_status = false;
 1106              		.loc 1 220 0
 1107 0016 FFF7FEFF 		bl	lcd_report_realtime
 1108              	.LVL100:
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 34


 221:protocol.c    ****     }
 1109              		.loc 1 221 0
 1110 001a 0022     		movs	r2, #0
 1111 001c 024B     		ldr	r3, .L96+4
 1112 001e 1A70     		strb	r2, [r3]
 1113              	.L92:
 1114 0020 08BD     		pop	{r3, pc}
 1115              	.L97:
 1116 0022 00BF     		.align	2
 1117              	.L96:
 1118 0024 00000000 		.word	sys
 1119 0028 00000000 		.word	exec_lcd_status
 1120              		.cfi_endproc
 1121              	.LFE66:
 1122              		.size	protocol_execute_realtime, .-protocol_execute_realtime
 1123              		.section	.text.protocol_main_loop,"ax",%progbits
 1124              		.align	2
 1125              		.global	protocol_main_loop
 1126              		.thumb
 1127              		.thumb_func
 1128              		.type	protocol_main_loop, %function
 1129              	protocol_main_loop:
 1130              	.LFB63:
  39:protocol.c    ****   // Perform some machine checks to make sure everything is good to go.
 1131              		.loc 1 39 0
 1132              		.cfi_startproc
 1133              		@ args = 0, pretend = 0, frame = 0
 1134              		@ frame_needed = 0, uses_anonymous_args = 0
 1135 0000 38B5     		push	{r3, r4, r5, lr}
 1136              		.cfi_def_cfa_offset 16
 1137              		.cfi_offset 3, -16
 1138              		.cfi_offset 4, -12
 1139              		.cfi_offset 5, -8
 1140              		.cfi_offset 14, -4
  42:protocol.c    ****       if (limits_get_state()) {
 1141              		.loc 1 42 0
 1142 0002 554B     		ldr	r3, .L120
 1143 0004 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
 1144 0008 13F0080F 		tst	r3, #8
 1145 000c 08D0     		beq	.L99
  43:protocol.c    ****         sys.state = STATE_ALARM; // Ensure alarm state is active.
 1146              		.loc 1 43 0
 1147 000e FFF7FEFF 		bl	limits_get_state
 1148              	.LVL101:
 1149 0012 28B1     		cbz	r0, .L99
  44:protocol.c    ****         report_feedback_message(MESSAGE_CHECK_LIMITS);
 1150              		.loc 1 44 0
 1151 0014 0122     		movs	r2, #1
 1152 0016 514B     		ldr	r3, .L120+4
 1153 0018 1A70     		strb	r2, [r3]
  45:protocol.c    ****       }
 1154              		.loc 1 45 0
 1155 001a 0720     		movs	r0, #7
 1156 001c FFF7FEFF 		bl	report_feedback_message
 1157              	.LVL102:
 1158              	.L99:
  52:protocol.c    ****     report_feedback_message(MESSAGE_ALARM_LOCK);
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 35


 1159              		.loc 1 52 0
 1160 0020 4E4B     		ldr	r3, .L120+4
 1161 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1162 0024 13F0810F 		tst	r3, #129
 1163 0028 08D0     		beq	.L100
  53:protocol.c    ****     sys.state = STATE_ALARM; // Ensure alarm state is set.
 1164              		.loc 1 53 0
 1165 002a 0220     		movs	r0, #2
 1166 002c FFF7FEFF 		bl	report_feedback_message
 1167              	.LVL103:
  54:protocol.c    ****   } else {
 1168              		.loc 1 54 0
 1169 0030 0122     		movs	r2, #1
 1170 0032 4A4B     		ldr	r3, .L120+4
 1171 0034 1A70     		strb	r2, [r3]
 1172              	.L103:
 108:protocol.c    ****         char_counter = 0;
 1173              		.loc 1 108 0
 1174 0036 0025     		movs	r5, #0
 1175 0038 2C46     		mov	r4, r5
 1176 003a 7FE0     		b	.L101
 1177              	.L100:
  57:protocol.c    ****     if (system_check_safety_door_ajar()) {
 1178              		.loc 1 57 0
 1179 003c 0022     		movs	r2, #0
 1180 003e 474B     		ldr	r3, .L120+4
 1181 0040 1A70     		strb	r2, [r3]
  58:protocol.c    ****       bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 1182              		.loc 1 58 0
 1183 0042 FFF7FEFF 		bl	system_check_safety_door_ajar
 1184              	.LVL104:
 1185 0046 30B1     		cbz	r0, .L102
  59:protocol.c    ****       protocol_execute_realtime(); // Enter safety door mode. Should return as IDLE state.
 1186              		.loc 1 59 0
 1187 0048 454A     		ldr	r2, .L120+8
 1188 004a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1189 004c 43F02003 		orr	r3, r3, #32
 1190 0050 1370     		strb	r3, [r2]
  60:protocol.c    ****     }
 1191              		.loc 1 60 0
 1192 0052 FFF7FEFF 		bl	protocol_execute_realtime
 1193              	.LVL105:
 1194              	.L102:
  63:protocol.c    ****   }
 1195              		.loc 1 63 0
 1196 0056 4348     		ldr	r0, .L120+12
 1197 0058 FFF7FEFF 		bl	system_execute_startup
 1198              	.LVL106:
 1199 005c EBE7     		b	.L103
 1200              	.LVL107:
 1201              	.L118:
  79:protocol.c    **** 
 1202              		.loc 1 79 0
 1203 005e 0A28     		cmp	r0, #10
 1204 0060 01D0     		beq	.L104
  79:protocol.c    **** 
 1205              		.loc 1 79 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 36


 1206 0062 0D28     		cmp	r0, #13
 1207 0064 37D1     		bne	.L105
 1208              	.L104:
  81:protocol.c    ****         if (sys.abort) { return; } // Bail to calling function upon system abort
 1209              		.loc 1 81 0 is_stmt 1
 1210 0066 FFF7FEFF 		bl	protocol_execute_realtime
 1211              	.LVL108:
  82:protocol.c    **** 
 1212              		.loc 1 82 0
 1213 006a 3C4B     		ldr	r3, .L120+4
 1214 006c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1215 006e 002B     		cmp	r3, #0
 1216 0070 70D1     		bne	.L98
  84:protocol.c    ****         #ifdef REPORT_ECHO_LINE_RECEIVED
 1217              		.loc 1 84 0
 1218 0072 0022     		movs	r2, #0
 1219 0074 3B4B     		ldr	r3, .L120+12
 1220 0076 5A55     		strb	r2, [r3, r5]
  90:protocol.c    ****           // Report line overflow error.
 1221              		.loc 1 90 0
 1222 0078 14F0010F 		tst	r4, #1
 1223 007c 05D0     		beq	.L107
  92:protocol.c    ****         } else if (line[0] == 0) {
 1224              		.loc 1 92 0
 1225 007e 0B20     		movs	r0, #11
 1226 0080 FFF7FEFF 		bl	report_status_message
 1227              	.LVL109:
 109:protocol.c    **** 
 1228              		.loc 1 109 0
 1229 0084 0025     		movs	r5, #0
 1230              	.LVL110:
 108:protocol.c    ****         char_counter = 0;
 1231              		.loc 1 108 0
 1232 0086 2C46     		mov	r4, r5
 1233              	.LVL111:
 1234 0088 50E0     		b	.L108
 1235              	.LVL112:
 1236              	.L107:
  93:protocol.c    ****           // Empty or comment line. For syncing purposes.
 1237              		.loc 1 93 0
 1238 008a 364B     		ldr	r3, .L120+12
 1239 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1240 008e 2BB9     		cbnz	r3, .L109
  95:protocol.c    ****         } else if (line[0] == '$') {
 1241              		.loc 1 95 0
 1242 0090 0020     		movs	r0, #0
 1243 0092 FFF7FEFF 		bl	report_status_message
 1244              	.LVL113:
 109:protocol.c    **** 
 1245              		.loc 1 109 0
 1246 0096 0025     		movs	r5, #0
 1247              	.LVL114:
 108:protocol.c    ****         char_counter = 0;
 1248              		.loc 1 108 0
 1249 0098 2C46     		mov	r4, r5
 1250              	.LVL115:
 1251 009a 47E0     		b	.L108
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 37


 1252              	.LVL116:
 1253              	.L109:
  96:protocol.c    ****           // Grbl '$' system command
 1254              		.loc 1 96 0
 1255 009c 242B     		cmp	r3, #36
 1256 009e 07D1     		bne	.L110
  98:protocol.c    ****         } else if (sys.state & (STATE_ALARM | STATE_JOG)) {
 1257              		.loc 1 98 0
 1258 00a0 3048     		ldr	r0, .L120+12
 1259 00a2 FFF7FEFF 		bl	system_execute_line
 1260              	.LVL117:
 1261 00a6 FFF7FEFF 		bl	report_status_message
 1262              	.LVL118:
 109:protocol.c    **** 
 1263              		.loc 1 109 0
 1264 00aa 0025     		movs	r5, #0
 1265              	.LVL119:
 108:protocol.c    ****         char_counter = 0;
 1266              		.loc 1 108 0
 1267 00ac 2C46     		mov	r4, r5
 1268              	.LVL120:
 1269 00ae 3DE0     		b	.L108
 1270              	.LVL121:
 1271              	.L110:
  99:protocol.c    ****           // Everything else is gcode. Block if in alarm or jog mode.
 1272              		.loc 1 99 0
 1273 00b0 2A4B     		ldr	r3, .L120+4
 1274 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1275 00b4 13F0210F 		tst	r3, #33
 1276 00b8 05D0     		beq	.L111
 101:protocol.c    ****         } else {
 1277              		.loc 1 101 0
 1278 00ba 0920     		movs	r0, #9
 1279 00bc FFF7FEFF 		bl	report_status_message
 1280              	.LVL122:
 109:protocol.c    **** 
 1281              		.loc 1 109 0
 1282 00c0 0025     		movs	r5, #0
 1283              	.LVL123:
 108:protocol.c    ****         char_counter = 0;
 1284              		.loc 1 108 0
 1285 00c2 2C46     		mov	r4, r5
 1286              	.LVL124:
 1287 00c4 32E0     		b	.L108
 1288              	.LVL125:
 1289              	.L111:
 104:protocol.c    ****         }
 1290              		.loc 1 104 0
 1291 00c6 2748     		ldr	r0, .L120+12
 1292 00c8 FFF7FEFF 		bl	gc_execute_line
 1293              	.LVL126:
 1294 00cc FFF7FEFF 		bl	report_status_message
 1295              	.LVL127:
 109:protocol.c    **** 
 1296              		.loc 1 109 0
 1297 00d0 0025     		movs	r5, #0
 1298              	.LVL128:
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 38


 108:protocol.c    ****         char_counter = 0;
 1299              		.loc 1 108 0
 1300 00d2 2C46     		mov	r4, r5
 1301              	.LVL129:
 1302 00d4 2AE0     		b	.L108
 1303              	.LVL130:
 1304              	.L105:
 113:protocol.c    ****           // Throw away all (except EOL) comment characters and overflow characters.
 1305              		.loc 1 113 0
 1306 00d6 3CB1     		cbz	r4, .L112
 115:protocol.c    ****             // End of '()' comment. Resume line allowed.
 1307              		.loc 1 115 0
 1308 00d8 2928     		cmp	r0, #41
 1309 00da 27D1     		bne	.L108
 117:protocol.c    ****           }
 1310              		.loc 1 117 0
 1311 00dc 14F0020F 		tst	r4, #2
 1312 00e0 24D0     		beq	.L108
 117:protocol.c    ****           }
 1313              		.loc 1 117 0 is_stmt 0 discriminator 1
 1314 00e2 04F0FD04 		and	r4, r4, #253
 1315              	.LVL131:
 1316 00e6 21E0     		b	.L108
 1317              	.L112:
 120:protocol.c    ****             // Throw away whitepace and control characters
 1318              		.loc 1 120 0 is_stmt 1
 1319 00e8 2028     		cmp	r0, #32
 1320 00ea 1FD9     		bls	.L108
 122:protocol.c    ****             // Block delete NOT SUPPORTED. Ignore character.
 1321              		.loc 1 122 0
 1322 00ec 2F28     		cmp	r0, #47
 1323 00ee 1DD0     		beq	.L108
 125:protocol.c    ****             // Enable comments flag and ignore all characters until ')' or EOL.
 1324              		.loc 1 125 0
 1325 00f0 2828     		cmp	r0, #40
 1326 00f2 02D1     		bne	.L113
 130:protocol.c    ****           } else if (c == ';') {
 1327              		.loc 1 130 0
 1328 00f4 44F00204 		orr	r4, r4, #2
 1329              	.LVL132:
 1330 00f8 18E0     		b	.L108
 1331              	.L113:
 131:protocol.c    ****             // NOTE: ';' comment to EOL is a LinuxCNC definition. Not NIST.
 1332              		.loc 1 131 0
 1333 00fa 3B28     		cmp	r0, #59
 1334 00fc 02D1     		bne	.L114
 133:protocol.c    ****           // TODO: Install '%' feature
 1335              		.loc 1 133 0
 1336 00fe 44F00404 		orr	r4, r4, #4
 1337              	.LVL133:
 1338 0102 13E0     		b	.L108
 1339              	.L114:
 141:protocol.c    ****             // Detect line buffer overflow and set flag.
 1340              		.loc 1 141 0
 1341 0104 4E2D     		cmp	r5, #78
 1342 0106 02D9     		bls	.L115
 143:protocol.c    ****           } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 39


 1343              		.loc 1 143 0
 1344 0108 44F00104 		orr	r4, r4, #1
 1345              	.LVL134:
 1346 010c 0EE0     		b	.L108
 1347              	.L115:
 144:protocol.c    ****             line[char_counter++] = c-'a'+'A';
 1348              		.loc 1 144 0
 1349 010e A0F16103 		sub	r3, r0, #97
 1350 0112 DBB2     		uxtb	r3, r3
 1351 0114 192B     		cmp	r3, #25
 1352 0116 05D8     		bhi	.L116
 145:protocol.c    ****           } else {
 1353              		.loc 1 145 0
 1354 0118 6B1C     		adds	r3, r5, #1
 1355              	.LVL135:
 1356 011a 2038     		subs	r0, r0, #32
 1357              	.LVL136:
 1358 011c 114A     		ldr	r2, .L120+12
 1359 011e 5055     		strb	r0, [r2, r5]
 1360 0120 DDB2     		uxtb	r5, r3
 1361 0122 03E0     		b	.L108
 1362              	.LVL137:
 1363              	.L116:
 147:protocol.c    ****           }
 1364              		.loc 1 147 0
 1365 0124 6B1C     		adds	r3, r5, #1
 1366              	.LVL138:
 1367 0126 0F4A     		ldr	r2, .L120+12
 1368 0128 5055     		strb	r0, [r2, r5]
 1369 012a DDB2     		uxtb	r5, r3
 1370              	.LVL139:
 1371              	.L108:
 154:protocol.c    ****       lcd_report_realtime(); 
 1372              		.loc 1 154 0
 1373 012c 0E4B     		ldr	r3, .L120+16
 1374 012e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1375 0130 23B1     		cbz	r3, .L101
 155:protocol.c    ****       exec_lcd_status = false;
 1376              		.loc 1 155 0
 1377 0132 FFF7FEFF 		bl	lcd_report_realtime
 1378              	.LVL140:
 156:protocol.c    ****       //printPgmString(PSTR("LCD\r\n"));
 1379              		.loc 1 156 0
 1380 0136 0022     		movs	r2, #0
 1381 0138 0B4B     		ldr	r3, .L120+16
 1382 013a 1A70     		strb	r2, [r3]
 1383              	.LVL141:
 1384              	.L101:
  78:protocol.c    ****       if ((c == '\n') || (c == '\r')) { // End of line reached
 1385              		.loc 1 78 0
 1386 013c FFF7FEFF 		bl	serial_read
 1387              	.LVL142:
 1388 0140 FF28     		cmp	r0, #255
 1389 0142 8CD1     		bne	.L118
 165:protocol.c    **** 
 1390              		.loc 1 165 0
 1391 0144 FFF7FEFF 		bl	protocol_auto_cycle_start
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 40


 1392              	.LVL143:
 167:protocol.c    ****     if (sys.abort) { return; } // Bail to main() program loop to reset system.
 1393              		.loc 1 167 0
 1394 0148 FFF7FEFF 		bl	protocol_execute_realtime
 1395              	.LVL144:
 168:protocol.c    ****   }
 1396              		.loc 1 168 0
 1397 014c 034B     		ldr	r3, .L120+4
 1398 014e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1399 0150 002B     		cmp	r3, #0
 1400 0152 F3D0     		beq	.L101
 1401              	.L98:
 1402 0154 38BD     		pop	{r3, r4, r5, pc}
 1403              	.LVL145:
 1404              	.L121:
 1405 0156 00BF     		.align	2
 1406              	.L120:
 1407 0158 00000000 		.word	settings
 1408 015c 00000000 		.word	sys
 1409 0160 00000000 		.word	sys_rt_exec_state
 1410 0164 00000000 		.word	.LANCHOR0
 1411 0168 00000000 		.word	exec_lcd_status
 1412              		.cfi_endproc
 1413              	.LFE63:
 1414              		.size	protocol_main_loop, .-protocol_main_loop
 1415              		.section	.text.protocol_buffer_synchronize,"ax",%progbits
 1416              		.align	2
 1417              		.global	protocol_buffer_synchronize
 1418              		.thumb
 1419              		.thumb_func
 1420              		.type	protocol_buffer_synchronize, %function
 1421              	protocol_buffer_synchronize:
 1422              	.LFB64:
 178:protocol.c    ****   // If system is queued, ensure cycle resumes if the auto start flag is present.
 1423              		.loc 1 178 0
 1424              		.cfi_startproc
 1425              		@ args = 0, pretend = 0, frame = 0
 1426              		@ frame_needed = 0, uses_anonymous_args = 0
 1427 0000 08B5     		push	{r3, lr}
 1428              		.cfi_def_cfa_offset 8
 1429              		.cfi_offset 3, -8
 1430              		.cfi_offset 14, -4
 180:protocol.c    ****   do {
 1431              		.loc 1 180 0
 1432 0002 FFF7FEFF 		bl	protocol_auto_cycle_start
 1433              	.LVL146:
 1434              	.L124:
 182:protocol.c    ****     if (sys.abort) { return; } // Check for system abort
 1435              		.loc 1 182 0
 1436 0006 FFF7FEFF 		bl	protocol_execute_realtime
 1437              	.LVL147:
 183:protocol.c    ****   } while (plan_get_current_block() || (sys.state == STATE_CYCLE));
 1438              		.loc 1 183 0
 1439 000a 064B     		ldr	r3, .L126
 1440 000c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1441 000e 3BB9     		cbnz	r3, .L122
 184:protocol.c    **** }
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 41


 1442              		.loc 1 184 0
 1443 0010 FFF7FEFF 		bl	plan_get_current_block
 1444              	.LVL148:
 1445 0014 0028     		cmp	r0, #0
 1446 0016 F6D1     		bne	.L124
 184:protocol.c    **** }
 1447              		.loc 1 184 0 is_stmt 0 discriminator 1
 1448 0018 024B     		ldr	r3, .L126
 1449 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1450 001c 082B     		cmp	r3, #8
 1451 001e F2D0     		beq	.L124
 1452              	.L122:
 1453 0020 08BD     		pop	{r3, pc}
 1454              	.L127:
 1455 0022 00BF     		.align	2
 1456              	.L126:
 1457 0024 00000000 		.word	sys
 1458              		.cfi_endproc
 1459              	.LFE64:
 1460              		.size	protocol_buffer_synchronize, .-protocol_buffer_synchronize
 1461              		.comm	exec_lcd_status,1,1
 1462              		.comm	sys_rt_exec_accessory_override,1,1
 1463              		.comm	sys_rt_exec_motion_override,1,1
 1464              		.comm	sys_rt_exec_alarm,1,1
 1465              		.comm	sys_rt_exec_state,1,1
 1466              		.comm	sys_probe_state,1,1
 1467              		.comm	sys_probe_position,12,4
 1468              		.comm	sys_position,12,4
 1469              		.bss
 1470              		.align	2
 1471              		.set	.LANCHOR0,. + 0
 1472              		.type	line, %object
 1473              		.size	line, 80
 1474              	line:
 1475 0000 00000000 		.space	80
 1475      00000000 
 1475      00000000 
 1475      00000000 
 1475      00000000 
 1476              		.text
 1477              	.Letext0:
 1478              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 1479              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 1480              		.file 4 "settings.h"
 1481              		.file 5 "system.h"
 1482              		.file 6 "planner.h"
 1483              		.file 7 "gcode.h"
 1484              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 1485              		.file 9 "lcd_report.h"
 1486              		.file 10 "coolant_control.h"
 1487              		.file 11 "report.h"
 1488              		.file 12 "stepper.h"
 1489              		.file 13 "spindle_control.h"
 1490              		.file 14 "nuts_bolts.h"
 1491              		.file 15 "./limits.h"
 1492              		.file 16 "serial.h"
 1493              		.section	.debug_info,"",%progbits
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 42


 1494              	.Ldebug_info0:
 1495 0000 BE0C0000 		.4byte	0xcbe
 1496 0004 0400     		.2byte	0x4
 1497 0006 00000000 		.4byte	.Ldebug_abbrev0
 1498 000a 04       		.byte	0x4
 1499 000b 01       		.uleb128 0x1
 1500 000c B2070000 		.4byte	.LASF147
 1501 0010 01       		.byte	0x1
 1502 0011 2B010000 		.4byte	.LASF148
 1503 0015 4A010000 		.4byte	.LASF149
 1504 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1505 001d 00000000 		.4byte	0
 1506 0021 00000000 		.4byte	.Ldebug_line0
 1507 0025 02       		.uleb128 0x2
 1508 0026 04       		.byte	0x4
 1509 0027 04       		.byte	0x4
 1510 0028 0B020000 		.4byte	.LASF0
 1511 002c 03       		.uleb128 0x3
 1512 002d BC050000 		.4byte	.LASF2
 1513 0031 02       		.byte	0x2
 1514 0032 1B       		.byte	0x1b
 1515 0033 37000000 		.4byte	0x37
 1516 0037 02       		.uleb128 0x2
 1517 0038 01       		.byte	0x1
 1518 0039 06       		.byte	0x6
 1519 003a C5080000 		.4byte	.LASF1
 1520 003e 03       		.uleb128 0x3
 1521 003f F3060000 		.4byte	.LASF3
 1522 0043 02       		.byte	0x2
 1523 0044 1D       		.byte	0x1d
 1524 0045 49000000 		.4byte	0x49
 1525 0049 02       		.uleb128 0x2
 1526 004a 01       		.byte	0x1
 1527 004b 08       		.byte	0x8
 1528 004c 82070000 		.4byte	.LASF4
 1529 0050 02       		.uleb128 0x2
 1530 0051 02       		.byte	0x2
 1531 0052 05       		.byte	0x5
 1532 0053 42060000 		.4byte	.LASF5
 1533 0057 03       		.uleb128 0x3
 1534 0058 B6020000 		.4byte	.LASF6
 1535 005c 02       		.byte	0x2
 1536 005d 2B       		.byte	0x2b
 1537 005e 62000000 		.4byte	0x62
 1538 0062 02       		.uleb128 0x2
 1539 0063 02       		.byte	0x2
 1540 0064 07       		.byte	0x7
 1541 0065 E7080000 		.4byte	.LASF7
 1542 0069 03       		.uleb128 0x3
 1543 006a A6000000 		.4byte	.LASF8
 1544 006e 02       		.byte	0x2
 1545 006f 3F       		.byte	0x3f
 1546 0070 74000000 		.4byte	0x74
 1547 0074 02       		.uleb128 0x2
 1548 0075 04       		.byte	0x4
 1549 0076 05       		.byte	0x5
 1550 0077 5B060000 		.4byte	.LASF9
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 43


 1551 007b 03       		.uleb128 0x3
 1552 007c A7070000 		.4byte	.LASF10
 1553 0080 02       		.byte	0x2
 1554 0081 41       		.byte	0x41
 1555 0082 86000000 		.4byte	0x86
 1556 0086 02       		.uleb128 0x2
 1557 0087 04       		.byte	0x4
 1558 0088 07       		.byte	0x7
 1559 0089 3C070000 		.4byte	.LASF11
 1560 008d 02       		.uleb128 0x2
 1561 008e 08       		.byte	0x8
 1562 008f 05       		.byte	0x5
 1563 0090 BD040000 		.4byte	.LASF12
 1564 0094 02       		.uleb128 0x2
 1565 0095 08       		.byte	0x8
 1566 0096 07       		.byte	0x7
 1567 0097 69020000 		.4byte	.LASF13
 1568 009b 04       		.uleb128 0x4
 1569 009c 04       		.byte	0x4
 1570 009d 05       		.byte	0x5
 1571 009e 696E7400 		.ascii	"int\000"
 1572 00a2 02       		.uleb128 0x2
 1573 00a3 04       		.byte	0x4
 1574 00a4 07       		.byte	0x7
 1575 00a5 7E000000 		.4byte	.LASF14
 1576 00a9 03       		.uleb128 0x3
 1577 00aa DD010000 		.4byte	.LASF15
 1578 00ae 03       		.byte	0x3
 1579 00af 14       		.byte	0x14
 1580 00b0 2C000000 		.4byte	0x2c
 1581 00b4 03       		.uleb128 0x3
 1582 00b5 8B040000 		.4byte	.LASF16
 1583 00b9 03       		.byte	0x3
 1584 00ba 15       		.byte	0x15
 1585 00bb 3E000000 		.4byte	0x3e
 1586 00bf 03       		.uleb128 0x3
 1587 00c0 FC050000 		.4byte	.LASF17
 1588 00c4 03       		.byte	0x3
 1589 00c5 21       		.byte	0x21
 1590 00c6 57000000 		.4byte	0x57
 1591 00ca 03       		.uleb128 0x3
 1592 00cb 4E070000 		.4byte	.LASF18
 1593 00cf 03       		.byte	0x3
 1594 00d0 2C       		.byte	0x2c
 1595 00d1 69000000 		.4byte	0x69
 1596 00d5 03       		.uleb128 0x3
 1597 00d6 D4010000 		.4byte	.LASF19
 1598 00da 03       		.byte	0x3
 1599 00db 2D       		.byte	0x2d
 1600 00dc 7B000000 		.4byte	0x7b
 1601 00e0 02       		.uleb128 0x2
 1602 00e1 08       		.byte	0x8
 1603 00e2 04       		.byte	0x4
 1604 00e3 30090000 		.4byte	.LASF20
 1605 00e7 02       		.uleb128 0x2
 1606 00e8 01       		.byte	0x1
 1607 00e9 08       		.byte	0x8
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 44


 1608 00ea F6030000 		.4byte	.LASF21
 1609 00ee 02       		.uleb128 0x2
 1610 00ef 04       		.byte	0x4
 1611 00f0 07       		.byte	0x7
 1612 00f1 33070000 		.4byte	.LASF22
 1613 00f5 05       		.uleb128 0x5
 1614 00f6 04       		.byte	0x4
 1615 00f7 E7000000 		.4byte	0xe7
 1616 00fb 06       		.uleb128 0x6
 1617 00fc B4000000 		.4byte	0xb4
 1618 0100 02       		.uleb128 0x2
 1619 0101 08       		.byte	0x8
 1620 0102 04       		.byte	0x4
 1621 0103 F0050000 		.4byte	.LASF23
 1622 0107 07       		.uleb128 0x7
 1623 0108 5C       		.byte	0x5c
 1624 0109 04       		.byte	0x4
 1625 010a 4F       		.byte	0x4f
 1626 010b F4010000 		.4byte	0x1f4
 1627 010f 08       		.uleb128 0x8
 1628 0110 16050000 		.4byte	.LASF24
 1629 0114 04       		.byte	0x4
 1630 0115 51       		.byte	0x51
 1631 0116 F4010000 		.4byte	0x1f4
 1632 011a 00       		.byte	0
 1633 011b 08       		.uleb128 0x8
 1634 011c 05060000 		.4byte	.LASF25
 1635 0120 04       		.byte	0x4
 1636 0121 52       		.byte	0x52
 1637 0122 F4010000 		.4byte	0x1f4
 1638 0126 0C       		.byte	0xc
 1639 0127 08       		.uleb128 0x8
 1640 0128 A3010000 		.4byte	.LASF26
 1641 012c 04       		.byte	0x4
 1642 012d 53       		.byte	0x53
 1643 012e F4010000 		.4byte	0x1f4
 1644 0132 18       		.byte	0x18
 1645 0133 08       		.uleb128 0x8
 1646 0134 EB030000 		.4byte	.LASF27
 1647 0138 04       		.byte	0x4
 1648 0139 54       		.byte	0x54
 1649 013a F4010000 		.4byte	0x1f4
 1650 013e 24       		.byte	0x24
 1651 013f 08       		.uleb128 0x8
 1652 0140 00000000 		.4byte	.LASF28
 1653 0144 04       		.byte	0x4
 1654 0145 57       		.byte	0x57
 1655 0146 B4000000 		.4byte	0xb4
 1656 014a 30       		.byte	0x30
 1657 014b 08       		.uleb128 0x8
 1658 014c C5050000 		.4byte	.LASF29
 1659 0150 04       		.byte	0x4
 1660 0151 58       		.byte	0x58
 1661 0152 B4000000 		.4byte	0xb4
 1662 0156 31       		.byte	0x31
 1663 0157 08       		.uleb128 0x8
 1664 0158 B3090000 		.4byte	.LASF30
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 45


 1665 015c 04       		.byte	0x4
 1666 015d 59       		.byte	0x59
 1667 015e B4000000 		.4byte	0xb4
 1668 0162 32       		.byte	0x32
 1669 0163 08       		.uleb128 0x8
 1670 0164 D8000000 		.4byte	.LASF31
 1671 0168 04       		.byte	0x4
 1672 0169 5A       		.byte	0x5a
 1673 016a B4000000 		.4byte	0xb4
 1674 016e 33       		.byte	0x33
 1675 016f 08       		.uleb128 0x8
 1676 0170 6B000000 		.4byte	.LASF32
 1677 0174 04       		.byte	0x4
 1678 0175 5B       		.byte	0x5b
 1679 0176 B4000000 		.4byte	0xb4
 1680 017a 34       		.byte	0x34
 1681 017b 08       		.uleb128 0x8
 1682 017c 6F090000 		.4byte	.LASF33
 1683 0180 04       		.byte	0x4
 1684 0181 5C       		.byte	0x5c
 1685 0182 25000000 		.4byte	0x25
 1686 0186 38       		.byte	0x38
 1687 0187 08       		.uleb128 0x8
 1688 0188 05010000 		.4byte	.LASF34
 1689 018c 04       		.byte	0x4
 1690 018d 5D       		.byte	0x5d
 1691 018e 25000000 		.4byte	0x25
 1692 0192 3C       		.byte	0x3c
 1693 0193 08       		.uleb128 0x8
 1694 0194 0E040000 		.4byte	.LASF35
 1695 0198 04       		.byte	0x4
 1696 0199 5F       		.byte	0x5f
 1697 019a 25000000 		.4byte	0x25
 1698 019e 40       		.byte	0x40
 1699 019f 08       		.uleb128 0x8
 1700 01a0 FA080000 		.4byte	.LASF36
 1701 01a4 04       		.byte	0x4
 1702 01a5 60       		.byte	0x60
 1703 01a6 25000000 		.4byte	0x25
 1704 01aa 44       		.byte	0x44
 1705 01ab 08       		.uleb128 0x8
 1706 01ac 40000000 		.4byte	.LASF37
 1707 01b0 04       		.byte	0x4
 1708 01b1 62       		.byte	0x62
 1709 01b2 B4000000 		.4byte	0xb4
 1710 01b6 48       		.byte	0x48
 1711 01b7 08       		.uleb128 0x8
 1712 01b8 37090000 		.4byte	.LASF38
 1713 01bc 04       		.byte	0x4
 1714 01bd 64       		.byte	0x64
 1715 01be B4000000 		.4byte	0xb4
 1716 01c2 49       		.byte	0x49
 1717 01c3 08       		.uleb128 0x8
 1718 01c4 E4010000 		.4byte	.LASF39
 1719 01c8 04       		.byte	0x4
 1720 01c9 65       		.byte	0x65
 1721 01ca 25000000 		.4byte	0x25
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 46


 1722 01ce 4C       		.byte	0x4c
 1723 01cf 08       		.uleb128 0x8
 1724 01d0 B0010000 		.4byte	.LASF40
 1725 01d4 04       		.byte	0x4
 1726 01d5 66       		.byte	0x66
 1727 01d6 25000000 		.4byte	0x25
 1728 01da 50       		.byte	0x50
 1729 01db 08       		.uleb128 0x8
 1730 01dc D1080000 		.4byte	.LASF41
 1731 01e0 04       		.byte	0x4
 1732 01e1 67       		.byte	0x67
 1733 01e2 BF000000 		.4byte	0xbf
 1734 01e6 54       		.byte	0x54
 1735 01e7 08       		.uleb128 0x8
 1736 01e8 3C030000 		.4byte	.LASF42
 1737 01ec 04       		.byte	0x4
 1738 01ed 68       		.byte	0x68
 1739 01ee 25000000 		.4byte	0x25
 1740 01f2 58       		.byte	0x58
 1741 01f3 00       		.byte	0
 1742 01f4 09       		.uleb128 0x9
 1743 01f5 25000000 		.4byte	0x25
 1744 01f9 04020000 		.4byte	0x204
 1745 01fd 0A       		.uleb128 0xa
 1746 01fe EE000000 		.4byte	0xee
 1747 0202 02       		.byte	0x2
 1748 0203 00       		.byte	0
 1749 0204 03       		.uleb128 0x3
 1750 0205 02090000 		.4byte	.LASF43
 1751 0209 04       		.byte	0x4
 1752 020a 69       		.byte	0x69
 1753 020b 07010000 		.4byte	0x107
 1754 020f 07       		.uleb128 0x7
 1755 0210 14       		.byte	0x14
 1756 0211 05       		.byte	0x5
 1757 0212 80       		.byte	0x80
 1758 0213 C0020000 		.4byte	0x2c0
 1759 0217 08       		.uleb128 0x8
 1760 0218 90080000 		.4byte	.LASF44
 1761 021c 05       		.byte	0x5
 1762 021d 81       		.byte	0x81
 1763 021e B4000000 		.4byte	0xb4
 1764 0222 00       		.byte	0
 1765 0223 08       		.uleb128 0x8
 1766 0224 0E030000 		.4byte	.LASF45
 1767 0228 05       		.byte	0x5
 1768 0229 82       		.byte	0x82
 1769 022a B4000000 		.4byte	0xb4
 1770 022e 01       		.byte	0x1
 1771 022f 08       		.uleb128 0x8
 1772 0230 60030000 		.4byte	.LASF46
 1773 0234 05       		.byte	0x5
 1774 0235 83       		.byte	0x83
 1775 0236 B4000000 		.4byte	0xb4
 1776 023a 02       		.byte	0x2
 1777 023b 08       		.uleb128 0x8
 1778 023c AB060000 		.4byte	.LASF47
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 47


 1779 0240 05       		.byte	0x5
 1780 0241 84       		.byte	0x84
 1781 0242 B4000000 		.4byte	0xb4
 1782 0246 03       		.byte	0x3
 1783 0247 08       		.uleb128 0x8
 1784 0248 2A060000 		.4byte	.LASF48
 1785 024c 05       		.byte	0x5
 1786 024d 85       		.byte	0x85
 1787 024e B4000000 		.4byte	0xb4
 1788 0252 04       		.byte	0x4
 1789 0253 08       		.uleb128 0x8
 1790 0254 FD060000 		.4byte	.LASF49
 1791 0258 05       		.byte	0x5
 1792 0259 86       		.byte	0x86
 1793 025a B4000000 		.4byte	0xb4
 1794 025e 05       		.byte	0x5
 1795 025f 08       		.uleb128 0x8
 1796 0260 82090000 		.4byte	.LASF50
 1797 0264 05       		.byte	0x5
 1798 0265 87       		.byte	0x87
 1799 0266 B4000000 		.4byte	0xb4
 1800 026a 06       		.byte	0x6
 1801 026b 08       		.uleb128 0x8
 1802 026c 91020000 		.4byte	.LASF51
 1803 0270 05       		.byte	0x5
 1804 0271 88       		.byte	0x88
 1805 0272 B4000000 		.4byte	0xb4
 1806 0276 07       		.byte	0x7
 1807 0277 08       		.uleb128 0x8
 1808 0278 8B000000 		.4byte	.LASF52
 1809 027c 05       		.byte	0x5
 1810 027d 89       		.byte	0x89
 1811 027e B4000000 		.4byte	0xb4
 1812 0282 08       		.byte	0x8
 1813 0283 08       		.uleb128 0x8
 1814 0284 79040000 		.4byte	.LASF53
 1815 0288 05       		.byte	0x5
 1816 0289 8A       		.byte	0x8a
 1817 028a B4000000 		.4byte	0xb4
 1818 028e 09       		.byte	0x9
 1819 028f 08       		.uleb128 0x8
 1820 0290 CB020000 		.4byte	.LASF54
 1821 0294 05       		.byte	0x5
 1822 0295 8B       		.byte	0x8b
 1823 0296 B4000000 		.4byte	0xb4
 1824 029a 0A       		.byte	0xa
 1825 029b 08       		.uleb128 0x8
 1826 029c 55040000 		.4byte	.LASF55
 1827 02a0 05       		.byte	0x5
 1828 02a1 8C       		.byte	0x8c
 1829 02a2 B4000000 		.4byte	0xb4
 1830 02a6 0B       		.byte	0xb
 1831 02a7 08       		.uleb128 0x8
 1832 02a8 98060000 		.4byte	.LASF56
 1833 02ac 05       		.byte	0x5
 1834 02ad 8D       		.byte	0x8d
 1835 02ae B4000000 		.4byte	0xb4
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 48


 1836 02b2 0C       		.byte	0xc
 1837 02b3 08       		.uleb128 0x8
 1838 02b4 36040000 		.4byte	.LASF57
 1839 02b8 05       		.byte	0x5
 1840 02b9 8F       		.byte	0x8f
 1841 02ba 25000000 		.4byte	0x25
 1842 02be 10       		.byte	0x10
 1843 02bf 00       		.byte	0
 1844 02c0 03       		.uleb128 0x3
 1845 02c1 85060000 		.4byte	.LASF58
 1846 02c5 05       		.byte	0x5
 1847 02c6 91       		.byte	0x91
 1848 02c7 0F020000 		.4byte	0x20f
 1849 02cb 07       		.uleb128 0x7
 1850 02cc 34       		.byte	0x34
 1851 02cd 06       		.byte	0x6
 1852 02ce 39       		.byte	0x39
 1853 02cf 64030000 		.4byte	0x364
 1854 02d3 08       		.uleb128 0x8
 1855 02d4 05020000 		.4byte	.LASF59
 1856 02d8 06       		.byte	0x6
 1857 02d9 3C       		.byte	0x3c
 1858 02da 64030000 		.4byte	0x364
 1859 02de 00       		.byte	0
 1860 02df 08       		.uleb128 0x8
 1861 02e0 44040000 		.4byte	.LASF60
 1862 02e4 06       		.byte	0x6
 1863 02e5 3D       		.byte	0x3d
 1864 02e6 D5000000 		.4byte	0xd5
 1865 02ea 0C       		.byte	0xc
 1866 02eb 08       		.uleb128 0x8
 1867 02ec 94010000 		.4byte	.LASF61
 1868 02f0 06       		.byte	0x6
 1869 02f1 3E       		.byte	0x3e
 1870 02f2 B4000000 		.4byte	0xb4
 1871 02f6 10       		.byte	0x10
 1872 02f7 08       		.uleb128 0x8
 1873 02f8 93090000 		.4byte	.LASF62
 1874 02fc 06       		.byte	0x6
 1875 02fd 41       		.byte	0x41
 1876 02fe B4000000 		.4byte	0xb4
 1877 0302 11       		.byte	0x11
 1878 0303 08       		.uleb128 0x8
 1879 0304 F5010000 		.4byte	.LASF63
 1880 0308 06       		.byte	0x6
 1881 0309 48       		.byte	0x48
 1882 030a 25000000 		.4byte	0x25
 1883 030e 14       		.byte	0x14
 1884 030f 08       		.uleb128 0x8
 1885 0310 1C030000 		.4byte	.LASF64
 1886 0314 06       		.byte	0x6
 1887 0315 49       		.byte	0x49
 1888 0316 25000000 		.4byte	0x25
 1889 031a 18       		.byte	0x18
 1890 031b 08       		.uleb128 0x8
 1891 031c A3010000 		.4byte	.LASF26
 1892 0320 06       		.byte	0x6
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 49


 1893 0321 4B       		.byte	0x4b
 1894 0322 25000000 		.4byte	0x25
 1895 0326 1C       		.byte	0x1c
 1896 0327 08       		.uleb128 0x8
 1897 0328 B9080000 		.4byte	.LASF65
 1898 032c 06       		.byte	0x6
 1899 032d 4C       		.byte	0x4c
 1900 032e 25000000 		.4byte	0x25
 1901 0332 20       		.byte	0x20
 1902 0333 08       		.uleb128 0x8
 1903 0334 29000000 		.4byte	.LASF66
 1904 0338 06       		.byte	0x6
 1905 0339 50       		.byte	0x50
 1906 033a 25000000 		.4byte	0x25
 1907 033e 24       		.byte	0x24
 1908 033f 08       		.uleb128 0x8
 1909 0340 37060000 		.4byte	.LASF67
 1910 0344 06       		.byte	0x6
 1911 0345 51       		.byte	0x51
 1912 0346 25000000 		.4byte	0x25
 1913 034a 28       		.byte	0x28
 1914 034b 08       		.uleb128 0x8
 1915 034c F5000000 		.4byte	.LASF68
 1916 0350 06       		.byte	0x6
 1917 0351 52       		.byte	0x52
 1918 0352 25000000 		.4byte	0x25
 1919 0356 2C       		.byte	0x2c
 1920 0357 08       		.uleb128 0x8
 1921 0358 36040000 		.4byte	.LASF57
 1922 035c 06       		.byte	0x6
 1923 035d 56       		.byte	0x56
 1924 035e 25000000 		.4byte	0x25
 1925 0362 30       		.byte	0x30
 1926 0363 00       		.byte	0
 1927 0364 09       		.uleb128 0x9
 1928 0365 D5000000 		.4byte	0xd5
 1929 0369 74030000 		.4byte	0x374
 1930 036d 0A       		.uleb128 0xa
 1931 036e EE000000 		.4byte	0xee
 1932 0372 02       		.byte	0x2
 1933 0373 00       		.byte	0
 1934 0374 03       		.uleb128 0x3
 1935 0375 5E000000 		.4byte	.LASF69
 1936 0379 06       		.byte	0x6
 1937 037a 58       		.byte	0x58
 1938 037b CB020000 		.4byte	0x2cb
 1939 037f 07       		.uleb128 0x7
 1940 0380 0A       		.byte	0xa
 1941 0381 07       		.byte	0x7
 1942 0382 B1       		.byte	0xb1
 1943 0383 00040000 		.4byte	0x400
 1944 0387 08       		.uleb128 0x8
 1945 0388 2C070000 		.4byte	.LASF70
 1946 038c 07       		.byte	0x7
 1947 038d B2       		.byte	0xb2
 1948 038e B4000000 		.4byte	0xb4
 1949 0392 00       		.byte	0
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 50


 1950 0393 08       		.uleb128 0x8
 1951 0394 8E060000 		.4byte	.LASF71
 1952 0398 07       		.byte	0x7
 1953 0399 B3       		.byte	0xb3
 1954 039a B4000000 		.4byte	0xb4
 1955 039e 01       		.byte	0x1
 1956 039f 08       		.uleb128 0x8
 1957 03a0 B3080000 		.4byte	.LASF72
 1958 03a4 07       		.byte	0x7
 1959 03a5 B4       		.byte	0xb4
 1960 03a6 B4000000 		.4byte	0xb4
 1961 03aa 02       		.byte	0x2
 1962 03ab 08       		.uleb128 0x8
 1963 03ac 13000000 		.4byte	.LASF73
 1964 03b0 07       		.byte	0x7
 1965 03b1 B5       		.byte	0xb5
 1966 03b2 B4000000 		.4byte	0xb4
 1967 03b6 03       		.byte	0x3
 1968 03b7 08       		.uleb128 0x8
 1969 03b8 68030000 		.4byte	.LASF74
 1970 03bc 07       		.byte	0x7
 1971 03bd B7       		.byte	0xb7
 1972 03be B4000000 		.4byte	0xb4
 1973 03c2 04       		.byte	0x4
 1974 03c3 08       		.uleb128 0x8
 1975 03c4 30030000 		.4byte	.LASF75
 1976 03c8 07       		.byte	0x7
 1977 03c9 B9       		.byte	0xb9
 1978 03ca B4000000 		.4byte	0xb4
 1979 03ce 05       		.byte	0x5
 1980 03cf 08       		.uleb128 0x8
 1981 03d0 C3030000 		.4byte	.LASF76
 1982 03d4 07       		.byte	0x7
 1983 03d5 BA       		.byte	0xba
 1984 03d6 B4000000 		.4byte	0xb4
 1985 03da 06       		.byte	0x6
 1986 03db 08       		.uleb128 0x8
 1987 03dc 1C000000 		.4byte	.LASF77
 1988 03e0 07       		.byte	0x7
 1989 03e1 BC       		.byte	0xbc
 1990 03e2 B4000000 		.4byte	0xb4
 1991 03e6 07       		.byte	0x7
 1992 03e7 08       		.uleb128 0x8
 1993 03e8 14030000 		.4byte	.LASF78
 1994 03ec 07       		.byte	0x7
 1995 03ed BD       		.byte	0xbd
 1996 03ee B4000000 		.4byte	0xb4
 1997 03f2 08       		.byte	0x8
 1998 03f3 08       		.uleb128 0x8
 1999 03f4 23010000 		.4byte	.LASF79
 2000 03f8 07       		.byte	0x7
 2001 03f9 BE       		.byte	0xbe
 2002 03fa B4000000 		.4byte	0xb4
 2003 03fe 09       		.byte	0x9
 2004 03ff 00       		.byte	0
 2005 0400 03       		.uleb128 0x3
 2006 0401 A8080000 		.4byte	.LASF80
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 51


 2007 0405 07       		.byte	0x7
 2008 0406 BF       		.byte	0xbf
 2009 0407 7F030000 		.4byte	0x37f
 2010 040b 07       		.uleb128 0x7
 2011 040c 44       		.byte	0x44
 2012 040d 07       		.byte	0x7
 2013 040e CF       		.byte	0xcf
 2014 040f 80040000 		.4byte	0x480
 2015 0413 08       		.uleb128 0x8
 2016 0414 EF000000 		.4byte	.LASF81
 2017 0418 07       		.byte	0x7
 2018 0419 D0       		.byte	0xd0
 2019 041a 00040000 		.4byte	0x400
 2020 041e 00       		.byte	0
 2021 041f 08       		.uleb128 0x8
 2022 0420 36040000 		.4byte	.LASF57
 2023 0424 07       		.byte	0x7
 2024 0425 D2       		.byte	0xd2
 2025 0426 25000000 		.4byte	0x25
 2026 042a 0C       		.byte	0xc
 2027 042b 08       		.uleb128 0x8
 2028 042c 8E060000 		.4byte	.LASF71
 2029 0430 07       		.byte	0x7
 2030 0431 D3       		.byte	0xd3
 2031 0432 25000000 		.4byte	0x25
 2032 0436 10       		.byte	0x10
 2033 0437 08       		.uleb128 0x8
 2034 0438 4B030000 		.4byte	.LASF82
 2035 043c 07       		.byte	0x7
 2036 043d D4       		.byte	0xd4
 2037 043e B4000000 		.4byte	0xb4
 2038 0442 14       		.byte	0x14
 2039 0443 08       		.uleb128 0x8
 2040 0444 23050000 		.4byte	.LASF83
 2041 0448 07       		.byte	0x7
 2042 0449 D5       		.byte	0xd5
 2043 044a CA000000 		.4byte	0xca
 2044 044e 18       		.byte	0x18
 2045 044f 08       		.uleb128 0x8
 2046 0450 AA090000 		.4byte	.LASF84
 2047 0454 07       		.byte	0x7
 2048 0455 D7       		.byte	0xd7
 2049 0456 F4010000 		.4byte	0x1f4
 2050 045a 1C       		.byte	0x1c
 2051 045b 08       		.uleb128 0x8
 2052 045c ED040000 		.4byte	.LASF85
 2053 0460 07       		.byte	0x7
 2054 0461 D9       		.byte	0xd9
 2055 0462 F4010000 		.4byte	0x1f4
 2056 0466 28       		.byte	0x28
 2057 0467 08       		.uleb128 0x8
 2058 0468 56070000 		.4byte	.LASF86
 2059 046c 07       		.byte	0x7
 2060 046d DB       		.byte	0xdb
 2061 046e F4010000 		.4byte	0x1f4
 2062 0472 34       		.byte	0x34
 2063 0473 08       		.uleb128 0x8
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 52


 2064 0474 FB030000 		.4byte	.LASF87
 2065 0478 07       		.byte	0x7
 2066 0479 DD       		.byte	0xdd
 2067 047a 25000000 		.4byte	0x25
 2068 047e 40       		.byte	0x40
 2069 047f 00       		.byte	0
 2070 0480 03       		.uleb128 0x3
 2071 0481 93040000 		.4byte	.LASF88
 2072 0485 07       		.byte	0x7
 2073 0486 DE       		.byte	0xde
 2074 0487 0B040000 		.4byte	0x40b
 2075 048b 0B       		.uleb128 0xb
 2076 048c D6050000 		.4byte	.LASF89
 2077 0490 01       		.byte	0x1
 2078 0491 C2       		.byte	0xc2
 2079 0492 00000000 		.4byte	.LFB65
 2080 0496 10000000 		.4byte	.LFE65-.LFB65
 2081 049a 01       		.uleb128 0x1
 2082 049b 9C       		.byte	0x9c
 2083 049c B9040000 		.4byte	0x4b9
 2084 04a0 0C       		.uleb128 0xc
 2085 04a1 06000000 		.4byte	.LVL0
 2086 04a5 E00A0000 		.4byte	0xae0
 2087 04a9 0D       		.uleb128 0xd
 2088 04aa 0E000000 		.4byte	.LVL1
 2089 04ae F10A0000 		.4byte	0xaf1
 2090 04b2 0E       		.uleb128 0xe
 2091 04b3 01       		.uleb128 0x1
 2092 04b4 50       		.byte	0x50
 2093 04b5 01       		.uleb128 0x1
 2094 04b6 32       		.byte	0x32
 2095 04b7 00       		.byte	0
 2096 04b8 00       		.byte	0
 2097 04b9 0B       		.uleb128 0xb
 2098 04ba 46000000 		.4byte	.LASF90
 2099 04be 01       		.byte	0x1
 2100 04bf E6       		.byte	0xe6
 2101 04c0 00000000 		.4byte	.LFB67
 2102 04c4 E8030000 		.4byte	.LFE67-.LFB67
 2103 04c8 01       		.uleb128 0x1
 2104 04c9 9C       		.byte	0x9c
 2105 04ca 82060000 		.4byte	0x682
 2106 04ce 0F       		.uleb128 0xf
 2107 04cf 7A070000 		.4byte	.LASF91
 2108 04d3 01       		.byte	0x1
 2109 04d4 E8       		.byte	0xe8
 2110 04d5 B4000000 		.4byte	0xb4
 2111 04d9 00000000 		.4byte	.LLST0
 2112 04dd 10       		.uleb128 0x10
 2113 04de 76020000 		.4byte	.LBB2
 2114 04e2 92000000 		.4byte	.LBE2-.LBB2
 2115 04e6 26050000 		.4byte	0x526
 2116 04ea 11       		.uleb128 0x11
 2117 04eb 4C060000 		.4byte	.LASF92
 2118 04ef 01       		.byte	0x1
 2119 04f0 AB01     		.2byte	0x1ab
 2120 04f2 B4000000 		.4byte	0xb4
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 53


 2121 04f6 3F000000 		.4byte	.LLST1
 2122 04fa 11       		.uleb128 0x11
 2123 04fb DE040000 		.4byte	.LASF93
 2124 04ff 01       		.byte	0x1
 2125 0500 B401     		.2byte	0x1b4
 2126 0502 B4000000 		.4byte	0xb4
 2127 0506 B5000000 		.4byte	.LLST2
 2128 050a 0C       		.uleb128 0xc
 2129 050b 7A020000 		.4byte	.LVL27
 2130 050f 020B0000 		.4byte	0xb02
 2131 0513 0C       		.uleb128 0xc
 2132 0514 04030000 		.4byte	.LVL45
 2133 0518 0F0B0000 		.4byte	0xb0f
 2134 051c 0C       		.uleb128 0xc
 2135 051d 08030000 		.4byte	.LVL46
 2136 0521 1C0B0000 		.4byte	0xb1c
 2137 0525 00       		.byte	0
 2138 0526 10       		.uleb128 0x10
 2139 0527 14030000 		.4byte	.LBB3
 2140 052b B6000000 		.4byte	.LBE3-.LBB3
 2141 052f 7B050000 		.4byte	0x57b
 2142 0533 11       		.uleb128 0x11
 2143 0534 96000000 		.4byte	.LASF94
 2144 0538 01       		.byte	0x1
 2145 0539 C701     		.2byte	0x1c7
 2146 053b B4000000 		.4byte	0xb4
 2147 053f D3000000 		.4byte	.LLST3
 2148 0543 10       		.uleb128 0x10
 2149 0544 AC030000 		.4byte	.LBB4
 2150 0548 1E000000 		.4byte	.LBE4-.LBB4
 2151 054c 71050000 		.4byte	0x571
 2152 0550 11       		.uleb128 0x11
 2153 0551 63050000 		.4byte	.LASF95
 2154 0555 01       		.byte	0x1
 2155 0556 E301     		.2byte	0x1e3
 2156 0558 B4000000 		.4byte	0xb4
 2157 055c 49010000 		.4byte	.LLST4
 2158 0560 0D       		.uleb128 0xd
 2159 0561 C6030000 		.4byte	.LVL66
 2160 0565 290B0000 		.4byte	0xb29
 2161 0569 0E       		.uleb128 0xe
 2162 056a 01       		.uleb128 0x1
 2163 056b 50       		.byte	0x50
 2164 056c 02       		.uleb128 0x2
 2165 056d 74       		.byte	0x74
 2166 056e 00       		.sleb128 0
 2167 056f 00       		.byte	0
 2168 0570 00       		.byte	0
 2169 0571 0C       		.uleb128 0xc
 2170 0572 18030000 		.4byte	.LVL48
 2171 0576 3A0B0000 		.4byte	0xb3a
 2172 057a 00       		.byte	0
 2173 057b 12       		.uleb128 0x12
 2174 057c 18000000 		.4byte	.LVL4
 2175 0580 470B0000 		.4byte	0xb47
 2176 0584 8F050000 		.4byte	0x58f
 2177 0588 0E       		.uleb128 0xe
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 54


 2178 0589 01       		.uleb128 0x1
 2179 058a 50       		.byte	0x50
 2180 058b 02       		.uleb128 0x2
 2181 058c 74       		.byte	0x74
 2182 058d 00       		.sleb128 0
 2183 058e 00       		.byte	0
 2184 058f 12       		.uleb128 0x12
 2185 0590 26000000 		.4byte	.LVL5
 2186 0594 580B0000 		.4byte	0xb58
 2187 0598 A2050000 		.4byte	0x5a2
 2188 059c 0E       		.uleb128 0xe
 2189 059d 01       		.uleb128 0x1
 2190 059e 50       		.byte	0x50
 2191 059f 01       		.uleb128 0x1
 2192 05a0 31       		.byte	0x31
 2193 05a1 00       		.byte	0
 2194 05a2 12       		.uleb128 0x12
 2195 05a3 2C000000 		.4byte	.LVL6
 2196 05a7 690B0000 		.4byte	0xb69
 2197 05ab B5050000 		.4byte	0x5b5
 2198 05af 0E       		.uleb128 0xe
 2199 05b0 01       		.uleb128 0x1
 2200 05b1 50       		.byte	0x50
 2201 05b2 01       		.uleb128 0x1
 2202 05b3 40       		.byte	0x40
 2203 05b4 00       		.byte	0
 2204 05b5 0C       		.uleb128 0xc
 2205 05b6 3A000000 		.4byte	.LVL7
 2206 05ba 7A0B0000 		.4byte	0xb7a
 2207 05be 0C       		.uleb128 0xc
 2208 05bf 60000000 		.4byte	.LVL11
 2209 05c3 870B0000 		.4byte	0xb87
 2210 05c7 12       		.uleb128 0x12
 2211 05c8 66000000 		.4byte	.LVL12
 2212 05cc 690B0000 		.4byte	0xb69
 2213 05d0 DA050000 		.4byte	0x5da
 2214 05d4 0E       		.uleb128 0xe
 2215 05d5 01       		.uleb128 0x1
 2216 05d6 50       		.byte	0x50
 2217 05d7 01       		.uleb128 0x1
 2218 05d8 31       		.byte	0x31
 2219 05d9 00       		.byte	0
 2220 05da 0C       		.uleb128 0xc
 2221 05db 8A000000 		.4byte	.LVL13
 2222 05df 940B0000 		.4byte	0xb94
 2223 05e3 12       		.uleb128 0x12
 2224 05e4 E6000000 		.4byte	.LVL14
 2225 05e8 580B0000 		.4byte	0xb58
 2226 05ec F6050000 		.4byte	0x5f6
 2227 05f0 0E       		.uleb128 0xe
 2228 05f1 01       		.uleb128 0x1
 2229 05f2 50       		.byte	0x50
 2230 05f3 01       		.uleb128 0x1
 2231 05f4 36       		.byte	0x36
 2232 05f5 00       		.byte	0
 2233 05f6 12       		.uleb128 0x12
 2234 05f7 42010000 		.4byte	.LVL15
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 55


 2235 05fb 690B0000 		.4byte	0xb69
 2236 05ff 0A060000 		.4byte	0x60a
 2237 0603 0E       		.uleb128 0xe
 2238 0604 01       		.uleb128 0x1
 2239 0605 50       		.byte	0x50
 2240 0606 02       		.uleb128 0x2
 2241 0607 09       		.byte	0x9
 2242 0608 E8       		.byte	0xe8
 2243 0609 00       		.byte	0
 2244 060a 0C       		.uleb128 0xc
 2245 060b B0010000 		.4byte	.LVL16
 2246 060f E00A0000 		.4byte	0xae0
 2247 0613 0C       		.uleb128 0xc
 2248 0614 CA010000 		.4byte	.LVL17
 2249 0618 A10B0000 		.4byte	0xba1
 2250 061c 0C       		.uleb128 0xc
 2251 061d CE010000 		.4byte	.LVL18
 2252 0621 AE0B0000 		.4byte	0xbae
 2253 0625 12       		.uleb128 0x12
 2254 0626 DE010000 		.4byte	.LVL19
 2255 062a 690B0000 		.4byte	0xb69
 2256 062e 38060000 		.4byte	0x638
 2257 0632 0E       		.uleb128 0xe
 2258 0633 01       		.uleb128 0x1
 2259 0634 50       		.byte	0x50
 2260 0635 01       		.uleb128 0x1
 2261 0636 32       		.byte	0x32
 2262 0637 00       		.byte	0
 2263 0638 0C       		.uleb128 0xc
 2264 0639 02020000 		.4byte	.LVL20
 2265 063d 1C0B0000 		.4byte	0xb1c
 2266 0641 0C       		.uleb128 0xc
 2267 0642 34020000 		.4byte	.LVL21
 2268 0646 BB0B0000 		.4byte	0xbbb
 2269 064a 0C       		.uleb128 0xc
 2270 064b 38020000 		.4byte	.LVL22
 2271 064f C80B0000 		.4byte	0xbc8
 2272 0653 0C       		.uleb128 0xc
 2273 0654 3C020000 		.4byte	.LVL23
 2274 0658 D50B0000 		.4byte	0xbd5
 2275 065c 0C       		.uleb128 0xc
 2276 065d 40020000 		.4byte	.LVL24
 2277 0661 E20B0000 		.4byte	0xbe2
 2278 0665 12       		.uleb128 0x12
 2279 0666 6A020000 		.4byte	.LVL25
 2280 066a 690B0000 		.4byte	0xb69
 2281 066e 78060000 		.4byte	0x678
 2282 0672 0E       		.uleb128 0xe
 2283 0673 01       		.uleb128 0x1
 2284 0674 50       		.byte	0x50
 2285 0675 01       		.uleb128 0x1
 2286 0676 34       		.byte	0x34
 2287 0677 00       		.byte	0
 2288 0678 0C       		.uleb128 0xc
 2289 0679 D8030000 		.4byte	.LVL68
 2290 067d A10B0000 		.4byte	0xba1
 2291 0681 00       		.byte	0
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 56


 2292 0682 13       		.uleb128 0x13
 2293 0683 32020000 		.4byte	.LASF150
 2294 0687 01       		.byte	0x1
 2295 0688 0E02     		.2byte	0x20e
 2296 068a 00000000 		.4byte	.LFB68
 2297 068e E4010000 		.4byte	.LFE68-.LFB68
 2298 0692 01       		.uleb128 0x1
 2299 0693 9C       		.byte	0x9c
 2300 0694 4E080000 		.4byte	0x84e
 2301 0698 11       		.uleb128 0x11
 2302 0699 ED060000 		.4byte	.LASF96
 2303 069d 01       		.byte	0x1
 2304 069e 1E02     		.2byte	0x21e
 2305 06a0 4E080000 		.4byte	0x84e
 2306 06a4 5C010000 		.4byte	.LLST5
 2307 06a8 11       		.uleb128 0x11
 2308 06a9 D0030000 		.4byte	.LASF97
 2309 06ad 01       		.byte	0x1
 2310 06ae 1F02     		.2byte	0x21f
 2311 06b0 B4000000 		.4byte	0xb4
 2312 06b4 6F010000 		.4byte	.LLST6
 2313 06b8 11       		.uleb128 0x11
 2314 06b9 7E050000 		.4byte	.LASF98
 2315 06bd 01       		.byte	0x1
 2316 06be 2102     		.2byte	0x221
 2317 06c0 25000000 		.4byte	0x25
 2318 06c4 8D010000 		.4byte	.LLST7
 2319 06c8 0C       		.uleb128 0xc
 2320 06c9 06000000 		.4byte	.LVL69
 2321 06cd E00A0000 		.4byte	0xae0
 2322 06d1 12       		.uleb128 0x12
 2323 06d2 2C000000 		.4byte	.LVL76
 2324 06d6 EF0B0000 		.4byte	0xbef
 2325 06da E5060000 		.4byte	0x6e5
 2326 06de 0E       		.uleb128 0xe
 2327 06df 01       		.uleb128 0x1
 2328 06e0 50       		.byte	0x50
 2329 06e1 02       		.uleb128 0x2
 2330 06e2 08       		.byte	0x8
 2331 06e3 20       		.byte	0x20
 2332 06e4 00       		.byte	0
 2333 06e5 12       		.uleb128 0x12
 2334 06e6 5E000000 		.4byte	.LVL77
 2335 06ea 000C0000 		.4byte	0xc00
 2336 06ee F9060000 		.4byte	0x6f9
 2337 06f2 0E       		.uleb128 0xe
 2338 06f3 01       		.uleb128 0x1
 2339 06f4 50       		.byte	0x50
 2340 06f5 02       		.uleb128 0x2
 2341 06f6 77       		.byte	0x77
 2342 06f7 00       		.sleb128 0
 2343 06f8 00       		.byte	0
 2344 06f9 12       		.uleb128 0x12
 2345 06fa 64000000 		.4byte	.LVL78
 2346 06fe 290B0000 		.4byte	0xb29
 2347 0702 0D070000 		.4byte	0x70d
 2348 0706 0E       		.uleb128 0xe
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 57


 2349 0707 01       		.uleb128 0x1
 2350 0708 50       		.byte	0x50
 2351 0709 02       		.uleb128 0x2
 2352 070a 77       		.byte	0x77
 2353 070b 00       		.sleb128 0
 2354 070c 00       		.byte	0
 2355 070d 12       		.uleb128 0x12
 2356 070e 7C000000 		.4byte	.LVL79
 2357 0712 580B0000 		.4byte	0xb58
 2358 0716 20070000 		.4byte	0x720
 2359 071a 0E       		.uleb128 0xe
 2360 071b 01       		.uleb128 0x1
 2361 071c 50       		.byte	0x50
 2362 071d 01       		.uleb128 0x1
 2363 071e 3B       		.byte	0x3b
 2364 071f 00       		.byte	0
 2365 0720 12       		.uleb128 0x12
 2366 0721 84000000 		.4byte	.LVL80
 2367 0725 000C0000 		.4byte	0xc00
 2368 0729 33070000 		.4byte	0x733
 2369 072d 0E       		.uleb128 0xe
 2370 072e 01       		.uleb128 0x1
 2371 072f 50       		.byte	0x50
 2372 0730 01       		.uleb128 0x1
 2373 0731 30       		.byte	0x30
 2374 0732 00       		.byte	0
 2375 0733 12       		.uleb128 0x12
 2376 0734 8A000000 		.4byte	.LVL81
 2377 0738 290B0000 		.4byte	0xb29
 2378 073c 46070000 		.4byte	0x746
 2379 0740 0E       		.uleb128 0xe
 2380 0741 01       		.uleb128 0x1
 2381 0742 50       		.byte	0x50
 2382 0743 01       		.uleb128 0x1
 2383 0744 30       		.byte	0x30
 2384 0745 00       		.byte	0
 2385 0746 0C       		.uleb128 0xc
 2386 0747 8E000000 		.4byte	.LVL82
 2387 074b 160C0000 		.4byte	0xc16
 2388 074f 0C       		.uleb128 0xc
 2389 0750 94000000 		.4byte	.LVL83
 2390 0754 B9040000 		.4byte	0x4b9
 2391 0758 0C       		.uleb128 0xc
 2392 0759 A6000000 		.4byte	.LVL85
 2393 075d 230C0000 		.4byte	0xc23
 2394 0761 12       		.uleb128 0x12
 2395 0762 EC000000 		.4byte	.LVL86
 2396 0766 000C0000 		.4byte	0xc00
 2397 076a 7F070000 		.4byte	0x77f
 2398 076e 0E       		.uleb128 0xe
 2399 076f 01       		.uleb128 0x1
 2400 0770 51       		.byte	0x51
 2401 0771 03       		.uleb128 0x3
 2402 0772 F5       		.byte	0xf5
 2403 0773 05       		.uleb128 0x5
 2404 0774 25       		.uleb128 0x25
 2405 0775 0E       		.uleb128 0xe
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 58


 2406 0776 01       		.uleb128 0x1
 2407 0777 50       		.byte	0x50
 2408 0778 05       		.uleb128 0x5
 2409 0779 74       		.byte	0x74
 2410 077a 00       		.sleb128 0
 2411 077b 08       		.byte	0x8
 2412 077c 30       		.byte	0x30
 2413 077d 1A       		.byte	0x1a
 2414 077e 00       		.byte	0
 2415 077f 12       		.uleb128 0x12
 2416 0780 F6000000 		.4byte	.LVL87
 2417 0784 340C0000 		.4byte	0xc34
 2418 0788 92070000 		.4byte	0x792
 2419 078c 0E       		.uleb128 0xe
 2420 078d 01       		.uleb128 0x1
 2421 078e 51       		.byte	0x51
 2422 078f 01       		.uleb128 0x1
 2423 0790 31       		.byte	0x31
 2424 0791 00       		.byte	0
 2425 0792 12       		.uleb128 0x12
 2426 0793 0E010000 		.4byte	.LVL88
 2427 0797 290B0000 		.4byte	0xb29
 2428 079b A9070000 		.4byte	0x7a9
 2429 079f 0E       		.uleb128 0xe
 2430 07a0 01       		.uleb128 0x1
 2431 07a1 50       		.byte	0x50
 2432 07a2 05       		.uleb128 0x5
 2433 07a3 74       		.byte	0x74
 2434 07a4 00       		.sleb128 0
 2435 07a5 08       		.byte	0x8
 2436 07a6 40       		.byte	0x40
 2437 07a7 1A       		.byte	0x1a
 2438 07a8 00       		.byte	0
 2439 07a9 12       		.uleb128 0x12
 2440 07aa 18010000 		.4byte	.LVL89
 2441 07ae 340C0000 		.4byte	0xc34
 2442 07b2 BC070000 		.4byte	0x7bc
 2443 07b6 0E       		.uleb128 0xe
 2444 07b7 01       		.uleb128 0x1
 2445 07b8 51       		.byte	0x51
 2446 07b9 01       		.uleb128 0x1
 2447 07ba 31       		.byte	0x31
 2448 07bb 00       		.byte	0
 2449 07bc 12       		.uleb128 0x12
 2450 07bd 30010000 		.4byte	.LVL90
 2451 07c1 F10A0000 		.4byte	0xaf1
 2452 07c5 CF070000 		.4byte	0x7cf
 2453 07c9 0E       		.uleb128 0xe
 2454 07ca 01       		.uleb128 0x1
 2455 07cb 50       		.byte	0x50
 2456 07cc 01       		.uleb128 0x1
 2457 07cd 32       		.byte	0x32
 2458 07ce 00       		.byte	0
 2459 07cf 12       		.uleb128 0x12
 2460 07d0 4E010000 		.4byte	.LVL91
 2461 07d4 000C0000 		.4byte	0xc00
 2462 07d8 E2070000 		.4byte	0x7e2
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 59


 2463 07dc 0E       		.uleb128 0xe
 2464 07dd 01       		.uleb128 0x1
 2465 07de 50       		.byte	0x50
 2466 07df 01       		.uleb128 0x1
 2467 07e0 30       		.byte	0x30
 2468 07e1 00       		.byte	0
 2469 07e2 12       		.uleb128 0x12
 2470 07e3 70010000 		.4byte	.LVL92
 2471 07e7 580B0000 		.4byte	0xb58
 2472 07eb F5070000 		.4byte	0x7f5
 2473 07ef 0E       		.uleb128 0xe
 2474 07f0 01       		.uleb128 0x1
 2475 07f1 50       		.byte	0x50
 2476 07f2 01       		.uleb128 0x1
 2477 07f3 3A       		.byte	0x3a
 2478 07f4 00       		.byte	0
 2479 07f5 12       		.uleb128 0x12
 2480 07f6 92010000 		.4byte	.LVL93
 2481 07fa 000C0000 		.4byte	0xc00
 2482 07fe 13080000 		.4byte	0x813
 2483 0802 0E       		.uleb128 0xe
 2484 0803 01       		.uleb128 0x1
 2485 0804 51       		.byte	0x51
 2486 0805 03       		.uleb128 0x3
 2487 0806 F5       		.byte	0xf5
 2488 0807 05       		.uleb128 0x5
 2489 0808 25       		.uleb128 0x25
 2490 0809 0E       		.uleb128 0xe
 2491 080a 01       		.uleb128 0x1
 2492 080b 50       		.byte	0x50
 2493 080c 05       		.uleb128 0x5
 2494 080d 74       		.byte	0x74
 2495 080e 00       		.sleb128 0
 2496 080f 08       		.byte	0x8
 2497 0810 30       		.byte	0x30
 2498 0811 1A       		.byte	0x1a
 2499 0812 00       		.byte	0
 2500 0813 12       		.uleb128 0x12
 2501 0814 A2010000 		.4byte	.LVL94
 2502 0818 F10A0000 		.4byte	0xaf1
 2503 081c 26080000 		.4byte	0x826
 2504 0820 0E       		.uleb128 0xe
 2505 0821 01       		.uleb128 0x1
 2506 0822 50       		.byte	0x50
 2507 0823 01       		.uleb128 0x1
 2508 0824 32       		.byte	0x32
 2509 0825 00       		.byte	0
 2510 0826 12       		.uleb128 0x12
 2511 0827 BE010000 		.4byte	.LVL95
 2512 082b 000C0000 		.4byte	0xc00
 2513 082f 44080000 		.4byte	0x844
 2514 0833 0E       		.uleb128 0xe
 2515 0834 01       		.uleb128 0x1
 2516 0835 51       		.byte	0x51
 2517 0836 03       		.uleb128 0x3
 2518 0837 F5       		.byte	0xf5
 2519 0838 05       		.uleb128 0x5
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 60


 2520 0839 25       		.uleb128 0x25
 2521 083a 0E       		.uleb128 0xe
 2522 083b 01       		.uleb128 0x1
 2523 083c 50       		.byte	0x50
 2524 083d 05       		.uleb128 0x5
 2525 083e 74       		.byte	0x74
 2526 083f 00       		.sleb128 0
 2527 0840 08       		.byte	0x8
 2528 0841 30       		.byte	0x30
 2529 0842 1A       		.byte	0x1a
 2530 0843 00       		.byte	0
 2531 0844 0C       		.uleb128 0xc
 2532 0845 CC010000 		.4byte	.LVL96
 2533 0849 B9040000 		.4byte	0x4b9
 2534 084d 00       		.byte	0
 2535 084e 05       		.uleb128 0x5
 2536 084f 04       		.byte	0x4
 2537 0850 74030000 		.4byte	0x374
 2538 0854 0B       		.uleb128 0xb
 2539 0855 9C020000 		.4byte	.LASF99
 2540 0859 01       		.byte	0x1
 2541 085a D5       		.byte	0xd5
 2542 085b 00000000 		.4byte	.LFB66
 2543 085f 2C000000 		.4byte	.LFE66-.LFB66
 2544 0863 01       		.uleb128 0x1
 2545 0864 9C       		.byte	0x9c
 2546 0865 85080000 		.4byte	0x885
 2547 0869 0C       		.uleb128 0xc
 2548 086a 06000000 		.4byte	.LVL98
 2549 086e B9040000 		.4byte	0x4b9
 2550 0872 0C       		.uleb128 0xc
 2551 0873 10000000 		.4byte	.LVL99
 2552 0877 82060000 		.4byte	0x682
 2553 087b 0C       		.uleb128 0xc
 2554 087c 1A000000 		.4byte	.LVL100
 2555 0880 4A0C0000 		.4byte	0xc4a
 2556 0884 00       		.byte	0
 2557 0885 0B       		.uleb128 0xb
 2558 0886 2F050000 		.4byte	.LASF100
 2559 088a 01       		.byte	0x1
 2560 088b 26       		.byte	0x26
 2561 088c 00000000 		.4byte	.LFB63
 2562 0890 6C010000 		.4byte	.LFE63-.LFB63
 2563 0894 01       		.uleb128 0x1
 2564 0895 9C       		.byte	0x9c
 2565 0896 C4090000 		.4byte	0x9c4
 2566 089a 0F       		.uleb128 0xf
 2567 089b 85080000 		.4byte	.LASF101
 2568 089f 01       		.byte	0x1
 2569 08a0 47       		.byte	0x47
 2570 08a1 B4000000 		.4byte	0xb4
 2571 08a5 AB010000 		.4byte	.LLST8
 2572 08a9 0F       		.uleb128 0xf
 2573 08aa 9D090000 		.4byte	.LASF102
 2574 08ae 01       		.byte	0x1
 2575 08af 48       		.byte	0x48
 2576 08b0 B4000000 		.4byte	0xb4
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 61


 2577 08b4 F5010000 		.4byte	.LLST9
 2578 08b8 14       		.uleb128 0x14
 2579 08b9 6300     		.ascii	"c\000"
 2580 08bb 01       		.byte	0x1
 2581 08bc 49       		.byte	0x49
 2582 08bd B4000000 		.4byte	0xb4
 2583 08c1 6B020000 		.4byte	.LLST10
 2584 08c5 0C       		.uleb128 0xc
 2585 08c6 12000000 		.4byte	.LVL101
 2586 08ca 570C0000 		.4byte	0xc57
 2587 08ce 12       		.uleb128 0x12
 2588 08cf 20000000 		.4byte	.LVL102
 2589 08d3 580B0000 		.4byte	0xb58
 2590 08d7 E1080000 		.4byte	0x8e1
 2591 08db 0E       		.uleb128 0xe
 2592 08dc 01       		.uleb128 0x1
 2593 08dd 50       		.byte	0x50
 2594 08de 01       		.uleb128 0x1
 2595 08df 37       		.byte	0x37
 2596 08e0 00       		.byte	0
 2597 08e1 12       		.uleb128 0x12
 2598 08e2 30000000 		.4byte	.LVL103
 2599 08e6 580B0000 		.4byte	0xb58
 2600 08ea F4080000 		.4byte	0x8f4
 2601 08ee 0E       		.uleb128 0xe
 2602 08ef 01       		.uleb128 0x1
 2603 08f0 50       		.byte	0x50
 2604 08f1 01       		.uleb128 0x1
 2605 08f2 32       		.byte	0x32
 2606 08f3 00       		.byte	0
 2607 08f4 0C       		.uleb128 0xc
 2608 08f5 46000000 		.4byte	.LVL104
 2609 08f9 230C0000 		.4byte	0xc23
 2610 08fd 0C       		.uleb128 0xc
 2611 08fe 56000000 		.4byte	.LVL105
 2612 0902 54080000 		.4byte	0x854
 2613 0906 12       		.uleb128 0x12
 2614 0907 5C000000 		.4byte	.LVL106
 2615 090b 680C0000 		.4byte	0xc68
 2616 090f 1D090000 		.4byte	0x91d
 2617 0913 0E       		.uleb128 0xe
 2618 0914 01       		.uleb128 0x1
 2619 0915 50       		.byte	0x50
 2620 0916 05       		.uleb128 0x5
 2621 0917 03       		.byte	0x3
 2622 0918 00000000 		.4byte	.LANCHOR0
 2623 091c 00       		.byte	0
 2624 091d 0C       		.uleb128 0xc
 2625 091e 6A000000 		.4byte	.LVL108
 2626 0922 54080000 		.4byte	0x854
 2627 0926 12       		.uleb128 0x12
 2628 0927 84000000 		.4byte	.LVL109
 2629 092b 790C0000 		.4byte	0xc79
 2630 092f 39090000 		.4byte	0x939
 2631 0933 0E       		.uleb128 0xe
 2632 0934 01       		.uleb128 0x1
 2633 0935 50       		.byte	0x50
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 62


 2634 0936 01       		.uleb128 0x1
 2635 0937 3B       		.byte	0x3b
 2636 0938 00       		.byte	0
 2637 0939 12       		.uleb128 0x12
 2638 093a 96000000 		.4byte	.LVL113
 2639 093e 790C0000 		.4byte	0xc79
 2640 0942 4C090000 		.4byte	0x94c
 2641 0946 0E       		.uleb128 0xe
 2642 0947 01       		.uleb128 0x1
 2643 0948 50       		.byte	0x50
 2644 0949 01       		.uleb128 0x1
 2645 094a 30       		.byte	0x30
 2646 094b 00       		.byte	0
 2647 094c 12       		.uleb128 0x12
 2648 094d A6000000 		.4byte	.LVL117
 2649 0951 8A0C0000 		.4byte	0xc8a
 2650 0955 63090000 		.4byte	0x963
 2651 0959 0E       		.uleb128 0xe
 2652 095a 01       		.uleb128 0x1
 2653 095b 50       		.byte	0x50
 2654 095c 05       		.uleb128 0x5
 2655 095d 03       		.byte	0x3
 2656 095e 00000000 		.4byte	.LANCHOR0
 2657 0962 00       		.byte	0
 2658 0963 0C       		.uleb128 0xc
 2659 0964 AA000000 		.4byte	.LVL118
 2660 0968 790C0000 		.4byte	0xc79
 2661 096c 12       		.uleb128 0x12
 2662 096d C0000000 		.4byte	.LVL122
 2663 0971 790C0000 		.4byte	0xc79
 2664 0975 7F090000 		.4byte	0x97f
 2665 0979 0E       		.uleb128 0xe
 2666 097a 01       		.uleb128 0x1
 2667 097b 50       		.byte	0x50
 2668 097c 01       		.uleb128 0x1
 2669 097d 39       		.byte	0x39
 2670 097e 00       		.byte	0
 2671 097f 12       		.uleb128 0x12
 2672 0980 CC000000 		.4byte	.LVL126
 2673 0984 9F0C0000 		.4byte	0xc9f
 2674 0988 96090000 		.4byte	0x996
 2675 098c 0E       		.uleb128 0xe
 2676 098d 01       		.uleb128 0x1
 2677 098e 50       		.byte	0x50
 2678 098f 05       		.uleb128 0x5
 2679 0990 03       		.byte	0x3
 2680 0991 00000000 		.4byte	.LANCHOR0
 2681 0995 00       		.byte	0
 2682 0996 0C       		.uleb128 0xc
 2683 0997 D0000000 		.4byte	.LVL127
 2684 099b 790C0000 		.4byte	0xc79
 2685 099f 0C       		.uleb128 0xc
 2686 09a0 36010000 		.4byte	.LVL140
 2687 09a4 4A0C0000 		.4byte	0xc4a
 2688 09a8 0C       		.uleb128 0xc
 2689 09a9 40010000 		.4byte	.LVL142
 2690 09ad B40C0000 		.4byte	0xcb4
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 63


 2691 09b1 0C       		.uleb128 0xc
 2692 09b2 48010000 		.4byte	.LVL143
 2693 09b6 8B040000 		.4byte	0x48b
 2694 09ba 0C       		.uleb128 0xc
 2695 09bb 4C010000 		.4byte	.LVL144
 2696 09bf 54080000 		.4byte	0x854
 2697 09c3 00       		.byte	0
 2698 09c4 0B       		.uleb128 0xb
 2699 09c5 FA040000 		.4byte	.LASF103
 2700 09c9 01       		.byte	0x1
 2701 09ca B1       		.byte	0xb1
 2702 09cb 00000000 		.4byte	.LFB64
 2703 09cf 28000000 		.4byte	.LFE64-.LFB64
 2704 09d3 01       		.uleb128 0x1
 2705 09d4 9C       		.byte	0x9c
 2706 09d5 F5090000 		.4byte	0x9f5
 2707 09d9 0C       		.uleb128 0xc
 2708 09da 06000000 		.4byte	.LVL146
 2709 09de 8B040000 		.4byte	0x48b
 2710 09e2 0C       		.uleb128 0xc
 2711 09e3 0A000000 		.4byte	.LVL147
 2712 09e7 54080000 		.4byte	0x854
 2713 09eb 0C       		.uleb128 0xc
 2714 09ec 14000000 		.4byte	.LVL148
 2715 09f0 E00A0000 		.4byte	0xae0
 2716 09f4 00       		.byte	0
 2717 09f5 09       		.uleb128 0x9
 2718 09f6 E7000000 		.4byte	0xe7
 2719 09fa 050A0000 		.4byte	0xa05
 2720 09fe 0A       		.uleb128 0xa
 2721 09ff EE000000 		.4byte	0xee
 2722 0a03 4F       		.byte	0x4f
 2723 0a04 00       		.byte	0
 2724 0a05 15       		.uleb128 0x15
 2725 0a06 57080000 		.4byte	.LASF104
 2726 0a0a 01       		.byte	0x1
 2727 0a0b 1E       		.byte	0x1e
 2728 0a0c F5090000 		.4byte	0x9f5
 2729 0a10 05       		.uleb128 0x5
 2730 0a11 03       		.byte	0x3
 2731 0a12 00000000 		.4byte	line
 2732 0a16 16       		.uleb128 0x16
 2733 0a17 64060000 		.4byte	.LASF105
 2734 0a1b 08       		.byte	0x8
 2735 0a1c 9606     		.2byte	0x696
 2736 0a1e 220A0000 		.4byte	0xa22
 2737 0a22 06       		.uleb128 0x6
 2738 0a23 CA000000 		.4byte	0xca
 2739 0a27 17       		.uleb128 0x17
 2740 0a28 E2030000 		.4byte	.LASF106
 2741 0a2c 04       		.byte	0x4
 2742 0a2d 6A       		.byte	0x6a
 2743 0a2e 04020000 		.4byte	0x204
 2744 0a32 18       		.uleb128 0x18
 2745 0a33 73797300 		.ascii	"sys\000"
 2746 0a37 05       		.byte	0x5
 2747 0a38 92       		.byte	0x92
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 64


 2748 0a39 C0020000 		.4byte	0x2c0
 2749 0a3d 09       		.uleb128 0x9
 2750 0a3e CA000000 		.4byte	0xca
 2751 0a42 4D0A0000 		.4byte	0xa4d
 2752 0a46 0A       		.uleb128 0xa
 2753 0a47 EE000000 		.4byte	0xee
 2754 0a4b 02       		.byte	0x2
 2755 0a4c 00       		.byte	0
 2756 0a4d 19       		.uleb128 0x19
 2757 0a4e 71050000 		.4byte	.LASF107
 2758 0a52 05       		.byte	0x5
 2759 0a53 95       		.byte	0x95
 2760 0a54 3D0A0000 		.4byte	0xa3d
 2761 0a58 05       		.uleb128 0x5
 2762 0a59 03       		.byte	0x3
 2763 0a5a 00000000 		.4byte	sys_position
 2764 0a5e 19       		.uleb128 0x19
 2765 0a5f CB040000 		.4byte	.LASF108
 2766 0a63 05       		.byte	0x5
 2767 0a64 96       		.byte	0x96
 2768 0a65 3D0A0000 		.4byte	0xa3d
 2769 0a69 05       		.uleb128 0x5
 2770 0a6a 03       		.byte	0x3
 2771 0a6b 00000000 		.4byte	sys_probe_position
 2772 0a6f 19       		.uleb128 0x19
 2773 0a70 B0000000 		.4byte	.LASF109
 2774 0a74 05       		.byte	0x5
 2775 0a75 98       		.byte	0x98
 2776 0a76 FB000000 		.4byte	0xfb
 2777 0a7a 05       		.uleb128 0x5
 2778 0a7b 03       		.byte	0x3
 2779 0a7c 00000000 		.4byte	sys_probe_state
 2780 0a80 19       		.uleb128 0x19
 2781 0a81 75030000 		.4byte	.LASF110
 2782 0a85 05       		.byte	0x5
 2783 0a86 99       		.byte	0x99
 2784 0a87 FB000000 		.4byte	0xfb
 2785 0a8b 05       		.uleb128 0x5
 2786 0a8c 03       		.byte	0x3
 2787 0a8d 00000000 		.4byte	sys_rt_exec_state
 2788 0a91 19       		.uleb128 0x19
 2789 0a92 96080000 		.4byte	.LASF111
 2790 0a96 05       		.byte	0x5
 2791 0a97 9A       		.byte	0x9a
 2792 0a98 FB000000 		.4byte	0xfb
 2793 0a9c 05       		.uleb128 0x5
 2794 0a9d 03       		.byte	0x3
 2795 0a9e 00000000 		.4byte	sys_rt_exec_alarm
 2796 0aa2 19       		.uleb128 0x19
 2797 0aa3 0E060000 		.4byte	.LASF112
 2798 0aa7 05       		.byte	0x5
 2799 0aa8 9B       		.byte	0x9b
 2800 0aa9 FB000000 		.4byte	0xfb
 2801 0aad 05       		.uleb128 0x5
 2802 0aae 03       		.byte	0x3
 2803 0aaf 00000000 		.4byte	sys_rt_exec_motion_override
 2804 0ab3 19       		.uleb128 0x19
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 65


 2805 0ab4 0D070000 		.4byte	.LASF113
 2806 0ab8 05       		.byte	0x5
 2807 0ab9 9C       		.byte	0x9c
 2808 0aba FB000000 		.4byte	0xfb
 2809 0abe 05       		.uleb128 0x5
 2810 0abf 03       		.byte	0x3
 2811 0ac0 00000000 		.4byte	sys_rt_exec_accessory_override
 2812 0ac4 17       		.uleb128 0x17
 2813 0ac5 42050000 		.4byte	.LASF114
 2814 0ac9 07       		.byte	0x7
 2815 0aca DF       		.byte	0xdf
 2816 0acb 80040000 		.4byte	0x480
 2817 0acf 19       		.uleb128 0x19
 2818 0ad0 50030000 		.4byte	.LASF115
 2819 0ad4 09       		.byte	0x9
 2820 0ad5 11       		.byte	0x11
 2821 0ad6 B4000000 		.4byte	0xb4
 2822 0ada 05       		.uleb128 0x5
 2823 0adb 03       		.byte	0x3
 2824 0adc 00000000 		.4byte	exec_lcd_status
 2825 0ae0 1A       		.uleb128 0x1a
 2826 0ae1 63070000 		.4byte	.LASF116
 2827 0ae5 06       		.byte	0x6
 2828 0ae6 77       		.byte	0x77
 2829 0ae7 4E080000 		.4byte	0x84e
 2830 0aeb F10A0000 		.4byte	0xaf1
 2831 0aef 1B       		.uleb128 0x1b
 2832 0af0 00       		.byte	0
 2833 0af1 1C       		.uleb128 0x1c
 2834 0af2 A2040000 		.4byte	.LASF117
 2835 0af6 05       		.byte	0x5
 2836 0af7 C5       		.byte	0xc5
 2837 0af8 020B0000 		.4byte	0xb02
 2838 0afc 1D       		.uleb128 0x1d
 2839 0afd B4000000 		.4byte	0xb4
 2840 0b01 00       		.byte	0
 2841 0b02 1E       		.uleb128 0x1e
 2842 0b03 0D090000 		.4byte	.LASF118
 2843 0b07 05       		.byte	0x5
 2844 0b08 CB       		.byte	0xcb
 2845 0b09 0F0B0000 		.4byte	0xb0f
 2846 0b0d 1B       		.uleb128 0x1b
 2847 0b0e 00       		.byte	0
 2848 0b0f 1E       		.uleb128 0x1e
 2849 0b10 94050000 		.4byte	.LASF119
 2850 0b14 06       		.byte	0x6
 2851 0b15 83       		.byte	0x83
 2852 0b16 1C0B0000 		.4byte	0xb1c
 2853 0b1a 1B       		.uleb128 0x1b
 2854 0b1b 00       		.byte	0
 2855 0b1c 1E       		.uleb128 0x1e
 2856 0b1d 4B050000 		.4byte	.LASF120
 2857 0b21 06       		.byte	0x6
 2858 0b22 89       		.byte	0x89
 2859 0b23 290B0000 		.4byte	0xb29
 2860 0b27 1B       		.uleb128 0x1b
 2861 0b28 00       		.byte	0
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 66


 2862 0b29 1C       		.uleb128 0x1c
 2863 0b2a B1030000 		.4byte	.LASF121
 2864 0b2e 0A       		.byte	0xa
 2865 0b2f 2E       		.byte	0x2e
 2866 0b30 3A0B0000 		.4byte	0xb3a
 2867 0b34 1D       		.uleb128 0x1d
 2868 0b35 B4000000 		.4byte	0xb4
 2869 0b39 00       		.byte	0
 2870 0b3a 1E       		.uleb128 0x1e
 2871 0b3b DC020000 		.4byte	.LASF122
 2872 0b3f 05       		.byte	0x5
 2873 0b40 CC       		.byte	0xcc
 2874 0b41 470B0000 		.4byte	0xb47
 2875 0b45 1B       		.uleb128 0x1b
 2876 0b46 00       		.byte	0
 2877 0b47 1C       		.uleb128 0x1c
 2878 0b48 65080000 		.4byte	.LASF123
 2879 0b4c 0B       		.byte	0xb
 2880 0b4d 62       		.byte	0x62
 2881 0b4e 580B0000 		.4byte	0xb58
 2882 0b52 1D       		.uleb128 0x1d
 2883 0b53 A9000000 		.4byte	0xa9
 2884 0b57 00       		.byte	0
 2885 0b58 1C       		.uleb128 0x1c
 2886 0b59 C0000000 		.4byte	.LASF124
 2887 0b5d 0B       		.byte	0xb
 2888 0b5e 65       		.byte	0x65
 2889 0b5f 690B0000 		.4byte	0xb69
 2890 0b63 1D       		.uleb128 0x1d
 2891 0b64 B4000000 		.4byte	0xb4
 2892 0b68 00       		.byte	0
 2893 0b69 1C       		.uleb128 0x1c
 2894 0b6a C5060000 		.4byte	.LASF125
 2895 0b6e 05       		.byte	0x5
 2896 0b6f C6       		.byte	0xc6
 2897 0b70 7A0B0000 		.4byte	0xb7a
 2898 0b74 1D       		.uleb128 0x1d
 2899 0b75 B4000000 		.4byte	0xb4
 2900 0b79 00       		.byte	0
 2901 0b7a 1E       		.uleb128 0x1e
 2902 0b7b 99030000 		.4byte	.LASF126
 2903 0b7f 05       		.byte	0x5
 2904 0b80 C8       		.byte	0xc8
 2905 0b81 870B0000 		.4byte	0xb87
 2906 0b85 1B       		.uleb128 0x1b
 2907 0b86 00       		.byte	0
 2908 0b87 1E       		.uleb128 0x1e
 2909 0b88 40080000 		.4byte	.LASF127
 2910 0b8c 0B       		.byte	0xb
 2911 0b8d 74       		.byte	0x74
 2912 0b8e 940B0000 		.4byte	0xb94
 2913 0b92 1B       		.uleb128 0x1b
 2914 0b93 00       		.byte	0
 2915 0b94 1E       		.uleb128 0x1e
 2916 0b95 16040000 		.4byte	.LASF128
 2917 0b99 0C       		.byte	0xc
 2918 0b9a 38       		.byte	0x38
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 67


 2919 0b9b A10B0000 		.4byte	0xba1
 2920 0b9f 1B       		.uleb128 0x1b
 2921 0ba0 00       		.byte	0
 2922 0ba1 1E       		.uleb128 0x1e
 2923 0ba2 B6060000 		.4byte	.LASF129
 2924 0ba6 0C       		.byte	0xc
 2925 0ba7 35       		.byte	0x35
 2926 0ba8 AE0B0000 		.4byte	0xbae
 2927 0bac 1B       		.uleb128 0x1b
 2928 0bad 00       		.byte	0
 2929 0bae 1E       		.uleb128 0x1e
 2930 0baf 7A080000 		.4byte	.LASF130
 2931 0bb3 0C       		.byte	0xc
 2932 0bb4 23       		.byte	0x23
 2933 0bb5 BB0B0000 		.4byte	0xbbb
 2934 0bb9 1B       		.uleb128 0x1b
 2935 0bba 00       		.byte	0
 2936 0bbb 1E       		.uleb128 0x1e
 2937 0bbc E2060000 		.4byte	.LASF131
 2938 0bc0 06       		.byte	0x6
 2939 0bc1 67       		.byte	0x67
 2940 0bc2 C80B0000 		.4byte	0xbc8
 2941 0bc6 1B       		.uleb128 0x1b
 2942 0bc7 00       		.byte	0
 2943 0bc8 1E       		.uleb128 0x1e
 2944 0bc9 5C080000 		.4byte	.LASF132
 2945 0bcd 0C       		.byte	0xc
 2946 0bce 2C       		.byte	0x2c
 2947 0bcf D50B0000 		.4byte	0xbd5
 2948 0bd3 1B       		.uleb128 0x1b
 2949 0bd4 00       		.byte	0
 2950 0bd5 1E       		.uleb128 0x1e
 2951 0bd6 68040000 		.4byte	.LASF133
 2952 0bda 07       		.byte	0x7
 2953 0bdb F0       		.byte	0xf0
 2954 0bdc E20B0000 		.4byte	0xbe2
 2955 0be0 1B       		.uleb128 0x1b
 2956 0be1 00       		.byte	0
 2957 0be2 1E       		.uleb128 0x1e
 2958 0be3 C1010000 		.4byte	.LASF134
 2959 0be7 06       		.byte	0x6
 2960 0be8 86       		.byte	0x86
 2961 0be9 EF0B0000 		.4byte	0xbef
 2962 0bed 1B       		.uleb128 0x1b
 2963 0bee 00       		.byte	0
 2964 0bef 1C       		.uleb128 0x1c
 2965 0bf0 47090000 		.4byte	.LASF135
 2966 0bf4 05       		.byte	0x5
 2967 0bf5 CA       		.byte	0xca
 2968 0bf6 000C0000 		.4byte	0xc00
 2969 0bfa 1D       		.uleb128 0x1d
 2970 0bfb B4000000 		.4byte	0xb4
 2971 0bff 00       		.byte	0
 2972 0c00 1C       		.uleb128 0x1c
 2973 0c01 87030000 		.4byte	.LASF136
 2974 0c05 0D       		.byte	0xd
 2975 0c06 33       		.byte	0x33
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 68


 2976 0c07 160C0000 		.4byte	0xc16
 2977 0c0b 1D       		.uleb128 0x1d
 2978 0c0c B4000000 		.4byte	0xb4
 2979 0c10 1D       		.uleb128 0x1d
 2980 0c11 25000000 		.4byte	0x25
 2981 0c15 00       		.byte	0
 2982 0c16 1E       		.uleb128 0x1e
 2983 0c17 27020000 		.4byte	.LASF137
 2984 0c1b 0C       		.byte	0xc
 2985 0c1c 26       		.byte	0x26
 2986 0c1d 230C0000 		.4byte	0xc23
 2987 0c21 1B       		.uleb128 0x1b
 2988 0c22 00       		.byte	0
 2989 0c23 1A       		.uleb128 0x1a
 2990 0c24 4B020000 		.4byte	.LASF138
 2991 0c28 05       		.byte	0x5
 2992 0c29 AA       		.byte	0xaa
 2993 0c2a B4000000 		.4byte	0xb4
 2994 0c2e 340C0000 		.4byte	0xc34
 2995 0c32 1B       		.uleb128 0x1b
 2996 0c33 00       		.byte	0
 2997 0c34 1C       		.uleb128 0x1c
 2998 0c35 C1020000 		.4byte	.LASF139
 2999 0c39 0E       		.byte	0xe
 3000 0c3a 4B       		.byte	0x4b
 3001 0c3b 4A0C0000 		.4byte	0xc4a
 3002 0c3f 1D       		.uleb128 0x1d
 3003 0c40 25000000 		.4byte	0x25
 3004 0c44 1D       		.uleb128 0x1d
 3005 0c45 B4000000 		.4byte	0xb4
 3006 0c49 00       		.byte	0
 3007 0c4a 1E       		.uleb128 0x1e
 3008 0c4b 36010000 		.4byte	.LASF140
 3009 0c4f 09       		.byte	0x9
 3010 0c50 41       		.byte	0x41
 3011 0c51 570C0000 		.4byte	0xc57
 3012 0c55 1B       		.uleb128 0x1b
 3013 0c56 00       		.byte	0
 3014 0c57 1A       		.uleb128 0x1a
 3015 0c58 80020000 		.4byte	.LASF141
 3016 0c5c 0F       		.byte	0xf
 3017 0c5d 28       		.byte	0x28
 3018 0c5e B4000000 		.4byte	0xb4
 3019 0c62 680C0000 		.4byte	0xc68
 3020 0c66 1B       		.uleb128 0x1b
 3021 0c67 00       		.byte	0
 3022 0c68 1C       		.uleb128 0x1c
 3023 0c69 90070000 		.4byte	.LASF142
 3024 0c6d 05       		.byte	0x5
 3025 0c6e B0       		.byte	0xb0
 3026 0c6f 790C0000 		.4byte	0xc79
 3027 0c73 1D       		.uleb128 0x1d
 3028 0c74 F5000000 		.4byte	0xf5
 3029 0c78 00       		.byte	0
 3030 0c79 1C       		.uleb128 0x1c
 3031 0c7a 11020000 		.4byte	.LASF143
 3032 0c7e 0B       		.byte	0xb
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 69


 3033 0c7f 5F       		.byte	0x5f
 3034 0c80 8A0C0000 		.4byte	0xc8a
 3035 0c84 1D       		.uleb128 0x1d
 3036 0c85 B4000000 		.4byte	0xb4
 3037 0c89 00       		.byte	0
 3038 0c8a 1F       		.uleb128 0x1f
 3039 0c8b 71060000 		.4byte	.LASF144
 3040 0c8f 05       		.byte	0x5
 3041 0c90 AD       		.byte	0xad
 3042 0c91 B4000000 		.4byte	0xb4
 3043 0c95 9F0C0000 		.4byte	0xc9f
 3044 0c99 1D       		.uleb128 0x1d
 3045 0c9a F5000000 		.4byte	0xf5
 3046 0c9e 00       		.byte	0
 3047 0c9f 1F       		.uleb128 0x1f
 3048 0ca0 13010000 		.4byte	.LASF145
 3049 0ca4 07       		.byte	0x7
 3050 0ca5 ED       		.byte	0xed
 3051 0ca6 B4000000 		.4byte	0xb4
 3052 0caa B40C0000 		.4byte	0xcb4
 3053 0cae 1D       		.uleb128 0x1d
 3054 0caf F5000000 		.4byte	0xf5
 3055 0cb3 00       		.byte	0
 3056 0cb4 20       		.uleb128 0x20
 3057 0cb5 02030000 		.4byte	.LASF146
 3058 0cb9 10       		.byte	0x10
 3059 0cba 31       		.byte	0x31
 3060 0cbb B4000000 		.4byte	0xb4
 3061 0cbf 1B       		.uleb128 0x1b
 3062 0cc0 00       		.byte	0
 3063 0cc1 00       		.byte	0
 3064              		.section	.debug_abbrev,"",%progbits
 3065              	.Ldebug_abbrev0:
 3066 0000 01       		.uleb128 0x1
 3067 0001 11       		.uleb128 0x11
 3068 0002 01       		.byte	0x1
 3069 0003 25       		.uleb128 0x25
 3070 0004 0E       		.uleb128 0xe
 3071 0005 13       		.uleb128 0x13
 3072 0006 0B       		.uleb128 0xb
 3073 0007 03       		.uleb128 0x3
 3074 0008 0E       		.uleb128 0xe
 3075 0009 1B       		.uleb128 0x1b
 3076 000a 0E       		.uleb128 0xe
 3077 000b 55       		.uleb128 0x55
 3078 000c 17       		.uleb128 0x17
 3079 000d 11       		.uleb128 0x11
 3080 000e 01       		.uleb128 0x1
 3081 000f 10       		.uleb128 0x10
 3082 0010 17       		.uleb128 0x17
 3083 0011 00       		.byte	0
 3084 0012 00       		.byte	0
 3085 0013 02       		.uleb128 0x2
 3086 0014 24       		.uleb128 0x24
 3087 0015 00       		.byte	0
 3088 0016 0B       		.uleb128 0xb
 3089 0017 0B       		.uleb128 0xb
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 70


 3090 0018 3E       		.uleb128 0x3e
 3091 0019 0B       		.uleb128 0xb
 3092 001a 03       		.uleb128 0x3
 3093 001b 0E       		.uleb128 0xe
 3094 001c 00       		.byte	0
 3095 001d 00       		.byte	0
 3096 001e 03       		.uleb128 0x3
 3097 001f 16       		.uleb128 0x16
 3098 0020 00       		.byte	0
 3099 0021 03       		.uleb128 0x3
 3100 0022 0E       		.uleb128 0xe
 3101 0023 3A       		.uleb128 0x3a
 3102 0024 0B       		.uleb128 0xb
 3103 0025 3B       		.uleb128 0x3b
 3104 0026 0B       		.uleb128 0xb
 3105 0027 49       		.uleb128 0x49
 3106 0028 13       		.uleb128 0x13
 3107 0029 00       		.byte	0
 3108 002a 00       		.byte	0
 3109 002b 04       		.uleb128 0x4
 3110 002c 24       		.uleb128 0x24
 3111 002d 00       		.byte	0
 3112 002e 0B       		.uleb128 0xb
 3113 002f 0B       		.uleb128 0xb
 3114 0030 3E       		.uleb128 0x3e
 3115 0031 0B       		.uleb128 0xb
 3116 0032 03       		.uleb128 0x3
 3117 0033 08       		.uleb128 0x8
 3118 0034 00       		.byte	0
 3119 0035 00       		.byte	0
 3120 0036 05       		.uleb128 0x5
 3121 0037 0F       		.uleb128 0xf
 3122 0038 00       		.byte	0
 3123 0039 0B       		.uleb128 0xb
 3124 003a 0B       		.uleb128 0xb
 3125 003b 49       		.uleb128 0x49
 3126 003c 13       		.uleb128 0x13
 3127 003d 00       		.byte	0
 3128 003e 00       		.byte	0
 3129 003f 06       		.uleb128 0x6
 3130 0040 35       		.uleb128 0x35
 3131 0041 00       		.byte	0
 3132 0042 49       		.uleb128 0x49
 3133 0043 13       		.uleb128 0x13
 3134 0044 00       		.byte	0
 3135 0045 00       		.byte	0
 3136 0046 07       		.uleb128 0x7
 3137 0047 13       		.uleb128 0x13
 3138 0048 01       		.byte	0x1
 3139 0049 0B       		.uleb128 0xb
 3140 004a 0B       		.uleb128 0xb
 3141 004b 3A       		.uleb128 0x3a
 3142 004c 0B       		.uleb128 0xb
 3143 004d 3B       		.uleb128 0x3b
 3144 004e 0B       		.uleb128 0xb
 3145 004f 01       		.uleb128 0x1
 3146 0050 13       		.uleb128 0x13
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 71


 3147 0051 00       		.byte	0
 3148 0052 00       		.byte	0
 3149 0053 08       		.uleb128 0x8
 3150 0054 0D       		.uleb128 0xd
 3151 0055 00       		.byte	0
 3152 0056 03       		.uleb128 0x3
 3153 0057 0E       		.uleb128 0xe
 3154 0058 3A       		.uleb128 0x3a
 3155 0059 0B       		.uleb128 0xb
 3156 005a 3B       		.uleb128 0x3b
 3157 005b 0B       		.uleb128 0xb
 3158 005c 49       		.uleb128 0x49
 3159 005d 13       		.uleb128 0x13
 3160 005e 38       		.uleb128 0x38
 3161 005f 0B       		.uleb128 0xb
 3162 0060 00       		.byte	0
 3163 0061 00       		.byte	0
 3164 0062 09       		.uleb128 0x9
 3165 0063 01       		.uleb128 0x1
 3166 0064 01       		.byte	0x1
 3167 0065 49       		.uleb128 0x49
 3168 0066 13       		.uleb128 0x13
 3169 0067 01       		.uleb128 0x1
 3170 0068 13       		.uleb128 0x13
 3171 0069 00       		.byte	0
 3172 006a 00       		.byte	0
 3173 006b 0A       		.uleb128 0xa
 3174 006c 21       		.uleb128 0x21
 3175 006d 00       		.byte	0
 3176 006e 49       		.uleb128 0x49
 3177 006f 13       		.uleb128 0x13
 3178 0070 2F       		.uleb128 0x2f
 3179 0071 0B       		.uleb128 0xb
 3180 0072 00       		.byte	0
 3181 0073 00       		.byte	0
 3182 0074 0B       		.uleb128 0xb
 3183 0075 2E       		.uleb128 0x2e
 3184 0076 01       		.byte	0x1
 3185 0077 3F       		.uleb128 0x3f
 3186 0078 19       		.uleb128 0x19
 3187 0079 03       		.uleb128 0x3
 3188 007a 0E       		.uleb128 0xe
 3189 007b 3A       		.uleb128 0x3a
 3190 007c 0B       		.uleb128 0xb
 3191 007d 3B       		.uleb128 0x3b
 3192 007e 0B       		.uleb128 0xb
 3193 007f 11       		.uleb128 0x11
 3194 0080 01       		.uleb128 0x1
 3195 0081 12       		.uleb128 0x12
 3196 0082 06       		.uleb128 0x6
 3197 0083 40       		.uleb128 0x40
 3198 0084 18       		.uleb128 0x18
 3199 0085 9742     		.uleb128 0x2117
 3200 0087 19       		.uleb128 0x19
 3201 0088 01       		.uleb128 0x1
 3202 0089 13       		.uleb128 0x13
 3203 008a 00       		.byte	0
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 72


 3204 008b 00       		.byte	0
 3205 008c 0C       		.uleb128 0xc
 3206 008d 898201   		.uleb128 0x4109
 3207 0090 00       		.byte	0
 3208 0091 11       		.uleb128 0x11
 3209 0092 01       		.uleb128 0x1
 3210 0093 31       		.uleb128 0x31
 3211 0094 13       		.uleb128 0x13
 3212 0095 00       		.byte	0
 3213 0096 00       		.byte	0
 3214 0097 0D       		.uleb128 0xd
 3215 0098 898201   		.uleb128 0x4109
 3216 009b 01       		.byte	0x1
 3217 009c 11       		.uleb128 0x11
 3218 009d 01       		.uleb128 0x1
 3219 009e 31       		.uleb128 0x31
 3220 009f 13       		.uleb128 0x13
 3221 00a0 00       		.byte	0
 3222 00a1 00       		.byte	0
 3223 00a2 0E       		.uleb128 0xe
 3224 00a3 8A8201   		.uleb128 0x410a
 3225 00a6 00       		.byte	0
 3226 00a7 02       		.uleb128 0x2
 3227 00a8 18       		.uleb128 0x18
 3228 00a9 9142     		.uleb128 0x2111
 3229 00ab 18       		.uleb128 0x18
 3230 00ac 00       		.byte	0
 3231 00ad 00       		.byte	0
 3232 00ae 0F       		.uleb128 0xf
 3233 00af 34       		.uleb128 0x34
 3234 00b0 00       		.byte	0
 3235 00b1 03       		.uleb128 0x3
 3236 00b2 0E       		.uleb128 0xe
 3237 00b3 3A       		.uleb128 0x3a
 3238 00b4 0B       		.uleb128 0xb
 3239 00b5 3B       		.uleb128 0x3b
 3240 00b6 0B       		.uleb128 0xb
 3241 00b7 49       		.uleb128 0x49
 3242 00b8 13       		.uleb128 0x13
 3243 00b9 02       		.uleb128 0x2
 3244 00ba 17       		.uleb128 0x17
 3245 00bb 00       		.byte	0
 3246 00bc 00       		.byte	0
 3247 00bd 10       		.uleb128 0x10
 3248 00be 0B       		.uleb128 0xb
 3249 00bf 01       		.byte	0x1
 3250 00c0 11       		.uleb128 0x11
 3251 00c1 01       		.uleb128 0x1
 3252 00c2 12       		.uleb128 0x12
 3253 00c3 06       		.uleb128 0x6
 3254 00c4 01       		.uleb128 0x1
 3255 00c5 13       		.uleb128 0x13
 3256 00c6 00       		.byte	0
 3257 00c7 00       		.byte	0
 3258 00c8 11       		.uleb128 0x11
 3259 00c9 34       		.uleb128 0x34
 3260 00ca 00       		.byte	0
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 73


 3261 00cb 03       		.uleb128 0x3
 3262 00cc 0E       		.uleb128 0xe
 3263 00cd 3A       		.uleb128 0x3a
 3264 00ce 0B       		.uleb128 0xb
 3265 00cf 3B       		.uleb128 0x3b
 3266 00d0 05       		.uleb128 0x5
 3267 00d1 49       		.uleb128 0x49
 3268 00d2 13       		.uleb128 0x13
 3269 00d3 02       		.uleb128 0x2
 3270 00d4 17       		.uleb128 0x17
 3271 00d5 00       		.byte	0
 3272 00d6 00       		.byte	0
 3273 00d7 12       		.uleb128 0x12
 3274 00d8 898201   		.uleb128 0x4109
 3275 00db 01       		.byte	0x1
 3276 00dc 11       		.uleb128 0x11
 3277 00dd 01       		.uleb128 0x1
 3278 00de 31       		.uleb128 0x31
 3279 00df 13       		.uleb128 0x13
 3280 00e0 01       		.uleb128 0x1
 3281 00e1 13       		.uleb128 0x13
 3282 00e2 00       		.byte	0
 3283 00e3 00       		.byte	0
 3284 00e4 13       		.uleb128 0x13
 3285 00e5 2E       		.uleb128 0x2e
 3286 00e6 01       		.byte	0x1
 3287 00e7 03       		.uleb128 0x3
 3288 00e8 0E       		.uleb128 0xe
 3289 00e9 3A       		.uleb128 0x3a
 3290 00ea 0B       		.uleb128 0xb
 3291 00eb 3B       		.uleb128 0x3b
 3292 00ec 05       		.uleb128 0x5
 3293 00ed 11       		.uleb128 0x11
 3294 00ee 01       		.uleb128 0x1
 3295 00ef 12       		.uleb128 0x12
 3296 00f0 06       		.uleb128 0x6
 3297 00f1 40       		.uleb128 0x40
 3298 00f2 18       		.uleb128 0x18
 3299 00f3 9742     		.uleb128 0x2117
 3300 00f5 19       		.uleb128 0x19
 3301 00f6 01       		.uleb128 0x1
 3302 00f7 13       		.uleb128 0x13
 3303 00f8 00       		.byte	0
 3304 00f9 00       		.byte	0
 3305 00fa 14       		.uleb128 0x14
 3306 00fb 34       		.uleb128 0x34
 3307 00fc 00       		.byte	0
 3308 00fd 03       		.uleb128 0x3
 3309 00fe 08       		.uleb128 0x8
 3310 00ff 3A       		.uleb128 0x3a
 3311 0100 0B       		.uleb128 0xb
 3312 0101 3B       		.uleb128 0x3b
 3313 0102 0B       		.uleb128 0xb
 3314 0103 49       		.uleb128 0x49
 3315 0104 13       		.uleb128 0x13
 3316 0105 02       		.uleb128 0x2
 3317 0106 17       		.uleb128 0x17
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 74


 3318 0107 00       		.byte	0
 3319 0108 00       		.byte	0
 3320 0109 15       		.uleb128 0x15
 3321 010a 34       		.uleb128 0x34
 3322 010b 00       		.byte	0
 3323 010c 03       		.uleb128 0x3
 3324 010d 0E       		.uleb128 0xe
 3325 010e 3A       		.uleb128 0x3a
 3326 010f 0B       		.uleb128 0xb
 3327 0110 3B       		.uleb128 0x3b
 3328 0111 0B       		.uleb128 0xb
 3329 0112 49       		.uleb128 0x49
 3330 0113 13       		.uleb128 0x13
 3331 0114 02       		.uleb128 0x2
 3332 0115 18       		.uleb128 0x18
 3333 0116 00       		.byte	0
 3334 0117 00       		.byte	0
 3335 0118 16       		.uleb128 0x16
 3336 0119 34       		.uleb128 0x34
 3337 011a 00       		.byte	0
 3338 011b 03       		.uleb128 0x3
 3339 011c 0E       		.uleb128 0xe
 3340 011d 3A       		.uleb128 0x3a
 3341 011e 0B       		.uleb128 0xb
 3342 011f 3B       		.uleb128 0x3b
 3343 0120 05       		.uleb128 0x5
 3344 0121 49       		.uleb128 0x49
 3345 0122 13       		.uleb128 0x13
 3346 0123 3F       		.uleb128 0x3f
 3347 0124 19       		.uleb128 0x19
 3348 0125 3C       		.uleb128 0x3c
 3349 0126 19       		.uleb128 0x19
 3350 0127 00       		.byte	0
 3351 0128 00       		.byte	0
 3352 0129 17       		.uleb128 0x17
 3353 012a 34       		.uleb128 0x34
 3354 012b 00       		.byte	0
 3355 012c 03       		.uleb128 0x3
 3356 012d 0E       		.uleb128 0xe
 3357 012e 3A       		.uleb128 0x3a
 3358 012f 0B       		.uleb128 0xb
 3359 0130 3B       		.uleb128 0x3b
 3360 0131 0B       		.uleb128 0xb
 3361 0132 49       		.uleb128 0x49
 3362 0133 13       		.uleb128 0x13
 3363 0134 3F       		.uleb128 0x3f
 3364 0135 19       		.uleb128 0x19
 3365 0136 3C       		.uleb128 0x3c
 3366 0137 19       		.uleb128 0x19
 3367 0138 00       		.byte	0
 3368 0139 00       		.byte	0
 3369 013a 18       		.uleb128 0x18
 3370 013b 34       		.uleb128 0x34
 3371 013c 00       		.byte	0
 3372 013d 03       		.uleb128 0x3
 3373 013e 08       		.uleb128 0x8
 3374 013f 3A       		.uleb128 0x3a
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 75


 3375 0140 0B       		.uleb128 0xb
 3376 0141 3B       		.uleb128 0x3b
 3377 0142 0B       		.uleb128 0xb
 3378 0143 49       		.uleb128 0x49
 3379 0144 13       		.uleb128 0x13
 3380 0145 3F       		.uleb128 0x3f
 3381 0146 19       		.uleb128 0x19
 3382 0147 3C       		.uleb128 0x3c
 3383 0148 19       		.uleb128 0x19
 3384 0149 00       		.byte	0
 3385 014a 00       		.byte	0
 3386 014b 19       		.uleb128 0x19
 3387 014c 34       		.uleb128 0x34
 3388 014d 00       		.byte	0
 3389 014e 03       		.uleb128 0x3
 3390 014f 0E       		.uleb128 0xe
 3391 0150 3A       		.uleb128 0x3a
 3392 0151 0B       		.uleb128 0xb
 3393 0152 3B       		.uleb128 0x3b
 3394 0153 0B       		.uleb128 0xb
 3395 0154 49       		.uleb128 0x49
 3396 0155 13       		.uleb128 0x13
 3397 0156 3F       		.uleb128 0x3f
 3398 0157 19       		.uleb128 0x19
 3399 0158 02       		.uleb128 0x2
 3400 0159 18       		.uleb128 0x18
 3401 015a 00       		.byte	0
 3402 015b 00       		.byte	0
 3403 015c 1A       		.uleb128 0x1a
 3404 015d 2E       		.uleb128 0x2e
 3405 015e 01       		.byte	0x1
 3406 015f 3F       		.uleb128 0x3f
 3407 0160 19       		.uleb128 0x19
 3408 0161 03       		.uleb128 0x3
 3409 0162 0E       		.uleb128 0xe
 3410 0163 3A       		.uleb128 0x3a
 3411 0164 0B       		.uleb128 0xb
 3412 0165 3B       		.uleb128 0x3b
 3413 0166 0B       		.uleb128 0xb
 3414 0167 49       		.uleb128 0x49
 3415 0168 13       		.uleb128 0x13
 3416 0169 3C       		.uleb128 0x3c
 3417 016a 19       		.uleb128 0x19
 3418 016b 01       		.uleb128 0x1
 3419 016c 13       		.uleb128 0x13
 3420 016d 00       		.byte	0
 3421 016e 00       		.byte	0
 3422 016f 1B       		.uleb128 0x1b
 3423 0170 18       		.uleb128 0x18
 3424 0171 00       		.byte	0
 3425 0172 00       		.byte	0
 3426 0173 00       		.byte	0
 3427 0174 1C       		.uleb128 0x1c
 3428 0175 2E       		.uleb128 0x2e
 3429 0176 01       		.byte	0x1
 3430 0177 3F       		.uleb128 0x3f
 3431 0178 19       		.uleb128 0x19
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 76


 3432 0179 03       		.uleb128 0x3
 3433 017a 0E       		.uleb128 0xe
 3434 017b 3A       		.uleb128 0x3a
 3435 017c 0B       		.uleb128 0xb
 3436 017d 3B       		.uleb128 0x3b
 3437 017e 0B       		.uleb128 0xb
 3438 017f 27       		.uleb128 0x27
 3439 0180 19       		.uleb128 0x19
 3440 0181 3C       		.uleb128 0x3c
 3441 0182 19       		.uleb128 0x19
 3442 0183 01       		.uleb128 0x1
 3443 0184 13       		.uleb128 0x13
 3444 0185 00       		.byte	0
 3445 0186 00       		.byte	0
 3446 0187 1D       		.uleb128 0x1d
 3447 0188 05       		.uleb128 0x5
 3448 0189 00       		.byte	0
 3449 018a 49       		.uleb128 0x49
 3450 018b 13       		.uleb128 0x13
 3451 018c 00       		.byte	0
 3452 018d 00       		.byte	0
 3453 018e 1E       		.uleb128 0x1e
 3454 018f 2E       		.uleb128 0x2e
 3455 0190 01       		.byte	0x1
 3456 0191 3F       		.uleb128 0x3f
 3457 0192 19       		.uleb128 0x19
 3458 0193 03       		.uleb128 0x3
 3459 0194 0E       		.uleb128 0xe
 3460 0195 3A       		.uleb128 0x3a
 3461 0196 0B       		.uleb128 0xb
 3462 0197 3B       		.uleb128 0x3b
 3463 0198 0B       		.uleb128 0xb
 3464 0199 3C       		.uleb128 0x3c
 3465 019a 19       		.uleb128 0x19
 3466 019b 01       		.uleb128 0x1
 3467 019c 13       		.uleb128 0x13
 3468 019d 00       		.byte	0
 3469 019e 00       		.byte	0
 3470 019f 1F       		.uleb128 0x1f
 3471 01a0 2E       		.uleb128 0x2e
 3472 01a1 01       		.byte	0x1
 3473 01a2 3F       		.uleb128 0x3f
 3474 01a3 19       		.uleb128 0x19
 3475 01a4 03       		.uleb128 0x3
 3476 01a5 0E       		.uleb128 0xe
 3477 01a6 3A       		.uleb128 0x3a
 3478 01a7 0B       		.uleb128 0xb
 3479 01a8 3B       		.uleb128 0x3b
 3480 01a9 0B       		.uleb128 0xb
 3481 01aa 27       		.uleb128 0x27
 3482 01ab 19       		.uleb128 0x19
 3483 01ac 49       		.uleb128 0x49
 3484 01ad 13       		.uleb128 0x13
 3485 01ae 3C       		.uleb128 0x3c
 3486 01af 19       		.uleb128 0x19
 3487 01b0 01       		.uleb128 0x1
 3488 01b1 13       		.uleb128 0x13
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 77


 3489 01b2 00       		.byte	0
 3490 01b3 00       		.byte	0
 3491 01b4 20       		.uleb128 0x20
 3492 01b5 2E       		.uleb128 0x2e
 3493 01b6 01       		.byte	0x1
 3494 01b7 3F       		.uleb128 0x3f
 3495 01b8 19       		.uleb128 0x19
 3496 01b9 03       		.uleb128 0x3
 3497 01ba 0E       		.uleb128 0xe
 3498 01bb 3A       		.uleb128 0x3a
 3499 01bc 0B       		.uleb128 0xb
 3500 01bd 3B       		.uleb128 0x3b
 3501 01be 0B       		.uleb128 0xb
 3502 01bf 49       		.uleb128 0x49
 3503 01c0 13       		.uleb128 0x13
 3504 01c1 3C       		.uleb128 0x3c
 3505 01c2 19       		.uleb128 0x19
 3506 01c3 00       		.byte	0
 3507 01c4 00       		.byte	0
 3508 01c5 00       		.byte	0
 3509              		.section	.debug_loc,"",%progbits
 3510              	.Ldebug_loc0:
 3511              	.LLST0:
 3512 0000 06000000 		.4byte	.LVL2
 3513 0004 10000000 		.4byte	.LVL3
 3514 0008 0100     		.2byte	0x1
 3515 000a 53       		.byte	0x53
 3516 000b 3E000000 		.4byte	.LVL8
 3517 000f 52000000 		.4byte	.LVL9
 3518 0013 0100     		.2byte	0x1
 3519 0015 53       		.byte	0x53
 3520 0016 56000000 		.4byte	.LVL10
 3521 001a 5F000000 		.4byte	.LVL11-1
 3522 001e 0100     		.2byte	0x1
 3523 0020 53       		.byte	0x53
 3524 0021 6E020000 		.4byte	.LVL26
 3525 0025 79020000 		.4byte	.LVL27-1
 3526 0029 0100     		.2byte	0x1
 3527 002b 53       		.byte	0x53
 3528 002c 0C030000 		.4byte	.LVL47
 3529 0030 17030000 		.4byte	.LVL48-1
 3530 0034 0100     		.2byte	0x1
 3531 0036 53       		.byte	0x53
 3532 0037 00000000 		.4byte	0
 3533 003b 00000000 		.4byte	0
 3534              	.LLST1:
 3535 003f 7E020000 		.4byte	.LVL28
 3536 0043 9A020000 		.4byte	.LVL29
 3537 0047 0100     		.2byte	0x1
 3538 0049 52       		.byte	0x52
 3539 004a 9A020000 		.4byte	.LVL29
 3540 004e A2020000 		.4byte	.LVL30
 3541 0052 0100     		.2byte	0x1
 3542 0054 53       		.byte	0x53
 3543 0055 A4020000 		.4byte	.LVL31
 3544 0059 AC020000 		.4byte	.LVL32
 3545 005d 0100     		.2byte	0x1
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 78


 3546 005f 53       		.byte	0x53
 3547 0060 AE020000 		.4byte	.LVL33
 3548 0064 B6020000 		.4byte	.LVL34
 3549 0068 0100     		.2byte	0x1
 3550 006a 53       		.byte	0x53
 3551 006b B8020000 		.4byte	.LVL35
 3552 006f C0020000 		.4byte	.LVL36
 3553 0073 0100     		.2byte	0x1
 3554 0075 53       		.byte	0x53
 3555 0076 C2020000 		.4byte	.LVL37
 3556 007a C8020000 		.4byte	.LVL38
 3557 007e 1600     		.2byte	0x16
 3558 0080 73       		.byte	0x73
 3559 0081 00       		.sleb128 0
 3560 0082 12       		.byte	0x12
 3561 0083 40       		.byte	0x40
 3562 0084 4B       		.byte	0x4b
 3563 0085 24       		.byte	0x24
 3564 0086 22       		.byte	0x22
 3565 0087 08       		.byte	0x8
 3566 0088 C8       		.byte	0xc8
 3567 0089 16       		.byte	0x16
 3568 008a 14       		.byte	0x14
 3569 008b 40       		.byte	0x40
 3570 008c 4B       		.byte	0x4b
 3571 008d 24       		.byte	0x24
 3572 008e 22       		.byte	0x22
 3573 008f 2D       		.byte	0x2d
 3574 0090 28       		.byte	0x28
 3575 0091 0100     		.2byte	0x1
 3576 0093 16       		.byte	0x16
 3577 0094 13       		.byte	0x13
 3578 0095 9F       		.byte	0x9f
 3579 0096 CE020000 		.4byte	.LVL39
 3580 009a FE020000 		.4byte	.LVL44
 3581 009e 0100     		.2byte	0x1
 3582 00a0 53       		.byte	0x53
 3583 00a1 FE020000 		.4byte	.LVL44
 3584 00a5 03030000 		.4byte	.LVL45-1
 3585 00a9 0200     		.2byte	0x2
 3586 00ab 72       		.byte	0x72
 3587 00ac 07       		.sleb128 7
 3588 00ad 00000000 		.4byte	0
 3589 00b1 00000000 		.4byte	0
 3590              	.LLST2:
 3591 00b5 D2020000 		.4byte	.LVL40
 3592 00b9 DE020000 		.4byte	.LVL41
 3593 00bd 0100     		.2byte	0x1
 3594 00bf 50       		.byte	0x50
 3595 00c0 DE020000 		.4byte	.LVL41
 3596 00c4 03030000 		.4byte	.LVL45-1
 3597 00c8 0100     		.2byte	0x1
 3598 00ca 51       		.byte	0x51
 3599 00cb 00000000 		.4byte	0
 3600 00cf 00000000 		.4byte	0
 3601              	.LLST3:
 3602 00d3 1C030000 		.4byte	.LVL49
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 79


 3603 00d7 28030000 		.4byte	.LVL50
 3604 00db 0100     		.2byte	0x1
 3605 00dd 52       		.byte	0x52
 3606 00de 28030000 		.4byte	.LVL50
 3607 00e2 30030000 		.4byte	.LVL51
 3608 00e6 0100     		.2byte	0x1
 3609 00e8 53       		.byte	0x53
 3610 00e9 32030000 		.4byte	.LVL52
 3611 00ed 3A030000 		.4byte	.LVL53
 3612 00f1 0100     		.2byte	0x1
 3613 00f3 53       		.byte	0x53
 3614 00f4 3C030000 		.4byte	.LVL54
 3615 00f8 44030000 		.4byte	.LVL55
 3616 00fc 0100     		.2byte	0x1
 3617 00fe 53       		.byte	0x53
 3618 00ff 46030000 		.4byte	.LVL56
 3619 0103 4E030000 		.4byte	.LVL57
 3620 0107 0100     		.2byte	0x1
 3621 0109 53       		.byte	0x53
 3622 010a 50030000 		.4byte	.LVL58
 3623 010e 56030000 		.4byte	.LVL59
 3624 0112 1600     		.2byte	0x16
 3625 0114 73       		.byte	0x73
 3626 0115 00       		.sleb128 0
 3627 0116 12       		.byte	0x12
 3628 0117 40       		.byte	0x40
 3629 0118 4B       		.byte	0x4b
 3630 0119 24       		.byte	0x24
 3631 011a 22       		.byte	0x22
 3632 011b 08       		.byte	0x8
 3633 011c C8       		.byte	0xc8
 3634 011d 16       		.byte	0x16
 3635 011e 14       		.byte	0x14
 3636 011f 40       		.byte	0x40
 3637 0120 4B       		.byte	0x4b
 3638 0121 24       		.byte	0x24
 3639 0122 22       		.byte	0x22
 3640 0123 2D       		.byte	0x2d
 3641 0124 28       		.byte	0x28
 3642 0125 0100     		.2byte	0x1
 3643 0127 16       		.byte	0x16
 3644 0128 13       		.byte	0x13
 3645 0129 9F       		.byte	0x9f
 3646 012a 5C030000 		.4byte	.LVL60
 3647 012e 6E030000 		.4byte	.LVL61
 3648 0132 0100     		.2byte	0x1
 3649 0134 53       		.byte	0x53
 3650 0135 6E030000 		.4byte	.LVL61
 3651 0139 70030000 		.4byte	.LVL62
 3652 013d 0200     		.2byte	0x2
 3653 013f 72       		.byte	0x72
 3654 0140 09       		.sleb128 9
 3655 0141 00000000 		.4byte	0
 3656 0145 00000000 		.4byte	0
 3657              	.LLST4:
 3658 0149 B0030000 		.4byte	.LVL63
 3659 014d CA030000 		.4byte	.LVL67
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 80


 3660 0151 0100     		.2byte	0x1
 3661 0153 54       		.byte	0x54
 3662 0154 00000000 		.4byte	0
 3663 0158 00000000 		.4byte	0
 3664              	.LLST5:
 3665 015c 06000000 		.4byte	.LVL69
 3666 0160 28000000 		.4byte	.LVL75
 3667 0164 0100     		.2byte	0x1
 3668 0166 50       		.byte	0x50
 3669 0167 00000000 		.4byte	0
 3670 016b 00000000 		.4byte	0
 3671              	.LLST6:
 3672 016f 10000000 		.4byte	.LVL70
 3673 0173 14000000 		.4byte	.LVL72
 3674 0177 0100     		.2byte	0x1
 3675 0179 54       		.byte	0x54
 3676 017a 16000000 		.4byte	.LVL73
 3677 017e D8010000 		.4byte	.LVL97
 3678 0182 0100     		.2byte	0x1
 3679 0184 54       		.byte	0x54
 3680 0185 00000000 		.4byte	0
 3681 0189 00000000 		.4byte	0
 3682              	.LLST7:
 3683 018d 12000000 		.4byte	.LVL71
 3684 0191 14000000 		.4byte	.LVL72
 3685 0195 0100     		.2byte	0x1
 3686 0197 55       		.byte	0x55
 3687 0198 18000000 		.4byte	.LVL74
 3688 019c D8010000 		.4byte	.LVL97
 3689 01a0 0100     		.2byte	0x1
 3690 01a2 55       		.byte	0x55
 3691 01a3 00000000 		.4byte	0
 3692 01a7 00000000 		.4byte	0
 3693              	.LLST8:
 3694 01ab 5E000000 		.4byte	.LVL107
 3695 01af 88000000 		.4byte	.LVL111
 3696 01b3 0100     		.2byte	0x1
 3697 01b5 54       		.byte	0x54
 3698 01b6 8A000000 		.4byte	.LVL112
 3699 01ba 9A000000 		.4byte	.LVL115
 3700 01be 0100     		.2byte	0x1
 3701 01c0 54       		.byte	0x54
 3702 01c1 9C000000 		.4byte	.LVL116
 3703 01c5 AE000000 		.4byte	.LVL120
 3704 01c9 0100     		.2byte	0x1
 3705 01cb 54       		.byte	0x54
 3706 01cc B0000000 		.4byte	.LVL121
 3707 01d0 C4000000 		.4byte	.LVL124
 3708 01d4 0100     		.2byte	0x1
 3709 01d6 54       		.byte	0x54
 3710 01d7 C6000000 		.4byte	.LVL125
 3711 01db D4000000 		.4byte	.LVL129
 3712 01df 0100     		.2byte	0x1
 3713 01e1 54       		.byte	0x54
 3714 01e2 D6000000 		.4byte	.LVL130
 3715 01e6 56010000 		.4byte	.LVL145
 3716 01ea 0100     		.2byte	0x1
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 81


 3717 01ec 54       		.byte	0x54
 3718 01ed 00000000 		.4byte	0
 3719 01f1 00000000 		.4byte	0
 3720              	.LLST9:
 3721 01f5 5E000000 		.4byte	.LVL107
 3722 01f9 86000000 		.4byte	.LVL110
 3723 01fd 0100     		.2byte	0x1
 3724 01ff 55       		.byte	0x55
 3725 0200 8A000000 		.4byte	.LVL112
 3726 0204 98000000 		.4byte	.LVL114
 3727 0208 0100     		.2byte	0x1
 3728 020a 55       		.byte	0x55
 3729 020b 9C000000 		.4byte	.LVL116
 3730 020f AC000000 		.4byte	.LVL119
 3731 0213 0100     		.2byte	0x1
 3732 0215 55       		.byte	0x55
 3733 0216 B0000000 		.4byte	.LVL121
 3734 021a C2000000 		.4byte	.LVL123
 3735 021e 0100     		.2byte	0x1
 3736 0220 55       		.byte	0x55
 3737 0221 C6000000 		.4byte	.LVL125
 3738 0225 D2000000 		.4byte	.LVL128
 3739 0229 0100     		.2byte	0x1
 3740 022b 55       		.byte	0x55
 3741 022c D6000000 		.4byte	.LVL130
 3742 0230 1A010000 		.4byte	.LVL135
 3743 0234 0100     		.2byte	0x1
 3744 0236 55       		.byte	0x55
 3745 0237 1A010000 		.4byte	.LVL135
 3746 023b 24010000 		.4byte	.LVL137
 3747 023f 0100     		.2byte	0x1
 3748 0241 53       		.byte	0x53
 3749 0242 24010000 		.4byte	.LVL137
 3750 0246 26010000 		.4byte	.LVL138
 3751 024a 0100     		.2byte	0x1
 3752 024c 55       		.byte	0x55
 3753 024d 26010000 		.4byte	.LVL138
 3754 0251 2C010000 		.4byte	.LVL139
 3755 0255 0100     		.2byte	0x1
 3756 0257 53       		.byte	0x53
 3757 0258 2C010000 		.4byte	.LVL139
 3758 025c 56010000 		.4byte	.LVL145
 3759 0260 0100     		.2byte	0x1
 3760 0262 55       		.byte	0x55
 3761 0263 00000000 		.4byte	0
 3762 0267 00000000 		.4byte	0
 3763              	.LLST10:
 3764 026b 5E000000 		.4byte	.LVL107
 3765 026f 69000000 		.4byte	.LVL108-1
 3766 0273 0100     		.2byte	0x1
 3767 0275 50       		.byte	0x50
 3768 0276 D6000000 		.4byte	.LVL130
 3769 027a 1C010000 		.4byte	.LVL136
 3770 027e 0100     		.2byte	0x1
 3771 0280 50       		.byte	0x50
 3772 0281 24010000 		.4byte	.LVL137
 3773 0285 2C010000 		.4byte	.LVL139
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 82


 3774 0289 0100     		.2byte	0x1
 3775 028b 50       		.byte	0x50
 3776 028c 40010000 		.4byte	.LVL142
 3777 0290 47010000 		.4byte	.LVL143-1
 3778 0294 0100     		.2byte	0x1
 3779 0296 50       		.byte	0x50
 3780 0297 00000000 		.4byte	0
 3781 029b 00000000 		.4byte	0
 3782              		.section	.debug_aranges,"",%progbits
 3783 0000 44000000 		.4byte	0x44
 3784 0004 0200     		.2byte	0x2
 3785 0006 00000000 		.4byte	.Ldebug_info0
 3786 000a 04       		.byte	0x4
 3787 000b 00       		.byte	0
 3788 000c 0000     		.2byte	0
 3789 000e 0000     		.2byte	0
 3790 0010 00000000 		.4byte	.LFB65
 3791 0014 10000000 		.4byte	.LFE65-.LFB65
 3792 0018 00000000 		.4byte	.LFB67
 3793 001c E8030000 		.4byte	.LFE67-.LFB67
 3794 0020 00000000 		.4byte	.LFB68
 3795 0024 E4010000 		.4byte	.LFE68-.LFB68
 3796 0028 00000000 		.4byte	.LFB66
 3797 002c 2C000000 		.4byte	.LFE66-.LFB66
 3798 0030 00000000 		.4byte	.LFB63
 3799 0034 6C010000 		.4byte	.LFE63-.LFB63
 3800 0038 00000000 		.4byte	.LFB64
 3801 003c 28000000 		.4byte	.LFE64-.LFB64
 3802 0040 00000000 		.4byte	0
 3803 0044 00000000 		.4byte	0
 3804              		.section	.debug_ranges,"",%progbits
 3805              	.Ldebug_ranges0:
 3806 0000 00000000 		.4byte	.LFB65
 3807 0004 10000000 		.4byte	.LFE65
 3808 0008 00000000 		.4byte	.LFB67
 3809 000c E8030000 		.4byte	.LFE67
 3810 0010 00000000 		.4byte	.LFB68
 3811 0014 E4010000 		.4byte	.LFE68
 3812 0018 00000000 		.4byte	.LFB66
 3813 001c 2C000000 		.4byte	.LFE66
 3814 0020 00000000 		.4byte	.LFB63
 3815 0024 6C010000 		.4byte	.LFE63
 3816 0028 00000000 		.4byte	.LFB64
 3817 002c 28000000 		.4byte	.LFE64
 3818 0030 00000000 		.4byte	0
 3819 0034 00000000 		.4byte	0
 3820              		.section	.debug_line,"",%progbits
 3821              	.Ldebug_line0:
 3822 0000 68040000 		.section	.debug_str,"MS",%progbits,1
 3822      0200ED01 
 3822      00000201 
 3822      FB0E0D00 
 3822      01010101 
 3823              	.LASF28:
 3824 0000 70756C73 		.ascii	"pulse_microseconds\000"
 3824      655F6D69 
 3824      63726F73 
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 83


 3824      65636F6E 
 3824      647300
 3825              	.LASF73:
 3826 0013 64697374 		.ascii	"distance\000"
 3826      616E6365 
 3826      00
 3827              	.LASF77:
 3828 001c 70726F67 		.ascii	"program_flow\000"
 3828      72616D5F 
 3828      666C6F77 
 3828      00
 3829              	.LASF66:
 3830 0029 6D61785F 		.ascii	"max_junction_speed_sqr\000"
 3830      6A756E63 
 3830      74696F6E 
 3830      5F737065 
 3830      65645F73 
 3831              	.LASF37:
 3832 0040 666C6167 		.ascii	"flags\000"
 3832      7300
 3833              	.LASF90:
 3834 0046 70726F74 		.ascii	"protocol_exec_rt_system\000"
 3834      6F636F6C 
 3834      5F657865 
 3834      635F7274 
 3834      5F737973 
 3835              	.LASF69:
 3836 005e 706C616E 		.ascii	"plan_block_t\000"
 3836      5F626C6F 
 3836      636B5F74 
 3836      00
 3837              	.LASF32:
 3838 006b 73746174 		.ascii	"status_report_mask\000"
 3838      75735F72 
 3838      65706F72 
 3838      745F6D61 
 3838      736B00
 3839              	.LASF14:
 3840 007e 756E7369 		.ascii	"unsigned int\000"
 3840      676E6564 
 3840      20696E74 
 3840      00
 3841              	.LASF52:
 3842 008b 725F6F76 		.ascii	"r_override\000"
 3842      65727269 
 3842      646500
 3843              	.LASF94:
 3844 0096 6C617374 		.ascii	"last_s_override\000"
 3844      5F735F6F 
 3844      76657272 
 3844      69646500 
 3845              	.LASF8:
 3846 00a6 5F5F696E 		.ascii	"__int32_t\000"
 3846      7433325F 
 3846      7400
 3847              	.LASF109:
 3848 00b0 7379735F 		.ascii	"sys_probe_state\000"
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 84


 3848      70726F62 
 3848      655F7374 
 3848      61746500 
 3849              	.LASF124:
 3850 00c0 7265706F 		.ascii	"report_feedback_message\000"
 3850      72745F66 
 3850      65656462 
 3850      61636B5F 
 3850      6D657373 
 3851              	.LASF31:
 3852 00d8 73746570 		.ascii	"stepper_idle_lock_time\000"
 3852      7065725F 
 3852      69646C65 
 3852      5F6C6F63 
 3852      6B5F7469 
 3853              	.LASF81:
 3854 00ef 6D6F6461 		.ascii	"modal\000"
 3854      6C00
 3855              	.LASF68:
 3856 00f5 70726F67 		.ascii	"programmed_rate\000"
 3856      72616D6D 
 3856      65645F72 
 3856      61746500 
 3857              	.LASF34:
 3858 0105 6172635F 		.ascii	"arc_tolerance\000"
 3858      746F6C65 
 3858      72616E63 
 3858      6500
 3859              	.LASF145:
 3860 0113 67635F65 		.ascii	"gc_execute_line\000"
 3860      78656375 
 3860      74655F6C 
 3860      696E6500 
 3861              	.LASF79:
 3862 0123 7370696E 		.ascii	"spindle\000"
 3862      646C6500 
 3863              	.LASF148:
 3864 012b 70726F74 		.ascii	"protocol.c\000"
 3864      6F636F6C 
 3864      2E6300
 3865              	.LASF140:
 3866 0136 6C63645F 		.ascii	"lcd_report_realtime\000"
 3866      7265706F 
 3866      72745F72 
 3866      65616C74 
 3866      696D6500 
 3867              	.LASF149:
 3868 014a 433A5C55 		.ascii	"C:\\Users\\miker\\Documents\\My Libraries\\Code_Rep"
 3868      73657273 
 3868      5C6D696B 
 3868      65725C44 
 3868      6F63756D 
 3869 0178 6F5C5053 		.ascii	"o\\PSoC_Grbl\\PSoC_Grbl.cydsn\000"
 3869      6F435F47 
 3869      72626C5C 
 3869      50536F43 
 3869      5F477262 
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 85


 3870              	.LASF61:
 3871 0194 64697265 		.ascii	"direction_bits\000"
 3871      6374696F 
 3871      6E5F6269 
 3871      747300
 3872              	.LASF26:
 3873 01a3 61636365 		.ascii	"acceleration\000"
 3873      6C657261 
 3873      74696F6E 
 3873      00
 3874              	.LASF40:
 3875 01b0 686F6D69 		.ascii	"homing_seek_rate\000"
 3875      6E675F73 
 3875      65656B5F 
 3875      72617465 
 3875      00
 3876              	.LASF134:
 3877 01c1 706C616E 		.ascii	"plan_sync_position\000"
 3877      5F73796E 
 3877      635F706F 
 3877      73697469 
 3877      6F6E00
 3878              	.LASF19:
 3879 01d4 75696E74 		.ascii	"uint32_t\000"
 3879      33325F74 
 3879      00
 3880              	.LASF15:
 3881 01dd 696E7438 		.ascii	"int8_t\000"
 3881      5F7400
 3882              	.LASF39:
 3883 01e4 686F6D69 		.ascii	"homing_feed_rate\000"
 3883      6E675F66 
 3883      6565645F 
 3883      72617465 
 3883      00
 3884              	.LASF63:
 3885 01f5 656E7472 		.ascii	"entry_speed_sqr\000"
 3885      795F7370 
 3885      6565645F 
 3885      73717200 
 3886              	.LASF59:
 3887 0205 73746570 		.ascii	"steps\000"
 3887      7300
 3888              	.LASF0:
 3889 020b 666C6F61 		.ascii	"float\000"
 3889      7400
 3890              	.LASF143:
 3891 0211 7265706F 		.ascii	"report_status_message\000"
 3891      72745F73 
 3891      74617475 
 3891      735F6D65 
 3891      73736167 
 3892              	.LASF137:
 3893 0227 73745F67 		.ascii	"st_go_idle\000"
 3893      6F5F6964 
 3893      6C6500
 3894              	.LASF150:
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 86


 3895 0232 70726F74 		.ascii	"protocol_exec_rt_suspend\000"
 3895      6F636F6C 
 3895      5F657865 
 3895      635F7274 
 3895      5F737573 
 3896              	.LASF138:
 3897 024b 73797374 		.ascii	"system_check_safety_door_ajar\000"
 3897      656D5F63 
 3897      6865636B 
 3897      5F736166 
 3897      6574795F 
 3898              	.LASF13:
 3899 0269 6C6F6E67 		.ascii	"long long unsigned int\000"
 3899      206C6F6E 
 3899      6720756E 
 3899      7369676E 
 3899      65642069 
 3900              	.LASF141:
 3901 0280 6C696D69 		.ascii	"limits_get_state\000"
 3901      74735F67 
 3901      65745F73 
 3901      74617465 
 3901      00
 3902              	.LASF51:
 3903 0291 665F6F76 		.ascii	"f_override\000"
 3903      65727269 
 3903      646500
 3904              	.LASF99:
 3905 029c 70726F74 		.ascii	"protocol_execute_realtime\000"
 3905      6F636F6C 
 3905      5F657865 
 3905      63757465 
 3905      5F726561 
 3906              	.LASF6:
 3907 02b6 5F5F7569 		.ascii	"__uint16_t\000"
 3907      6E743136 
 3907      5F7400
 3908              	.LASF139:
 3909 02c1 64656C61 		.ascii	"delay_sec\000"
 3909      795F7365 
 3909      6300
 3910              	.LASF54:
 3911 02cb 7370696E 		.ascii	"spindle_stop_ovr\000"
 3911      646C655F 
 3911      73746F70 
 3911      5F6F7672 
 3911      00
 3912              	.LASF122:
 3913 02dc 73797374 		.ascii	"system_clear_exec_accessory_overrides\000"
 3913      656D5F63 
 3913      6C656172 
 3913      5F657865 
 3913      635F6163 
 3914              	.LASF146:
 3915 0302 73657269 		.ascii	"serial_read\000"
 3915      616C5F72 
 3915      65616400 
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 87


 3916              	.LASF45:
 3917 030e 61626F72 		.ascii	"abort\000"
 3917      7400
 3918              	.LASF78:
 3919 0314 636F6F6C 		.ascii	"coolant\000"
 3919      616E7400 
 3920              	.LASF64:
 3921 031c 6D61785F 		.ascii	"max_entry_speed_sqr\000"
 3921      656E7472 
 3921      795F7370 
 3921      6565645F 
 3921      73717200 
 3922              	.LASF75:
 3923 0330 746F6F6C 		.ascii	"tool_length\000"
 3923      5F6C656E 
 3923      67746800 
 3924              	.LASF42:
 3925 033c 686F6D69 		.ascii	"homing_pulloff\000"
 3925      6E675F70 
 3925      756C6C6F 
 3925      666600
 3926              	.LASF82:
 3927 034b 746F6F6C 		.ascii	"tool\000"
 3927      00
 3928              	.LASF115:
 3929 0350 65786563 		.ascii	"exec_lcd_status\000"
 3929      5F6C6364 
 3929      5F737461 
 3929      74757300 
 3930              	.LASF46:
 3931 0360 73757370 		.ascii	"suspend\000"
 3931      656E6400 
 3932              	.LASF74:
 3933 0368 706C616E 		.ascii	"plane_select\000"
 3933      655F7365 
 3933      6C656374 
 3933      00
 3934              	.LASF110:
 3935 0375 7379735F 		.ascii	"sys_rt_exec_state\000"
 3935      72745F65 
 3935      7865635F 
 3935      73746174 
 3935      6500
 3936              	.LASF136:
 3937 0387 7370696E 		.ascii	"spindle_set_state\000"
 3937      646C655F 
 3937      7365745F 
 3937      73746174 
 3937      6500
 3938              	.LASF126:
 3939 0399 73797374 		.ascii	"system_clear_exec_alarm\000"
 3939      656D5F63 
 3939      6C656172 
 3939      5F657865 
 3939      635F616C 
 3940              	.LASF121:
 3941 03b1 636F6F6C 		.ascii	"coolant_set_state\000"
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 88


 3941      616E745F 
 3941      7365745F 
 3941      73746174 
 3941      6500
 3942              	.LASF76:
 3943 03c3 636F6F72 		.ascii	"coord_select\000"
 3943      645F7365 
 3943      6C656374 
 3943      00
 3944              	.LASF97:
 3945 03d0 72657374 		.ascii	"restore_condition\000"
 3945      6F72655F 
 3945      636F6E64 
 3945      6974696F 
 3945      6E00
 3946              	.LASF106:
 3947 03e2 73657474 		.ascii	"settings\000"
 3947      696E6773 
 3947      00
 3948              	.LASF27:
 3949 03eb 6D61785F 		.ascii	"max_travel\000"
 3949      74726176 
 3949      656C00
 3950              	.LASF21:
 3951 03f6 63686172 		.ascii	"char\000"
 3951      00
 3952              	.LASF87:
 3953 03fb 746F6F6C 		.ascii	"tool_length_offset\000"
 3953      5F6C656E 
 3953      6774685F 
 3953      6F666673 
 3953      657400
 3954              	.LASF35:
 3955 040e 72706D5F 		.ascii	"rpm_max\000"
 3955      6D617800 
 3956              	.LASF128:
 3957 0416 73745F75 		.ascii	"st_update_plan_block_parameters\000"
 3957      70646174 
 3957      655F706C 
 3957      616E5F62 
 3957      6C6F636B 
 3958              	.LASF57:
 3959 0436 7370696E 		.ascii	"spindle_speed\000"
 3959      646C655F 
 3959      73706565 
 3959      6400
 3960              	.LASF60:
 3961 0444 73746570 		.ascii	"step_event_count\000"
 3961      5F657665 
 3961      6E745F63 
 3961      6F756E74 
 3961      00
 3962              	.LASF55:
 3963 0455 7265706F 		.ascii	"report_ovr_counter\000"
 3963      72745F6F 
 3963      76725F63 
 3963      6F756E74 
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 89


 3963      657200
 3964              	.LASF133:
 3965 0468 67635F73 		.ascii	"gc_sync_position\000"
 3965      796E635F 
 3965      706F7369 
 3965      74696F6E 
 3965      00
 3966              	.LASF53:
 3967 0479 7370696E 		.ascii	"spindle_speed_ovr\000"
 3967      646C655F 
 3967      73706565 
 3967      645F6F76 
 3967      7200
 3968              	.LASF16:
 3969 048b 75696E74 		.ascii	"uint8_t\000"
 3969      385F7400 
 3970              	.LASF88:
 3971 0493 70617273 		.ascii	"parser_state_t\000"
 3971      65725F73 
 3971      74617465 
 3971      5F7400
 3972              	.LASF117:
 3973 04a2 73797374 		.ascii	"system_set_exec_state_flag\000"
 3973      656D5F73 
 3973      65745F65 
 3973      7865635F 
 3973      73746174 
 3974              	.LASF12:
 3975 04bd 6C6F6E67 		.ascii	"long long int\000"
 3975      206C6F6E 
 3975      6720696E 
 3975      7400
 3976              	.LASF108:
 3977 04cb 7379735F 		.ascii	"sys_probe_position\000"
 3977      70726F62 
 3977      655F706F 
 3977      73697469 
 3977      6F6E00
 3978              	.LASF93:
 3979 04de 6E65775F 		.ascii	"new_r_override\000"
 3979      725F6F76 
 3979      65727269 
 3979      646500
 3980              	.LASF85:
 3981 04ed 636F6F72 		.ascii	"coord_system\000"
 3981      645F7379 
 3981      7374656D 
 3981      00
 3982              	.LASF103:
 3983 04fa 70726F74 		.ascii	"protocol_buffer_synchronize\000"
 3983      6F636F6C 
 3983      5F627566 
 3983      6665725F 
 3983      73796E63 
 3984              	.LASF24:
 3985 0516 73746570 		.ascii	"steps_per_mm\000"
 3985      735F7065 
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 90


 3985      725F6D6D 
 3985      00
 3986              	.LASF83:
 3987 0523 6C696E65 		.ascii	"line_number\000"
 3987      5F6E756D 
 3987      62657200 
 3988              	.LASF100:
 3989 052f 70726F74 		.ascii	"protocol_main_loop\000"
 3989      6F636F6C 
 3989      5F6D6169 
 3989      6E5F6C6F 
 3989      6F7000
 3990              	.LASF114:
 3991 0542 67635F73 		.ascii	"gc_state\000"
 3991      74617465 
 3991      00
 3992              	.LASF120:
 3993 054b 706C616E 		.ascii	"plan_cycle_reinitialize\000"
 3993      5F637963 
 3993      6C655F72 
 3993      65696E69 
 3993      7469616C 
 3994              	.LASF95:
 3995 0563 636F6F6C 		.ascii	"coolant_state\000"
 3995      616E745F 
 3995      73746174 
 3995      6500
 3996              	.LASF107:
 3997 0571 7379735F 		.ascii	"sys_position\000"
 3997      706F7369 
 3997      74696F6E 
 3997      00
 3998              	.LASF98:
 3999 057e 72657374 		.ascii	"restore_spindle_speed\000"
 3999      6F72655F 
 3999      7370696E 
 3999      646C655F 
 3999      73706565 
 4000              	.LASF119:
 4001 0594 706C616E 		.ascii	"plan_update_velocity_profile_parameters\000"
 4001      5F757064 
 4001      6174655F 
 4001      76656C6F 
 4001      63697479 
 4002              	.LASF2:
 4003 05bc 5F5F696E 		.ascii	"__int8_t\000"
 4003      74385F74 
 4003      00
 4004              	.LASF29:
 4005 05c5 73746570 		.ascii	"step_invert_mask\000"
 4005      5F696E76 
 4005      6572745F 
 4005      6D61736B 
 4005      00
 4006              	.LASF89:
 4007 05d6 70726F74 		.ascii	"protocol_auto_cycle_start\000"
 4007      6F636F6C 
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 91


 4007      5F617574 
 4007      6F5F6379 
 4007      636C655F 
 4008              	.LASF23:
 4009 05f0 6C6F6E67 		.ascii	"long double\000"
 4009      20646F75 
 4009      626C6500 
 4010              	.LASF17:
 4011 05fc 75696E74 		.ascii	"uint16_t\000"
 4011      31365F74 
 4011      00
 4012              	.LASF25:
 4013 0605 6D61785F 		.ascii	"max_rate\000"
 4013      72617465 
 4013      00
 4014              	.LASF112:
 4015 060e 7379735F 		.ascii	"sys_rt_exec_motion_override\000"
 4015      72745F65 
 4015      7865635F 
 4015      6D6F7469 
 4015      6F6E5F6F 
 4016              	.LASF48:
 4017 062a 73746570 		.ascii	"step_control\000"
 4017      5F636F6E 
 4017      74726F6C 
 4017      00
 4018              	.LASF67:
 4019 0637 72617069 		.ascii	"rapid_rate\000"
 4019      645F7261 
 4019      746500
 4020              	.LASF5:
 4021 0642 73686F72 		.ascii	"short int\000"
 4021      7420696E 
 4021      7400
 4022              	.LASF92:
 4023 064c 6E65775F 		.ascii	"new_f_override\000"
 4023      665F6F76 
 4023      65727269 
 4023      646500
 4024              	.LASF9:
 4025 065b 6C6F6E67 		.ascii	"long int\000"
 4025      20696E74 
 4025      00
 4026              	.LASF105:
 4027 0664 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4027      52784275 
 4027      66666572 
 4027      00
 4028              	.LASF144:
 4029 0671 73797374 		.ascii	"system_execute_line\000"
 4029      656D5F65 
 4029      78656375 
 4029      74655F6C 
 4029      696E6500 
 4030              	.LASF58:
 4031 0685 73797374 		.ascii	"system_t\000"
 4031      656D5F74 
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 92


 4031      00
 4032              	.LASF71:
 4033 068e 66656564 		.ascii	"feed_rate\000"
 4033      5F726174 
 4033      6500
 4034              	.LASF56:
 4035 0698 7265706F 		.ascii	"report_wco_counter\000"
 4035      72745F77 
 4035      636F5F63 
 4035      6F756E74 
 4035      657200
 4036              	.LASF47:
 4037 06ab 736F6674 		.ascii	"soft_limit\000"
 4037      5F6C696D 
 4037      697400
 4038              	.LASF129:
 4039 06b6 73745F70 		.ascii	"st_prep_buffer\000"
 4039      7265705F 
 4039      62756666 
 4039      657200
 4040              	.LASF125:
 4041 06c5 73797374 		.ascii	"system_clear_exec_state_flag\000"
 4041      656D5F63 
 4041      6C656172 
 4041      5F657865 
 4041      635F7374 
 4042              	.LASF131:
 4043 06e2 706C616E 		.ascii	"plan_reset\000"
 4043      5F726573 
 4043      657400
 4044              	.LASF96:
 4045 06ed 626C6F63 		.ascii	"block\000"
 4045      6B00
 4046              	.LASF3:
 4047 06f3 5F5F7569 		.ascii	"__uint8_t\000"
 4047      6E74385F 
 4047      7400
 4048              	.LASF49:
 4049 06fd 70726F62 		.ascii	"probe_succeeded\000"
 4049      655F7375 
 4049      63636565 
 4049      64656400 
 4050              	.LASF113:
 4051 070d 7379735F 		.ascii	"sys_rt_exec_accessory_override\000"
 4051      72745F65 
 4051      7865635F 
 4051      61636365 
 4051      73736F72 
 4052              	.LASF70:
 4053 072c 6D6F7469 		.ascii	"motion\000"
 4053      6F6E00
 4054              	.LASF22:
 4055 0733 73697A65 		.ascii	"sizetype\000"
 4055      74797065 
 4055      00
 4056              	.LASF11:
 4057 073c 6C6F6E67 		.ascii	"long unsigned int\000"
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 93


 4057      20756E73 
 4057      69676E65 
 4057      6420696E 
 4057      7400
 4058              	.LASF18:
 4059 074e 696E7433 		.ascii	"int32_t\000"
 4059      325F7400 
 4060              	.LASF86:
 4061 0756 636F6F72 		.ascii	"coord_offset\000"
 4061      645F6F66 
 4061      66736574 
 4061      00
 4062              	.LASF116:
 4063 0763 706C616E 		.ascii	"plan_get_current_block\000"
 4063      5F676574 
 4063      5F637572 
 4063      72656E74 
 4063      5F626C6F 
 4064              	.LASF91:
 4065 077a 72745F65 		.ascii	"rt_exec\000"
 4065      78656300 
 4066              	.LASF4:
 4067 0782 756E7369 		.ascii	"unsigned char\000"
 4067      676E6564 
 4067      20636861 
 4067      7200
 4068              	.LASF142:
 4069 0790 73797374 		.ascii	"system_execute_startup\000"
 4069      656D5F65 
 4069      78656375 
 4069      74655F73 
 4069      74617274 
 4070              	.LASF10:
 4071 07a7 5F5F7569 		.ascii	"__uint32_t\000"
 4071      6E743332 
 4071      5F7400
 4072              	.LASF147:
 4073 07b2 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 4073      4320342E 
 4073      392E3320 
 4073      32303135 
 4073      30333033 
 4074 07e5 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 4074      20726576 
 4074      6973696F 
 4074      6E203232 
 4074      31323230 
 4075 0818 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 4075      66756E63 
 4075      74696F6E 
 4075      2D736563 
 4075      74696F6E 
 4076              	.LASF127:
 4077 0840 7265706F 		.ascii	"report_realtime_status\000"
 4077      72745F72 
 4077      65616C74 
 4077      696D655F 
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 94


 4077      73746174 
 4078              	.LASF104:
 4079 0857 6C696E65 		.ascii	"line\000"
 4079      00
 4080              	.LASF132:
 4081 085c 73745F72 		.ascii	"st_reset\000"
 4081      65736574 
 4081      00
 4082              	.LASF123:
 4083 0865 7265706F 		.ascii	"report_alarm_message\000"
 4083      72745F61 
 4083      6C61726D 
 4083      5F6D6573 
 4083      73616765 
 4084              	.LASF130:
 4085 087a 73745F77 		.ascii	"st_wake_up\000"
 4085      616B655F 
 4085      757000
 4086              	.LASF101:
 4087 0885 6C696E65 		.ascii	"line_flags\000"
 4087      5F666C61 
 4087      677300
 4088              	.LASF44:
 4089 0890 73746174 		.ascii	"state\000"
 4089      6500
 4090              	.LASF111:
 4091 0896 7379735F 		.ascii	"sys_rt_exec_alarm\000"
 4091      72745F65 
 4091      7865635F 
 4091      616C6172 
 4091      6D00
 4092              	.LASF80:
 4093 08a8 67635F6D 		.ascii	"gc_modal_t\000"
 4093      6F64616C 
 4093      5F7400
 4094              	.LASF72:
 4095 08b3 756E6974 		.ascii	"units\000"
 4095      7300
 4096              	.LASF65:
 4097 08b9 6D696C6C 		.ascii	"millimeters\000"
 4097      696D6574 
 4097      65727300 
 4098              	.LASF1:
 4099 08c5 7369676E 		.ascii	"signed char\000"
 4099      65642063 
 4099      68617200 
 4100              	.LASF41:
 4101 08d1 686F6D69 		.ascii	"homing_debounce_delay\000"
 4101      6E675F64 
 4101      65626F75 
 4101      6E63655F 
 4101      64656C61 
 4102              	.LASF7:
 4103 08e7 73686F72 		.ascii	"short unsigned int\000"
 4103      7420756E 
 4103      7369676E 
 4103      65642069 
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 95


 4103      6E7400
 4104              	.LASF36:
 4105 08fa 72706D5F 		.ascii	"rpm_min\000"
 4105      6D696E00 
 4106              	.LASF43:
 4107 0902 73657474 		.ascii	"settings_t\000"
 4107      696E6773 
 4107      5F7400
 4108              	.LASF118:
 4109 090d 73797374 		.ascii	"system_clear_exec_motion_overrides\000"
 4109      656D5F63 
 4109      6C656172 
 4109      5F657865 
 4109      635F6D6F 
 4110              	.LASF20:
 4111 0930 646F7562 		.ascii	"double\000"
 4111      6C6500
 4112              	.LASF38:
 4113 0937 686F6D69 		.ascii	"homing_dir_mask\000"
 4113      6E675F64 
 4113      69725F6D 
 4113      61736B00 
 4114              	.LASF135:
 4115 0947 73797374 		.ascii	"system_set_exec_accessory_override_flag\000"
 4115      656D5F73 
 4115      65745F65 
 4115      7865635F 
 4115      61636365 
 4116              	.LASF33:
 4117 096f 6A756E63 		.ascii	"junction_deviation\000"
 4117      74696F6E 
 4117      5F646576 
 4117      69617469 
 4117      6F6E00
 4118              	.LASF50:
 4119 0982 686F6D69 		.ascii	"homing_axis_lock\000"
 4119      6E675F61 
 4119      7869735F 
 4119      6C6F636B 
 4119      00
 4120              	.LASF62:
 4121 0993 636F6E64 		.ascii	"condition\000"
 4121      6974696F 
 4121      6E00
 4122              	.LASF102:
 4123 099d 63686172 		.ascii	"char_counter\000"
 4123      5F636F75 
 4123      6E746572 
 4123      00
 4124              	.LASF84:
 4125 09aa 706F7369 		.ascii	"position\000"
 4125      74696F6E 
 4125      00
 4126              	.LASF30:
 4127 09b3 6469725F 		.ascii	"dir_invert_mask\000"
 4127      696E7665 
 4127      72745F6D 
ARM GAS  C:\Users\miker\AppData\Local\Temp\cctiEUuZ.s 			page 96


 4127      61736B00 
 4128              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
