ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"limits.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.limit_isr_handler,"ax",%progbits
  19              		.align	2
  20              		.global	limit_isr_handler
  21              		.thumb
  22              		.thumb_func
  23              		.type	limit_isr_handler, %function
  24              	limit_isr_handler:
  25              	.LFB66:
  26              		.file 1 "limits.c"
   1:limits.c      **** /*
   2:limits.c      ****   limits.c - code pertaining to limit-switches and performing the homing cycle
   3:limits.c      ****   Part of Grbl
   4:limits.c      **** 
   5:limits.c      ****   Copyright (c) 2012-2016 Sungeun K. Jeon for Gnea Research LLC
   6:limits.c      ****   Copyright (c) 2009-2011 Simen Svale Skogsrud
   7:limits.c      **** 
   8:limits.c      ****   Grbl is free software: you can redistribute it and/or modify
   9:limits.c      ****   it under the terms of the GNU General Public License as published by
  10:limits.c      ****   the Free Software Foundation, either version 3 of the License, or
  11:limits.c      ****   (at your option) any later version.
  12:limits.c      **** 
  13:limits.c      ****   Grbl is distributed in the hope that it will be useful,
  14:limits.c      ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:limits.c      ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:limits.c      ****   GNU General Public License for more details.
  17:limits.c      **** 
  18:limits.c      ****   You should have received a copy of the GNU General Public License
  19:limits.c      ****   along with Grbl.  If not, see <http://www.gnu.org/licenses/>.
  20:limits.c      **** */
  21:limits.c      **** 
  22:limits.c      **** #include "grbl.h"
  23:limits.c      **** 
  24:limits.c      **** 
  25:limits.c      **** // Homing axis search distance multiplier. Computed by this value times the cycle travel.
  26:limits.c      **** #ifndef HOMING_AXIS_SEARCH_SCALAR
  27:limits.c      ****   #define HOMING_AXIS_SEARCH_SCALAR  1.5 // Must be > 1 to ensure limit switch will be engaged.
  28:limits.c      **** #endif
  29:limits.c      **** #ifndef HOMING_AXIS_LOCATE_SCALAR
  30:limits.c      ****   #define HOMING_AXIS_LOCATE_SCALAR  5.0 // Must be > 1 to ensure limit switch is cleared.
  31:limits.c      **** #endif
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 2


  32:limits.c      **** 
  33:limits.c      **** // PSoc Complete rewrire.  Pins and debouncing are setup on the PSoc Schematic
  34:limits.c      **** void limits_init() 
  35:limits.c      **** { 
  36:limits.c      **** 
  37:limits.c      ****   if (bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE)) {
  38:limits.c      ****     Status_Limit_InterruptEnable();
  39:limits.c      ****     isr_Limits_StartEx(limit_isr_handler);
  40:limits.c      ****   } else {
  41:limits.c      ****     
  42:limits.c      ****     limits_disable(); 
  43:limits.c      ****   }
  44:limits.c      **** }
  45:limits.c      **** 
  46:limits.c      **** 
  47:limits.c      **** // complete PSoc rewrite
  48:limits.c      **** void limits_disable()
  49:limits.c      **** {
  50:limits.c      ****   Status_Limit_InterruptDisable();
  51:limits.c      ****   isr_Limits_Stop();
  52:limits.c      **** }
  53:limits.c      **** 
  54:limits.c      **** 
  55:limits.c      **** // Returns limit state as a bit-wise uint8 variable. Each bit indicates an axis limit, where
  56:limits.c      **** // triggered is 1 and not triggered is 0. Invert mask is applied. Axes are defined by their
  57:limits.c      **** // number in bit position, i.e. Z_AXIS is (1<<2) or bit 2, and Y_AXIS is (1<<1) or bit 1.
  58:limits.c      **** // Complete PSoC Rewrite
  59:limits.c      **** uint8_t limits_get_state()
  60:limits.c      **** {  
  61:limits.c      ****   return Status_Limit_Read(); 
  62:limits.c      **** }
  63:limits.c      **** 
  64:limits.c      **** // PSoc Change
  65:limits.c      **** void limit_isr_handler() // ISR(LIMIT_INT_vect) // DEFAULT: Limit pin change interrupt process. 
  66:limits.c      ****   {
  27              		.loc 1 66 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 3, -8
  34              		.cfi_offset 14, -4
  67:limits.c      ****     // Ignore limit switches if already in an alarm state or in-process of executing an alarm.
  68:limits.c      ****     // When in the alarm state, Grbl should have been reset or will force a reset, so any pending 
  69:limits.c      ****     // moves in the planner and serial buffers are all cleared and newly sent blocks will be 
  70:limits.c      ****     // locked out until a homing cycle or a kill lock command. Allows the user to disable the hard
  71:limits.c      ****     // limit setting if their limits are constantly triggering after a reset and move their axes.
  72:limits.c      ****     if (sys.state != STATE_ALARM) { 
  35              		.loc 1 72 0
  36 0002 074B     		ldr	r3, .L4
  37 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  38 0006 012B     		cmp	r3, #1
  39 0008 09D0     		beq	.L1
  73:limits.c      ****       if (!(sys_rt_exec_alarm)) {
  40              		.loc 1 73 0
  41 000a 064B     		ldr	r3, .L4+4
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 3


  42 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  43 000e 13F0FF0F 		tst	r3, #255
  44 0012 04D1     		bne	.L1
  74:limits.c      ****         #ifdef HARD_LIMIT_FORCE_STATE_CHECK
  75:limits.c      ****           // Check limit pin state. 
  76:limits.c      ****           if (limits_get_state()) {
  77:limits.c      ****             mc_reset(); // Initiate system kill.
  78:limits.c      ****             system_set_exec_alarm_flag((EXEC_ALARM_HARD_LIMIT|EXEC_CRITICAL_EVENT)); // Indicate ha
  79:limits.c      ****           }
  80:limits.c      ****         #else
  81:limits.c      ****           mc_reset(); // Initiate system kill.
  45              		.loc 1 81 0
  46 0014 FFF7FEFF 		bl	mc_reset
  47              	.LVL0:
  82:limits.c      ****           system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
  48              		.loc 1 82 0
  49 0018 0120     		movs	r0, #1
  50 001a FFF7FEFF 		bl	system_set_exec_alarm
  51              	.LVL1:
  52              	.L1:
  53 001e 08BD     		pop	{r3, pc}
  54              	.L5:
  55              		.align	2
  56              	.L4:
  57 0020 00000000 		.word	sys
  58 0024 00000000 		.word	sys_rt_exec_alarm
  59              		.cfi_endproc
  60              	.LFE66:
  61              		.size	limit_isr_handler, .-limit_isr_handler
  62              		.section	.text.limits_disable,"ax",%progbits
  63              		.align	2
  64              		.global	limits_disable
  65              		.thumb
  66              		.thumb_func
  67              		.type	limits_disable, %function
  68              	limits_disable:
  69              	.LFB64:
  49:limits.c      ****   Status_Limit_InterruptDisable();
  70              		.loc 1 49 0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74 0000 08B5     		push	{r3, lr}
  75              		.cfi_def_cfa_offset 8
  76              		.cfi_offset 3, -8
  77              		.cfi_offset 14, -4
  50:limits.c      ****   isr_Limits_Stop();
  78              		.loc 1 50 0
  79 0002 FFF7FEFF 		bl	Status_Limit_InterruptDisable
  80              	.LVL2:
  51:limits.c      **** }
  81              		.loc 1 51 0
  82 0006 FFF7FEFF 		bl	isr_Limits_Stop
  83              	.LVL3:
  84 000a 08BD     		pop	{r3, pc}
  85              		.cfi_endproc
  86              	.LFE64:
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 4


  87              		.size	limits_disable, .-limits_disable
  88              		.section	.text.limits_init,"ax",%progbits
  89              		.align	2
  90              		.global	limits_init
  91              		.thumb
  92              		.thumb_func
  93              		.type	limits_init, %function
  94              	limits_init:
  95              	.LFB63:
  35:limits.c      **** 
  96              		.loc 1 35 0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100 0000 08B5     		push	{r3, lr}
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 3, -8
 103              		.cfi_offset 14, -4
  37:limits.c      ****     Status_Limit_InterruptEnable();
 104              		.loc 1 37 0
 105 0002 074B     		ldr	r3, .L12
 106 0004 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
 107 0008 13F0080F 		tst	r3, #8
 108 000c 05D0     		beq	.L9
  38:limits.c      ****     isr_Limits_StartEx(limit_isr_handler);
 109              		.loc 1 38 0
 110 000e FFF7FEFF 		bl	Status_Limit_InterruptEnable
 111              	.LVL4:
  39:limits.c      ****   } else {
 112              		.loc 1 39 0
 113 0012 0448     		ldr	r0, .L12+4
 114 0014 FFF7FEFF 		bl	isr_Limits_StartEx
 115              	.LVL5:
 116 0018 08BD     		pop	{r3, pc}
 117              	.L9:
  42:limits.c      ****   }
 118              		.loc 1 42 0
 119 001a FFF7FEFF 		bl	limits_disable
 120              	.LVL6:
 121 001e 08BD     		pop	{r3, pc}
 122              	.L13:
 123              		.align	2
 124              	.L12:
 125 0020 00000000 		.word	settings
 126 0024 00000000 		.word	limit_isr_handler
 127              		.cfi_endproc
 128              	.LFE63:
 129              		.size	limits_init, .-limits_init
 130              		.section	.text.limits_get_state,"ax",%progbits
 131              		.align	2
 132              		.global	limits_get_state
 133              		.thumb
 134              		.thumb_func
 135              		.type	limits_get_state, %function
 136              	limits_get_state:
 137              	.LFB65:
  60:limits.c      ****   return Status_Limit_Read(); 
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 5


 138              		.loc 1 60 0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142 0000 08B5     		push	{r3, lr}
 143              		.cfi_def_cfa_offset 8
 144              		.cfi_offset 3, -8
 145              		.cfi_offset 14, -4
  61:limits.c      **** }
 146              		.loc 1 61 0
 147 0002 FFF7FEFF 		bl	Status_Limit_Read
 148              	.LVL7:
  62:limits.c      **** 
 149              		.loc 1 62 0
 150 0006 08BD     		pop	{r3, pc}
 151              		.cfi_endproc
 152              	.LFE65:
 153              		.size	limits_get_state, .-limits_get_state
 154              		.global	__aeabi_f2d
 155              		.global	__aeabi_dmul
 156              		.global	__aeabi_dcmpgt
 157              		.global	__aeabi_d2f
 158              		.global	__aeabi_ui2d
 159              		.global	__aeabi_fmul
 160              		.global	__aeabi_fadd
 161              		.section	.text.limits_go_home,"ax",%progbits
 162              		.align	2
 163              		.global	limits_go_home
 164              		.thumb
 165              		.thumb_func
 166              		.type	limits_go_home, %function
 167              	limits_go_home:
 168              	.LFB67:
  83:limits.c      ****         #endif
  84:limits.c      ****       }
  85:limits.c      ****     }
  86:limits.c      ****   }  
  87:limits.c      **** 
  88:limits.c      **** // Homes the specified cycle axes, sets the machine position, and performs a pull-off motion after
  89:limits.c      **** // completing. Homing is a special motion case, which involves rapid uncontrolled stops to locate
  90:limits.c      **** // the trigger point of the limit switches. The rapid stops are handled by a system level axis lock
  91:limits.c      **** // mask, which prevents the stepper algorithm from executing step pulses. Homing motions typically
  92:limits.c      **** // circumvent the processes for executing motions in normal operation.
  93:limits.c      **** // NOTE: Only the abort realtime command can interrupt this process.
  94:limits.c      **** // TODO: Move limit pin-specific calls to a general function for portability.
  95:limits.c      **** void limits_go_home(uint8_t cycle_mask)
  96:limits.c      **** {
 169              		.loc 1 96 0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 32
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173              	.LVL8:
  97:limits.c      ****   if (sys.abort) { return; } // Block if system reset has been issued.
 174              		.loc 1 97 0
 175 0000 A74B     		ldr	r3, .L53
 176 0002 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 177 0004 002B     		cmp	r3, #0
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 6


 178 0006 40F04A81 		bne	.L52
  96:limits.c      ****   if (sys.abort) { return; } // Block if system reset has been issued.
 179              		.loc 1 96 0
 180 000a 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 181              		.cfi_def_cfa_offset 36
 182              		.cfi_offset 4, -36
 183              		.cfi_offset 5, -32
 184              		.cfi_offset 6, -28
 185              		.cfi_offset 7, -24
 186              		.cfi_offset 8, -20
 187              		.cfi_offset 9, -16
 188              		.cfi_offset 10, -12
 189              		.cfi_offset 11, -8
 190              		.cfi_offset 14, -4
 191 000e 89B0     		sub	sp, sp, #36
 192              		.cfi_def_cfa_offset 72
 193 0010 8046     		mov	r8, r0
 194              	.LVL9:
  98:limits.c      **** 
  99:limits.c      ****   // Initialize plan data struct for homing motion. Spindle and coolant are disabled.
 100:limits.c      ****   plan_line_data_t plan_data;
 101:limits.c      ****   plan_line_data_t *pl_data = &plan_data;
 102:limits.c      ****   memset(pl_data,0,sizeof(plan_line_data_t));
 195              		.loc 1 102 0
 196 0012 0593     		str	r3, [sp, #20]
 197 0014 0693     		str	r3, [sp, #24]
 198 0016 0793     		str	r3, [sp, #28]
 103:limits.c      ****   pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 199              		.loc 1 103 0
 200 0018 0622     		movs	r2, #6
 201 001a 8DF81C20 		strb	r2, [sp, #28]
 202              	.LVL10:
 104:limits.c      ****   #ifdef USE_LINE_NUMBERS
 105:limits.c      ****     pl_data->line_number = HOMING_CYCLE_LINE_NUMBER;
 106:limits.c      ****   #endif
 107:limits.c      **** 
 108:limits.c      ****   // Initialize variables used for homing computations.
 109:limits.c      ****   uint8_t n_cycle = (2*N_HOMING_LOCATE_CYCLE+1);
 110:limits.c      ****   uint8_t step_pin[N_AXIS];
 111:limits.c      ****   float target[N_AXIS];
 112:limits.c      ****   float max_travel = 0.0;
 113:limits.c      ****   uint8_t idx;
 114:limits.c      ****   for (idx=0; idx<N_AXIS; idx++) {
 203              		.loc 1 114 0
 204 001e 9A46     		mov	r10, r3
 112:limits.c      ****   uint8_t idx;
 205              		.loc 1 112 0
 206 0020 4FF00009 		mov	r9, #0
 207              		.loc 1 114 0
 208 0024 2CE0     		b	.L18
 209              	.LVL11:
 210              	.L21:
 115:limits.c      ****     // Initialize step pin masks
 116:limits.c      ****     step_pin[idx] = get_step_pin_mask(idx);
 211              		.loc 1 116 0
 212 0026 5046     		mov	r0, r10
 213 0028 FFF7FEFF 		bl	get_step_pin_mask
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 7


 214              	.LVL12:
 215 002c 08AB     		add	r3, sp, #32
 216 002e 5344     		add	r3, r3, r10
 217 0030 03F8100C 		strb	r0, [r3, #-16]
 117:limits.c      ****     #ifdef COREXY
 118:limits.c      ****       if ((idx==A_MOTOR)||(idx==B_MOTOR)) { step_pin[idx] = (get_step_pin_mask(X_AXIS)|get_step_pin
 119:limits.c      ****     #endif
 120:limits.c      **** 
 121:limits.c      ****     if (bit_istrue(cycle_mask,bit(idx))) {
 218              		.loc 1 121 0
 219 0034 48FA0AF3 		asr	r3, r8, r10
 220 0038 13F0010F 		tst	r3, #1
 221 003c 1CD0     		beq	.L19
 122:limits.c      ****       // Set target based on max_travel setting. Ensure homing switches engaged with search scalar.
 123:limits.c      ****       // NOTE: settings.max_travel[] is stored as a negative value.
 124:limits.c      ****       max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 222              		.loc 1 124 0
 223 003e 4846     		mov	r0, r9
 224 0040 FFF7FEFF 		bl	__aeabi_f2d
 225              	.LVL13:
 226 0044 0646     		mov	r6, r0
 227 0046 0F46     		mov	r7, r1
 228 0048 964B     		ldr	r3, .L53+4
 229 004a 03EB8A03 		add	r3, r3, r10, lsl #2
 230 004e 586A     		ldr	r0, [r3, #36]	@ float
 231 0050 FFF7FEFF 		bl	__aeabi_f2d
 232              	.LVL14:
 233 0054 0022     		movs	r2, #0
 234 0056 944B     		ldr	r3, .L53+8
 235 0058 FFF7FEFF 		bl	__aeabi_dmul
 236              	.LVL15:
 237 005c 0446     		mov	r4, r0
 238 005e 0D46     		mov	r5, r1
 239 0060 3046     		mov	r0, r6
 240 0062 3946     		mov	r1, r7
 241 0064 2246     		mov	r2, r4
 242 0066 2B46     		mov	r3, r5
 243 0068 FFF7FEFF 		bl	__aeabi_dcmpgt
 244              	.LVL16:
 245 006c 20B9     		cbnz	r0, .L19
 246              		.loc 1 124 0 is_stmt 0 discriminator 2
 247 006e 2046     		mov	r0, r4
 248 0070 2946     		mov	r1, r5
 249 0072 FFF7FEFF 		bl	__aeabi_d2f
 250              	.LVL17:
 251 0076 8146     		mov	r9, r0
 252              	.LVL18:
 253              	.L19:
 114:limits.c      ****     // Initialize step pin masks
 254              		.loc 1 114 0 is_stmt 1 discriminator 2
 255 0078 0AF1010A 		add	r10, r10, #1
 256              	.LVL19:
 257 007c 5FFA8AFA 		uxtb	r10, r10
 258              	.LVL20:
 259              	.L18:
 114:limits.c      ****     // Initialize step pin masks
 260              		.loc 1 114 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 8


 261 0080 BAF1020F 		cmp	r10, #2
 262 0084 CFD9     		bls	.L21
 263              	.LVL21:
 125:limits.c      ****     }
 126:limits.c      ****   }
 127:limits.c      **** 
 128:limits.c      ****   // Set search mode with approach at seek rate to quickly engage the specified cycle_mask limit sw
 129:limits.c      ****   bool approach = true;
 130:limits.c      ****   float homing_rate = settings.homing_seek_rate;
 264              		.loc 1 130 0 is_stmt 1
 265 0086 874B     		ldr	r3, .L53+4
 266 0088 D3F850B0 		ldr	fp, [r3, #80]	@ float
 267              	.LVL22:
 129:limits.c      ****   float homing_rate = settings.homing_seek_rate;
 268              		.loc 1 129 0
 269 008c 0125     		movs	r5, #1
 109:limits.c      ****   uint8_t step_pin[N_AXIS];
 270              		.loc 1 109 0
 271 008e 4FF0030A 		mov	r10, #3
 272              	.LVL23:
 273 0092 00E0     		b	.L43
 274              	.LVL24:
 275              	.L50:
 131:limits.c      **** 
 132:limits.c      ****   uint8_t limit_state, axislock, n_active_axis;
 133:limits.c      ****   do {
 134:limits.c      **** 
 135:limits.c      ****     system_convert_array_steps_to_mpos(target,sys_position);
 136:limits.c      **** 
 137:limits.c      ****     // Initialize and declare variables needed for homing routine.
 138:limits.c      ****     axislock = 0;
 139:limits.c      ****     n_active_axis = 0;
 140:limits.c      ****     for (idx=0; idx<N_AXIS; idx++) {
 141:limits.c      ****       // Set target location for active axes and setup computation for homing rate.
 142:limits.c      ****       if (bit_istrue(cycle_mask,bit(idx))) {
 143:limits.c      ****         n_active_axis++;
 144:limits.c      ****         #ifdef COREXY
 145:limits.c      ****           if (idx == X_AXIS) {
 146:limits.c      ****             int32_t axis_position = system_convert_corexy_to_y_axis_steps(sys_position);
 147:limits.c      ****             sys_position[A_MOTOR] = axis_position;
 148:limits.c      ****             sys_position[B_MOTOR] = -axis_position;
 149:limits.c      ****           } else if (idx == Y_AXIS) {
 150:limits.c      ****             int32_t axis_position = system_convert_corexy_to_x_axis_steps(sys_position);
 151:limits.c      ****             sys_position[A_MOTOR] = sys_position[B_MOTOR] = axis_position;
 152:limits.c      ****           } else {
 153:limits.c      ****             sys_position[Z_AXIS] = 0;
 154:limits.c      ****           }
 155:limits.c      ****         #else
 156:limits.c      ****           sys_position[idx] = 0;
 157:limits.c      ****         #endif
 158:limits.c      ****         // Set target direction based on cycle mask and homing cycle approach state.
 159:limits.c      ****         // NOTE: This happens to compile smaller than any other implementation tried.
 160:limits.c      ****         if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 161:limits.c      ****           if (approach) { target[idx] = -max_travel; }
 162:limits.c      ****           else { target[idx] = max_travel; }
 163:limits.c      ****         } else {
 164:limits.c      ****           if (approach) { target[idx] = max_travel; }
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 9


 165:limits.c      ****           else { target[idx] = -max_travel; }
 166:limits.c      ****         }
 167:limits.c      ****         // Apply axislock to the step port pins active in this cycle.
 168:limits.c      ****         axislock |= step_pin[idx];
 169:limits.c      ****       }
 170:limits.c      **** 
 171:limits.c      ****     }
 172:limits.c      ****     homing_rate *= sqrt(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at hom
 173:limits.c      ****     sys.homing_axis_lock = axislock;
 174:limits.c      **** 
 175:limits.c      ****     // Perform homing cycle. Planner buffer should be empty, as required to initiate the homing cyc
 176:limits.c      ****     pl_data->feed_rate = homing_rate; // Set current homing rate.
 177:limits.c      ****     plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 178:limits.c      **** 
 179:limits.c      ****     sys.step_control = STEP_CONTROL_EXECUTE_SYS_MOTION; // Set to execute homing motion and clear e
 180:limits.c      ****     st_prep_buffer(); // Prep and fill segment buffer from newly planned block.
 181:limits.c      ****     st_wake_up(); // Initiate motion
 182:limits.c      ****     do {
 183:limits.c      ****       if (approach) {
 184:limits.c      ****         // Check limit state. Lock out cycle axes when they change.
 185:limits.c      ****         limit_state = limits_get_state();
 186:limits.c      ****         for (idx=0; idx<N_AXIS; idx++) {
 187:limits.c      ****           if (axislock & step_pin[idx]) {
 188:limits.c      ****             if (limit_state & (1 << idx)) {
 189:limits.c      ****               #ifdef COREXY
 190:limits.c      ****                 if (idx==Z_AXIS) { axislock &= ~(step_pin[Z_AXIS]); }
 191:limits.c      ****                 else { axislock &= ~(step_pin[A_MOTOR]|step_pin[B_MOTOR]); }
 192:limits.c      ****               #else
 193:limits.c      ****                 axislock &= ~(step_pin[idx]);
 194:limits.c      ****               #endif
 195:limits.c      ****             }
 196:limits.c      ****           }
 197:limits.c      ****         }
 198:limits.c      ****         sys.homing_axis_lock = axislock;
 199:limits.c      ****       }
 200:limits.c      **** 
 201:limits.c      ****       st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 202:limits.c      **** 
 203:limits.c      ****       // Exit routines: No time to run protocol_execute_realtime() in this loop.
 204:limits.c      ****       if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 205:limits.c      ****         uint8_t rt_exec = sys_rt_exec_state;
 206:limits.c      ****         // Homing failure condition: Reset issued during cycle.
 207:limits.c      ****         if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 208:limits.c      ****         // Homing failure condition: Safety door was opened.
 209:limits.c      ****         if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 210:limits.c      ****         // Homing failure condition: Limit switch still engaged after pull-off motion
 211:limits.c      ****         if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMI
 212:limits.c      ****         // Homing failure condition: Limit switch not found during approach.
 213:limits.c      ****         if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL
 214:limits.c      ****         if (sys_rt_exec_alarm) {
 215:limits.c      ****           mc_reset(); // Stop motors, if they are running.
 216:limits.c      ****           protocol_execute_realtime();
 217:limits.c      ****           return;
 218:limits.c      ****         } else {
 219:limits.c      ****           // Pull-off motion complete. Disable CYCLE_STOP from executing.
 220:limits.c      ****           system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 221:limits.c      ****           break;
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 10


 222:limits.c      ****         }
 223:limits.c      ****       }
 224:limits.c      **** 
 225:limits.c      ****     } while (STEP_MASK & axislock);
 226:limits.c      **** 
 227:limits.c      ****     st_reset(); // Immediately force kill steppers and reset step segment buffer.
 228:limits.c      ****     delay_ms(settings.homing_debounce_delay); // Delay to allow transient dynamics to dissipate.
 229:limits.c      **** 
 230:limits.c      ****     // Reverse direction and reset homing rate for locate cycle(s).
 231:limits.c      ****     approach = !approach;
 232:limits.c      **** 
 233:limits.c      ****     // After first cycle, homing enters locating phase. Shorten search to pull-off distance.
 234:limits.c      ****     if (approach) {
 235:limits.c      ****       max_travel = settings.homing_pulloff*HOMING_AXIS_LOCATE_SCALAR;
 236:limits.c      ****       homing_rate = settings.homing_feed_rate;
 237:limits.c      ****     } else {
 238:limits.c      ****       max_travel = settings.homing_pulloff;
 239:limits.c      ****       homing_rate = settings.homing_seek_rate;
 240:limits.c      ****     }
 241:limits.c      **** 
 242:limits.c      ****   } while (n_cycle-- > 0);
 276              		.loc 1 242 0
 277 0094 9A46     		mov	r10, r3
 278              	.LVL25:
 279              	.L43:
 135:limits.c      **** 
 280              		.loc 1 135 0
 281 0096 01A8     		add	r0, sp, #4
 282 0098 8449     		ldr	r1, .L53+12
 283 009a FFF7FEFF 		bl	system_convert_array_steps_to_mpos
 284              	.LVL26:
 139:limits.c      ****     for (idx=0; idx<N_AXIS; idx++) {
 285              		.loc 1 139 0
 286 009e 0026     		movs	r6, #0
 138:limits.c      ****     n_active_axis = 0;
 287              		.loc 1 138 0
 288 00a0 3446     		mov	r4, r6
 140:limits.c      ****       // Set target location for active axes and setup computation for homing rate.
 289              		.loc 1 140 0
 290 00a2 3346     		mov	r3, r6
 291 00a4 36E0     		b	.L22
 292              	.LVL27:
 293              	.L28:
 142:limits.c      ****         n_active_axis++;
 294              		.loc 1 142 0
 295 00a6 1A46     		mov	r2, r3
 296 00a8 48FA03F1 		asr	r1, r8, r3
 297 00ac 11F0010F 		tst	r1, #1
 298 00b0 2ED0     		beq	.L23
 143:limits.c      ****         #ifdef COREXY
 299              		.loc 1 143 0
 300 00b2 0136     		adds	r6, r6, #1
 301              	.LVL28:
 302 00b4 F6B2     		uxtb	r6, r6
 303              	.LVL29:
 156:limits.c      ****         #endif
 304              		.loc 1 156 0
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 11


 305 00b6 0020     		movs	r0, #0
 306 00b8 7C49     		ldr	r1, .L53+12
 307 00ba 41F82300 		str	r0, [r1, r3, lsl #2]
 160:limits.c      ****           if (approach) { target[idx] = -max_travel; }
 308              		.loc 1 160 0
 309 00be 7949     		ldr	r1, .L53+4
 310 00c0 91F84910 		ldrb	r1, [r1, #73]	@ zero_extendqisi2
 311 00c4 1941     		asrs	r1, r1, r3
 312 00c6 11F0010F 		tst	r1, #1
 313 00ca 0ED0     		beq	.L24
 161:limits.c      ****           else { target[idx] = max_travel; }
 314              		.loc 1 161 0
 315 00cc 3DB1     		cbz	r5, .L25
 161:limits.c      ****           else { target[idx] = max_travel; }
 316              		.loc 1 161 0 is_stmt 0 discriminator 1
 317 00ce 09F10040 		add	r0, r9, #-2147483648
 318 00d2 08A9     		add	r1, sp, #32
 319 00d4 01EB8301 		add	r1, r1, r3, lsl #2
 320 00d8 41F81C0C 		str	r0, [r1, #-28]	@ float
 321 00dc 13E0     		b	.L26
 322              	.L25:
 162:limits.c      ****         } else {
 323              		.loc 1 162 0 is_stmt 1
 324 00de 08A9     		add	r1, sp, #32
 325 00e0 01EB8301 		add	r1, r1, r3, lsl #2
 326 00e4 41F81C9C 		str	r9, [r1, #-28]	@ float
 327 00e8 0DE0     		b	.L26
 328              	.L24:
 164:limits.c      ****           else { target[idx] = -max_travel; }
 329              		.loc 1 164 0
 330 00ea 2DB1     		cbz	r5, .L27
 164:limits.c      ****           else { target[idx] = -max_travel; }
 331              		.loc 1 164 0 is_stmt 0 discriminator 1
 332 00ec 08A9     		add	r1, sp, #32
 333 00ee 01EB8301 		add	r1, r1, r3, lsl #2
 334 00f2 41F81C9C 		str	r9, [r1, #-28]	@ float
 335 00f6 06E0     		b	.L26
 336              	.L27:
 165:limits.c      ****         }
 337              		.loc 1 165 0 is_stmt 1
 338 00f8 09F10040 		add	r0, r9, #-2147483648
 339 00fc 08A9     		add	r1, sp, #32
 340 00fe 01EB8301 		add	r1, r1, r3, lsl #2
 341 0102 41F81C0C 		str	r0, [r1, #-28]	@ float
 342              	.L26:
 168:limits.c      ****       }
 343              		.loc 1 168 0
 344 0106 08A9     		add	r1, sp, #32
 345 0108 0A44     		add	r2, r2, r1
 346 010a 12F8102C 		ldrb	r2, [r2, #-16]	@ zero_extendqisi2
 347 010e 1443     		orrs	r4, r4, r2
 348              	.LVL30:
 349              	.L23:
 140:limits.c      ****       // Set target location for active axes and setup computation for homing rate.
 350              		.loc 1 140 0 discriminator 2
 351 0110 0133     		adds	r3, r3, #1
 352              	.LVL31:
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 12


 353 0112 DBB2     		uxtb	r3, r3
 354              	.LVL32:
 355              	.L22:
 140:limits.c      ****       // Set target location for active axes and setup computation for homing rate.
 356              		.loc 1 140 0 is_stmt 0 discriminator 1
 357 0114 022B     		cmp	r3, #2
 358 0116 C6D9     		bls	.L28
 172:limits.c      ****     sys.homing_axis_lock = axislock;
 359              		.loc 1 172 0 is_stmt 1
 360 0118 3046     		mov	r0, r6
 361 011a FFF7FEFF 		bl	__aeabi_ui2d
 362              	.LVL33:
 363 011e FFF7FEFF 		bl	sqrt
 364              	.LVL34:
 365 0122 0646     		mov	r6, r0
 366              	.LVL35:
 367 0124 0F46     		mov	r7, r1
 368 0126 5846     		mov	r0, fp
 369 0128 FFF7FEFF 		bl	__aeabi_f2d
 370              	.LVL36:
 371 012c 3246     		mov	r2, r6
 372 012e 3B46     		mov	r3, r7
 373 0130 FFF7FEFF 		bl	__aeabi_dmul
 374              	.LVL37:
 375 0134 FFF7FEFF 		bl	__aeabi_d2f
 376              	.LVL38:
 173:limits.c      **** 
 377              		.loc 1 173 0
 378 0138 594E     		ldr	r6, .L53
 379 013a B471     		strb	r4, [r6, #6]
 176:limits.c      ****     plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 380              		.loc 1 176 0
 381 013c 0590     		str	r0, [sp, #20]	@ float
 177:limits.c      **** 
 382              		.loc 1 177 0
 383 013e 01A8     		add	r0, sp, #4
 384              	.LVL39:
 385 0140 05A9     		add	r1, sp, #20
 386              	.LVL40:
 387 0142 FFF7FEFF 		bl	plan_buffer_line
 388              	.LVL41:
 179:limits.c      ****     st_prep_buffer(); // Prep and fill segment buffer from newly planned block.
 389              		.loc 1 179 0
 390 0146 0423     		movs	r3, #4
 391 0148 3371     		strb	r3, [r6, #4]
 180:limits.c      ****     st_wake_up(); // Initiate motion
 392              		.loc 1 180 0
 393 014a FFF7FEFF 		bl	st_prep_buffer
 394              	.LVL42:
 181:limits.c      ****     do {
 395              		.loc 1 181 0
 396 014e FFF7FEFF 		bl	st_wake_up
 397              	.LVL43:
 398              	.L40:
 183:limits.c      ****         // Check limit state. Lock out cycle axes when they change.
 399              		.loc 1 183 0
 400 0152 B5B1     		cbz	r5, .L29
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 13


 185:limits.c      ****         for (idx=0; idx<N_AXIS; idx++) {
 401              		.loc 1 185 0
 402 0154 FFF7FEFF 		bl	limits_get_state
 403              	.LVL44:
 186:limits.c      ****           if (axislock & step_pin[idx]) {
 404              		.loc 1 186 0
 405 0158 0023     		movs	r3, #0
 406 015a 0EE0     		b	.L30
 407              	.LVL45:
 408              	.L32:
 187:limits.c      ****             if (limit_state & (1 << idx)) {
 409              		.loc 1 187 0
 410 015c 08AA     		add	r2, sp, #32
 411 015e 1A44     		add	r2, r2, r3
 412 0160 12F8102C 		ldrb	r2, [r2, #-16]	@ zero_extendqisi2
 413 0164 2242     		tst	r2, r4
 414 0166 06D0     		beq	.L31
 188:limits.c      ****               #ifdef COREXY
 415              		.loc 1 188 0
 416 0168 40FA03F1 		asr	r1, r0, r3
 417 016c 11F0010F 		tst	r1, #1
 418 0170 01D0     		beq	.L31
 193:limits.c      ****               #endif
 419              		.loc 1 193 0
 420 0172 24EA0204 		bic	r4, r4, r2
 421              	.LVL46:
 422              	.L31:
 186:limits.c      ****           if (axislock & step_pin[idx]) {
 423              		.loc 1 186 0 discriminator 2
 424 0176 0133     		adds	r3, r3, #1
 425              	.LVL47:
 426 0178 DBB2     		uxtb	r3, r3
 427              	.LVL48:
 428              	.L30:
 186:limits.c      ****           if (axislock & step_pin[idx]) {
 429              		.loc 1 186 0 is_stmt 0 discriminator 1
 430 017a 022B     		cmp	r3, #2
 431 017c EED9     		bls	.L32
 198:limits.c      ****       }
 432              		.loc 1 198 0 is_stmt 1
 433 017e 484B     		ldr	r3, .L53
 434              	.LVL49:
 435 0180 9C71     		strb	r4, [r3, #6]
 436              	.LVL50:
 437              	.L29:
 201:limits.c      **** 
 438              		.loc 1 201 0
 439 0182 FFF7FEFF 		bl	st_prep_buffer
 440              	.LVL51:
 204:limits.c      ****         uint8_t rt_exec = sys_rt_exec_state;
 441              		.loc 1 204 0
 442 0186 4A4B     		ldr	r3, .L53+16
 443 0188 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 444 018a 13F0340F 		tst	r3, #52
 445 018e 2CD0     		beq	.L33
 446              	.LBB2:
 205:limits.c      ****         // Homing failure condition: Reset issued during cycle.
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 14


 447              		.loc 1 205 0
 448 0190 474B     		ldr	r3, .L53+16
 449 0192 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 450              	.LVL52:
 451 0194 E4B2     		uxtb	r4, r4
 452              	.LVL53:
 207:limits.c      ****         // Homing failure condition: Safety door was opened.
 453              		.loc 1 207 0
 454 0196 14F0100F 		tst	r4, #16
 455 019a 02D0     		beq	.L34
 207:limits.c      ****         // Homing failure condition: Safety door was opened.
 456              		.loc 1 207 0 is_stmt 0 discriminator 1
 457 019c 0620     		movs	r0, #6
 458 019e FFF7FEFF 		bl	system_set_exec_alarm
 459              	.LVL54:
 460              	.L34:
 209:limits.c      ****         // Homing failure condition: Limit switch still engaged after pull-off motion
 461              		.loc 1 209 0 is_stmt 1
 462 01a2 14F0200F 		tst	r4, #32
 463 01a6 02D0     		beq	.L35
 209:limits.c      ****         // Homing failure condition: Limit switch still engaged after pull-off motion
 464              		.loc 1 209 0 is_stmt 0 discriminator 1
 465 01a8 0720     		movs	r0, #7
 466 01aa FFF7FEFF 		bl	system_set_exec_alarm
 467              	.LVL55:
 468              	.L35:
 211:limits.c      ****         // Homing failure condition: Limit switch not found during approach.
 469              		.loc 1 211 0 is_stmt 1
 470 01ae 3DB9     		cbnz	r5, .L36
 211:limits.c      ****         // Homing failure condition: Limit switch not found during approach.
 471              		.loc 1 211 0 is_stmt 0 discriminator 1
 472 01b0 FFF7FEFF 		bl	limits_get_state
 473              	.LVL56:
 474 01b4 10EA080F 		tst	r0, r8
 475 01b8 02D0     		beq	.L36
 211:limits.c      ****         // Homing failure condition: Limit switch not found during approach.
 476              		.loc 1 211 0 discriminator 2
 477 01ba 0820     		movs	r0, #8
 478 01bc FFF7FEFF 		bl	system_set_exec_alarm
 479              	.LVL57:
 480              	.L36:
 213:limits.c      ****         if (sys_rt_exec_alarm) {
 481              		.loc 1 213 0 is_stmt 1
 482 01c0 2DB1     		cbz	r5, .L37
 213:limits.c      ****         if (sys_rt_exec_alarm) {
 483              		.loc 1 213 0 is_stmt 0 discriminator 1
 484 01c2 14F0040F 		tst	r4, #4
 485 01c6 02D0     		beq	.L37
 213:limits.c      ****         if (sys_rt_exec_alarm) {
 486              		.loc 1 213 0 discriminator 2
 487 01c8 0920     		movs	r0, #9
 488 01ca FFF7FEFF 		bl	system_set_exec_alarm
 489              	.LVL58:
 490              	.L37:
 214:limits.c      ****           mc_reset(); // Stop motors, if they are running.
 491              		.loc 1 214 0 is_stmt 1
 492 01ce 394B     		ldr	r3, .L53+20
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 15


 493 01d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 494 01d2 13F0FF0F 		tst	r3, #255
 495 01d6 04D0     		beq	.L38
 215:limits.c      ****           protocol_execute_realtime();
 496              		.loc 1 215 0
 497 01d8 FFF7FEFF 		bl	mc_reset
 498              	.LVL59:
 216:limits.c      ****           return;
 499              		.loc 1 216 0
 500 01dc FFF7FEFF 		bl	protocol_execute_realtime
 501              	.LVL60:
 217:limits.c      ****         } else {
 502              		.loc 1 217 0
 503 01e0 5AE0     		b	.L16
 504              	.L38:
 220:limits.c      ****           break;
 505              		.loc 1 220 0
 506 01e2 0420     		movs	r0, #4
 507 01e4 FFF7FEFF 		bl	system_clear_exec_state_flag
 508              	.LVL61:
 221:limits.c      ****         }
 509              		.loc 1 221 0
 510 01e8 02E0     		b	.L39
 511              	.LVL62:
 512              	.L33:
 513              	.LBE2:
 225:limits.c      **** 
 514              		.loc 1 225 0
 515 01ea 14F0070F 		tst	r4, #7
 516 01ee B0D1     		bne	.L40
 517              	.LVL63:
 518              	.L39:
 227:limits.c      ****     delay_ms(settings.homing_debounce_delay); // Delay to allow transient dynamics to dissipate.
 519              		.loc 1 227 0
 520 01f0 FFF7FEFF 		bl	st_reset
 521              	.LVL64:
 228:limits.c      **** 
 522              		.loc 1 228 0
 523 01f4 2B4B     		ldr	r3, .L53+4
 524 01f6 B3F85400 		ldrh	r0, [r3, #84]
 525 01fa FFF7FEFF 		bl	CyDelay
 526              	.LVL65:
 234:limits.c      ****       max_travel = settings.homing_pulloff*HOMING_AXIS_LOCATE_SCALAR;
 527              		.loc 1 234 0
 528 01fe 95F00105 		eors	r5, r5, #1
 529              	.LVL66:
 530 0202 08D0     		beq	.L41
 235:limits.c      ****       homing_rate = settings.homing_feed_rate;
 531              		.loc 1 235 0
 532 0204 274C     		ldr	r4, .L53+4
 533 0206 A06D     		ldr	r0, [r4, #88]	@ float
 534 0208 2B49     		ldr	r1, .L53+24
 535 020a FFF7FEFF 		bl	__aeabi_fmul
 536              	.LVL67:
 537 020e 8146     		mov	r9, r0
 538              	.LVL68:
 236:limits.c      ****     } else {
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 16


 539              		.loc 1 236 0
 540 0210 D4F84CB0 		ldr	fp, [r4, #76]	@ float
 541              	.LVL69:
 542 0214 04E0     		b	.L42
 543              	.LVL70:
 544              	.L41:
 238:limits.c      ****       homing_rate = settings.homing_seek_rate;
 545              		.loc 1 238 0
 546 0216 234B     		ldr	r3, .L53+4
 547 0218 D3F85890 		ldr	r9, [r3, #88]	@ float
 548              	.LVL71:
 239:limits.c      ****     }
 549              		.loc 1 239 0
 550 021c D3F850B0 		ldr	fp, [r3, #80]	@ float
 551              	.LVL72:
 552              	.L42:
 553              		.loc 1 242 0
 554 0220 0AF1FF33 		add	r3, r10, #-1
 555 0224 DBB2     		uxtb	r3, r3
 556              	.LVL73:
 557 0226 BAF1000F 		cmp	r10, #0
 558 022a 7FF433AF 		bne	.L50
 559 022e 0024     		movs	r4, #0
 560 0230 2DE0     		b	.L44
 561              	.LVL74:
 562              	.L48:
 243:limits.c      **** 
 244:limits.c      ****   // The active cycle axes should now be homed and machine limits have been located. By
 245:limits.c      ****   // default, Grbl defines machine space as all negative, as do most CNCs. Since limit switches
 246:limits.c      ****   // can be on either side of an axes, check and set axes machine zero appropriately. Also,
 247:limits.c      ****   // set up pull-off maneuver from axes limit switches that have been homed. This provides
 248:limits.c      ****   // some initial clearance off the switches and should also help prevent them from falsely
 249:limits.c      ****   // triggering when hard limits are enabled or when more than one axes shares a limit pin.
 250:limits.c      ****   int32_t set_axis_position;
 251:limits.c      ****   // Set machine positions for homed limit switches. Don't update non-homed axes.
 252:limits.c      ****   for (idx=0; idx<N_AXIS; idx++) {
 253:limits.c      ****     // NOTE: settings.max_travel[] is stored as a negative value.
 254:limits.c      ****     if (cycle_mask & bit(idx)) {
 563              		.loc 1 254 0
 564 0232 2546     		mov	r5, r4
 565 0234 48FA04F3 		asr	r3, r8, r4
 566 0238 13F0010F 		tst	r3, #1
 567 023c 25D0     		beq	.L45
 255:limits.c      ****       #ifdef HOMING_FORCE_SET_ORIGIN
 256:limits.c      ****         set_axis_position = 0;
 257:limits.c      ****       #else
 258:limits.c      ****         if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 568              		.loc 1 258 0
 569 023e 194B     		ldr	r3, .L53+4
 570 0240 93F84930 		ldrb	r3, [r3, #73]	@ zero_extendqisi2
 571 0244 2341     		asrs	r3, r3, r4
 572 0246 13F0010F 		tst	r3, #1
 573 024a 0FD0     		beq	.L46
 259:limits.c      ****           set_axis_position = lround((settings.max_travel[idx]+settings.homing_pulloff)*settings.st
 574              		.loc 1 259 0
 575 024c 154E     		ldr	r6, .L53+4
 576 024e 06EB8403 		add	r3, r6, r4, lsl #2
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 17


 577 0252 586A     		ldr	r0, [r3, #36]	@ float
 578 0254 B16D     		ldr	r1, [r6, #88]	@ float
 579 0256 FFF7FEFF 		bl	__aeabi_fadd
 580              	.LVL75:
 581 025a 56F82410 		ldr	r1, [r6, r4, lsl #2]	@ float
 582 025e FFF7FEFF 		bl	__aeabi_fmul
 583              	.LVL76:
 584 0262 FFF7FEFF 		bl	__aeabi_f2d
 585              	.LVL77:
 586 0266 FFF7FEFF 		bl	lround
 587              	.LVL78:
 588 026a 0BE0     		b	.L47
 589              	.LVL79:
 590              	.L46:
 260:limits.c      ****         } else {
 261:limits.c      ****           set_axis_position = lround(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 591              		.loc 1 261 0
 592 026c 0D4B     		ldr	r3, .L53+4
 593 026e 986D     		ldr	r0, [r3, #88]	@ float
 594 0270 00F10040 		add	r0, r0, #-2147483648
 595 0274 53F82410 		ldr	r1, [r3, r4, lsl #2]	@ float
 596 0278 FFF7FEFF 		bl	__aeabi_fmul
 597              	.LVL80:
 598 027c FFF7FEFF 		bl	__aeabi_f2d
 599              	.LVL81:
 600 0280 FFF7FEFF 		bl	lround
 601              	.LVL82:
 602              	.L47:
 262:limits.c      ****         }
 263:limits.c      ****       #endif
 264:limits.c      **** 
 265:limits.c      ****       #ifdef COREXY
 266:limits.c      ****         if (idx==X_AXIS) {
 267:limits.c      ****           int32_t off_axis_position = system_convert_corexy_to_y_axis_steps(sys_position);
 268:limits.c      ****           sys_position[A_MOTOR] = set_axis_position + off_axis_position;
 269:limits.c      ****           sys_position[B_MOTOR] = set_axis_position - off_axis_position;
 270:limits.c      ****         } else if (idx==Y_AXIS) {
 271:limits.c      ****           int32_t off_axis_position = system_convert_corexy_to_x_axis_steps(sys_position);
 272:limits.c      ****           sys_position[A_MOTOR] = off_axis_position + set_axis_position;
 273:limits.c      ****           sys_position[B_MOTOR] = off_axis_position - set_axis_position;
 274:limits.c      ****         } else {
 275:limits.c      ****           sys_position[idx] = set_axis_position;
 276:limits.c      ****         }
 277:limits.c      ****       #else
 278:limits.c      ****         sys_position[idx] = set_axis_position;
 603              		.loc 1 278 0
 604 0284 094B     		ldr	r3, .L53+12
 605 0286 43F82500 		str	r0, [r3, r5, lsl #2]
 606              	.LVL83:
 607              	.L45:
 252:limits.c      ****     // NOTE: settings.max_travel[] is stored as a negative value.
 608              		.loc 1 252 0 discriminator 2
 609 028a 0134     		adds	r4, r4, #1
 610              	.LVL84:
 611 028c E4B2     		uxtb	r4, r4
 612              	.LVL85:
 613              	.L44:
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 18


 252:limits.c      ****     // NOTE: settings.max_travel[] is stored as a negative value.
 614              		.loc 1 252 0 is_stmt 0 discriminator 1
 615 028e 022C     		cmp	r4, #2
 616 0290 CFD9     		bls	.L48
 279:limits.c      ****       #endif
 280:limits.c      **** 
 281:limits.c      ****     }
 282:limits.c      ****   }
 283:limits.c      ****   sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
 617              		.loc 1 283 0 is_stmt 1
 618 0292 0022     		movs	r2, #0
 619 0294 024B     		ldr	r3, .L53
 620 0296 1A71     		strb	r2, [r3, #4]
 621              	.LVL86:
 622              	.L16:
 284:limits.c      **** }
 623              		.loc 1 284 0
 624 0298 09B0     		add	sp, sp, #36
 625              		.cfi_def_cfa_offset 36
 626              		@ sp needed
 627 029a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 628              	.LVL87:
 629              	.L52:
 630              		.cfi_def_cfa_offset 0
 631              		.cfi_restore 4
 632              		.cfi_restore 5
 633              		.cfi_restore 6
 634              		.cfi_restore 7
 635              		.cfi_restore 8
 636              		.cfi_restore 9
 637              		.cfi_restore 10
 638              		.cfi_restore 11
 639              		.cfi_restore 14
 640 029e 7047     		bx	lr
 641              	.L54:
 642              		.align	2
 643              	.L53:
 644 02a0 00000000 		.word	sys
 645 02a4 00000000 		.word	settings
 646 02a8 0000F8BF 		.word	-1074266112
 647 02ac 00000000 		.word	sys_position
 648 02b0 00000000 		.word	sys_rt_exec_state
 649 02b4 00000000 		.word	sys_rt_exec_alarm
 650 02b8 0000A040 		.word	1084227584
 651              		.cfi_endproc
 652              	.LFE67:
 653              		.size	limits_go_home, .-limits_go_home
 654              		.section	.text.limits_soft_check,"ax",%progbits
 655              		.align	2
 656              		.global	limits_soft_check
 657              		.thumb
 658              		.thumb_func
 659              		.type	limits_soft_check, %function
 660              	limits_soft_check:
 661              	.LFB68:
 285:limits.c      **** 
 286:limits.c      **** 
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 19


 287:limits.c      **** // Performs a soft limit check. Called from mc_line() only. Assumes the machine has been homed,
 288:limits.c      **** // the workspace volume is in all negative space, and the system is in normal operation.
 289:limits.c      **** // NOTE: Used by jogging to limit travel within soft-limit volume.
 290:limits.c      **** void limits_soft_check(float *target)
 291:limits.c      **** {
 662              		.loc 1 291 0
 663              		.cfi_startproc
 664              		@ args = 0, pretend = 0, frame = 0
 665              		@ frame_needed = 0, uses_anonymous_args = 0
 666              	.LVL88:
 667 0000 08B5     		push	{r3, lr}
 668              		.cfi_def_cfa_offset 8
 669              		.cfi_offset 3, -8
 670              		.cfi_offset 14, -4
 292:limits.c      ****   if (system_check_travel_limits(target)) {
 671              		.loc 1 292 0
 672 0002 FFF7FEFF 		bl	system_check_travel_limits
 673              	.LVL89:
 674 0006 C0B1     		cbz	r0, .L55
 293:limits.c      ****     sys.soft_limit = true;
 675              		.loc 1 293 0
 676 0008 0C4B     		ldr	r3, .L60
 677 000a 0122     		movs	r2, #1
 678 000c DA70     		strb	r2, [r3, #3]
 294:limits.c      ****     // Force feed hold if cycle is active. All buffered blocks are guaranteed to be within
 295:limits.c      ****     // workspace volume so just come to a controlled stop so position is not lost. When complete
 296:limits.c      ****     // enter alarm mode.
 297:limits.c      ****     if (sys.state == STATE_CYCLE) {
 679              		.loc 1 297 0
 680 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 681 0010 082B     		cmp	r3, #8
 682 0012 0BD1     		bne	.L57
 298:limits.c      ****       system_set_exec_state_flag(EXEC_FEED_HOLD);
 683              		.loc 1 298 0
 684 0014 0820     		movs	r0, #8
 685 0016 FFF7FEFF 		bl	system_set_exec_state_flag
 686              	.LVL90:
 687              	.L58:
 299:limits.c      ****       do {
 300:limits.c      ****         protocol_execute_realtime();
 688              		.loc 1 300 0
 689 001a FFF7FEFF 		bl	protocol_execute_realtime
 690              	.LVL91:
 301:limits.c      ****         if (sys.abort) { return; }
 691              		.loc 1 301 0
 692 001e 074B     		ldr	r3, .L60
 693 0020 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 694 0022 53B9     		cbnz	r3, .L55
 302:limits.c      ****       } while ( sys.state != STATE_IDLE );
 695              		.loc 1 302 0
 696 0024 054B     		ldr	r3, .L60
 697 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 698 0028 002B     		cmp	r3, #0
 699 002a F6D1     		bne	.L58
 700              	.L57:
 303:limits.c      ****     }
 304:limits.c      ****     mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 20


 701              		.loc 1 304 0
 702 002c FFF7FEFF 		bl	mc_reset
 703              	.LVL92:
 305:limits.c      ****     system_set_exec_alarm(EXEC_ALARM_SOFT_LIMIT); // Indicate soft limit critical event
 704              		.loc 1 305 0
 705 0030 0220     		movs	r0, #2
 706 0032 FFF7FEFF 		bl	system_set_exec_alarm
 707              	.LVL93:
 306:limits.c      ****     protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 708              		.loc 1 306 0
 709 0036 FFF7FEFF 		bl	protocol_execute_realtime
 710              	.LVL94:
 711              	.L55:
 712 003a 08BD     		pop	{r3, pc}
 713              	.L61:
 714              		.align	2
 715              	.L60:
 716 003c 00000000 		.word	sys
 717              		.cfi_endproc
 718              	.LFE68:
 719              		.size	limits_soft_check, .-limits_soft_check
 720              		.comm	exec_lcd_status,1,1
 721              		.comm	sys_rt_exec_accessory_override,1,1
 722              		.comm	sys_rt_exec_motion_override,1,1
 723              		.comm	sys_rt_exec_alarm,1,1
 724              		.comm	sys_rt_exec_state,1,1
 725              		.comm	sys_probe_state,1,1
 726              		.comm	sys_probe_position,12,4
 727              		.comm	sys_position,12,4
 728              		.text
 729              	.Letext0:
 730              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 731              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 732              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 733              		.file 5 "settings.h"
 734              		.file 6 "system.h"
 735              		.file 7 "planner.h"
 736              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 737              		.file 9 "lcd_report.h"
 738              		.file 10 "Generated_Source\\PSoC5/Status_Limit.h"
 739              		.file 11 "Generated_Source\\PSoC5/isr_Limits.h"
 740              		.file 12 "motion_control.h"
 741              		.file 13 "protocol.h"
 742              		.file 14 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9
 743              		.file 15 "stepper.h"
 744              		.file 16 "Generated_Source\\PSoC5/CyLib.h"
 745              		.section	.debug_info,"",%progbits
 746              	.Ldebug_info0:
 747 0000 64080000 		.4byte	0x864
 748 0004 0400     		.2byte	0x4
 749 0006 00000000 		.4byte	.Ldebug_abbrev0
 750 000a 04       		.byte	0x4
 751 000b 01       		.uleb128 0x1
 752 000c 51050000 		.4byte	.LASF110
 753 0010 01       		.byte	0x1
 754 0011 23010000 		.4byte	.LASF111
 755 0015 98060000 		.4byte	.LASF112
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 21


 756 0019 00000000 		.4byte	.Ldebug_ranges0+0
 757 001d 00000000 		.4byte	0
 758 0021 00000000 		.4byte	.Ldebug_line0
 759 0025 02       		.uleb128 0x2
 760 0026 01       		.byte	0x1
 761 0027 06       		.byte	0x6
 762 0028 9E020000 		.4byte	.LASF0
 763 002c 03       		.uleb128 0x3
 764 002d 11020000 		.4byte	.LASF3
 765 0031 02       		.byte	0x2
 766 0032 1D       		.byte	0x1d
 767 0033 37000000 		.4byte	0x37
 768 0037 02       		.uleb128 0x2
 769 0038 01       		.byte	0x1
 770 0039 08       		.byte	0x8
 771 003a 3C020000 		.4byte	.LASF1
 772 003e 02       		.uleb128 0x2
 773 003f 02       		.byte	0x2
 774 0040 05       		.byte	0x5
 775 0041 65000000 		.4byte	.LASF2
 776 0045 03       		.uleb128 0x3
 777 0046 9A000000 		.4byte	.LASF4
 778 004a 02       		.byte	0x2
 779 004b 2B       		.byte	0x2b
 780 004c 50000000 		.4byte	0x50
 781 0050 02       		.uleb128 0x2
 782 0051 02       		.byte	0x2
 783 0052 07       		.byte	0x7
 784 0053 BB030000 		.4byte	.LASF5
 785 0057 03       		.uleb128 0x3
 786 0058 34050000 		.4byte	.LASF6
 787 005c 02       		.byte	0x2
 788 005d 3F       		.byte	0x3f
 789 005e 62000000 		.4byte	0x62
 790 0062 02       		.uleb128 0x2
 791 0063 04       		.byte	0x4
 792 0064 05       		.byte	0x5
 793 0065 14040000 		.4byte	.LASF7
 794 0069 02       		.uleb128 0x2
 795 006a 04       		.byte	0x4
 796 006b 07       		.byte	0x7
 797 006c E4040000 		.4byte	.LASF8
 798 0070 02       		.uleb128 0x2
 799 0071 08       		.byte	0x8
 800 0072 05       		.byte	0x5
 801 0073 86010000 		.4byte	.LASF9
 802 0077 02       		.uleb128 0x2
 803 0078 08       		.byte	0x8
 804 0079 07       		.byte	0x7
 805 007a B0020000 		.4byte	.LASF10
 806 007e 04       		.uleb128 0x4
 807 007f 04       		.byte	0x4
 808 0080 05       		.byte	0x5
 809 0081 696E7400 		.ascii	"int\000"
 810 0085 02       		.uleb128 0x2
 811 0086 04       		.byte	0x4
 812 0087 07       		.byte	0x7
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 22


 813 0088 E5020000 		.4byte	.LASF11
 814 008c 03       		.uleb128 0x3
 815 008d FB000000 		.4byte	.LASF12
 816 0091 03       		.byte	0x3
 817 0092 15       		.byte	0x15
 818 0093 2C000000 		.4byte	0x2c
 819 0097 03       		.uleb128 0x3
 820 0098 0B040000 		.4byte	.LASF13
 821 009c 03       		.byte	0x3
 822 009d 21       		.byte	0x21
 823 009e 45000000 		.4byte	0x45
 824 00a2 03       		.uleb128 0x3
 825 00a3 2D040000 		.4byte	.LASF14
 826 00a7 03       		.byte	0x3
 827 00a8 2C       		.byte	0x2c
 828 00a9 57000000 		.4byte	0x57
 829 00ad 05       		.uleb128 0x5
 830 00ae 41040000 		.4byte	.LASF15
 831 00b2 04       		.byte	0x4
 832 00b3 9201     		.2byte	0x192
 833 00b5 37000000 		.4byte	0x37
 834 00b9 05       		.uleb128 0x5
 835 00ba B9040000 		.4byte	.LASF16
 836 00be 04       		.byte	0x4
 837 00bf 9401     		.2byte	0x194
 838 00c1 69000000 		.4byte	0x69
 839 00c5 02       		.uleb128 0x2
 840 00c6 04       		.byte	0x4
 841 00c7 04       		.byte	0x4
 842 00c8 77010000 		.4byte	.LASF17
 843 00cc 02       		.uleb128 0x2
 844 00cd 08       		.byte	0x8
 845 00ce 04       		.byte	0x4
 846 00cf F6040000 		.4byte	.LASF18
 847 00d3 02       		.uleb128 0x2
 848 00d4 01       		.byte	0x1
 849 00d5 08       		.byte	0x8
 850 00d6 06040000 		.4byte	.LASF19
 851 00da 05       		.uleb128 0x5
 852 00db 81020000 		.4byte	.LASF20
 853 00df 04       		.byte	0x4
 854 00e0 4E02     		.2byte	0x24e
 855 00e2 E6000000 		.4byte	0xe6
 856 00e6 06       		.uleb128 0x6
 857 00e7 04       		.byte	0x4
 858 00e8 EC000000 		.4byte	0xec
 859 00ec 07       		.uleb128 0x7
 860 00ed 02       		.uleb128 0x2
 861 00ee 04       		.byte	0x4
 862 00ef 07       		.byte	0x7
 863 00f0 6F000000 		.4byte	.LASF21
 864 00f4 08       		.uleb128 0x8
 865 00f5 8C000000 		.4byte	0x8c
 866 00f9 02       		.uleb128 0x2
 867 00fa 08       		.byte	0x8
 868 00fb 04       		.byte	0x4
 869 00fc 5C020000 		.4byte	.LASF22
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 23


 870 0100 09       		.uleb128 0x9
 871 0101 5C       		.byte	0x5c
 872 0102 05       		.byte	0x5
 873 0103 4F       		.byte	0x4f
 874 0104 ED010000 		.4byte	0x1ed
 875 0108 0A       		.uleb128 0xa
 876 0109 04020000 		.4byte	.LASF23
 877 010d 05       		.byte	0x5
 878 010e 51       		.byte	0x51
 879 010f ED010000 		.4byte	0x1ed
 880 0113 00       		.byte	0
 881 0114 0A       		.uleb128 0xa
 882 0115 11010000 		.4byte	.LASF24
 883 0119 05       		.byte	0x5
 884 011a 52       		.byte	0x52
 885 011b ED010000 		.4byte	0x1ed
 886 011f 0C       		.byte	0xc
 887 0120 0A       		.uleb128 0xa
 888 0121 3C000000 		.4byte	.LASF25
 889 0125 05       		.byte	0x5
 890 0126 53       		.byte	0x53
 891 0127 ED010000 		.4byte	0x1ed
 892 012b 18       		.byte	0x18
 893 012c 0A       		.uleb128 0xa
 894 012d DF050000 		.4byte	.LASF26
 895 0131 05       		.byte	0x5
 896 0132 54       		.byte	0x54
 897 0133 ED010000 		.4byte	0x1ed
 898 0137 24       		.byte	0x24
 899 0138 0A       		.uleb128 0xa
 900 0139 8B040000 		.4byte	.LASF27
 901 013d 05       		.byte	0x5
 902 013e 57       		.byte	0x57
 903 013f 8C000000 		.4byte	0x8c
 904 0143 30       		.byte	0x30
 905 0144 0A       		.uleb128 0xa
 906 0145 4B060000 		.4byte	.LASF28
 907 0149 05       		.byte	0x5
 908 014a 58       		.byte	0x58
 909 014b 8C000000 		.4byte	0x8c
 910 014f 31       		.byte	0x31
 911 0150 0A       		.uleb128 0xa
 912 0151 1D040000 		.4byte	.LASF29
 913 0155 05       		.byte	0x5
 914 0156 59       		.byte	0x59
 915 0157 8C000000 		.4byte	0x8c
 916 015b 32       		.byte	0x32
 917 015c 0A       		.uleb128 0xa
 918 015d B1000000 		.4byte	.LASF30
 919 0161 05       		.byte	0x5
 920 0162 5A       		.byte	0x5a
 921 0163 8C000000 		.4byte	0x8c
 922 0167 33       		.byte	0x33
 923 0168 0A       		.uleb128 0xa
 924 0169 6A030000 		.4byte	.LASF31
 925 016d 05       		.byte	0x5
 926 016e 5B       		.byte	0x5b
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 24


 927 016f 8C000000 		.4byte	0x8c
 928 0173 34       		.byte	0x34
 929 0174 0A       		.uleb128 0xa
 930 0175 3E050000 		.4byte	.LASF32
 931 0179 05       		.byte	0x5
 932 017a 5C       		.byte	0x5c
 933 017b C5000000 		.4byte	0xc5
 934 017f 38       		.byte	0x38
 935 0180 0A       		.uleb128 0xa
 936 0181 2E020000 		.4byte	.LASF33
 937 0185 05       		.byte	0x5
 938 0186 5D       		.byte	0x5d
 939 0187 C5000000 		.4byte	0xc5
 940 018b 3C       		.byte	0x3c
 941 018c 0A       		.uleb128 0xa
 942 018d 4D040000 		.4byte	.LASF34
 943 0191 05       		.byte	0x5
 944 0192 5F       		.byte	0x5f
 945 0193 C5000000 		.4byte	0xc5
 946 0197 40       		.byte	0x40
 947 0198 0A       		.uleb128 0xa
 948 0199 1B050000 		.4byte	.LASF35
 949 019d 05       		.byte	0x5
 950 019e 60       		.byte	0x60
 951 019f C5000000 		.4byte	0xc5
 952 01a3 44       		.byte	0x44
 953 01a4 0A       		.uleb128 0xa
 954 01a5 AA020000 		.4byte	.LASF36
 955 01a9 05       		.byte	0x5
 956 01aa 62       		.byte	0x62
 957 01ab 8C000000 		.4byte	0x8c
 958 01af 48       		.byte	0x48
 959 01b0 0A       		.uleb128 0xa
 960 01b1 71020000 		.4byte	.LASF37
 961 01b5 05       		.byte	0x5
 962 01b6 64       		.byte	0x64
 963 01b7 8C000000 		.4byte	0x8c
 964 01bb 49       		.byte	0x49
 965 01bc 0A       		.uleb128 0xa
 966 01bd EA050000 		.4byte	.LASF38
 967 01c1 05       		.byte	0x5
 968 01c2 65       		.byte	0x65
 969 01c3 C5000000 		.4byte	0xc5
 970 01c7 4C       		.byte	0x4c
 971 01c8 0A       		.uleb128 0xa
 972 01c9 FD040000 		.4byte	.LASF39
 973 01cd 05       		.byte	0x5
 974 01ce 66       		.byte	0x66
 975 01cf C5000000 		.4byte	0xc5
 976 01d3 50       		.byte	0x50
 977 01d4 0A       		.uleb128 0xa
 978 01d5 75040000 		.4byte	.LASF40
 979 01d9 05       		.byte	0x5
 980 01da 67       		.byte	0x67
 981 01db 97000000 		.4byte	0x97
 982 01df 54       		.byte	0x54
 983 01e0 0A       		.uleb128 0xa
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 25


 984 01e1 5D010000 		.4byte	.LASF41
 985 01e5 05       		.byte	0x5
 986 01e6 68       		.byte	0x68
 987 01e7 C5000000 		.4byte	0xc5
 988 01eb 58       		.byte	0x58
 989 01ec 00       		.byte	0
 990 01ed 0B       		.uleb128 0xb
 991 01ee C5000000 		.4byte	0xc5
 992 01f2 FD010000 		.4byte	0x1fd
 993 01f6 0C       		.uleb128 0xc
 994 01f7 ED000000 		.4byte	0xed
 995 01fb 02       		.byte	0x2
 996 01fc 00       		.byte	0
 997 01fd 03       		.uleb128 0x3
 998 01fe 6C010000 		.4byte	.LASF42
 999 0202 05       		.byte	0x5
 1000 0203 69       		.byte	0x69
 1001 0204 00010000 		.4byte	0x100
 1002 0208 09       		.uleb128 0x9
 1003 0209 14       		.byte	0x14
 1004 020a 06       		.byte	0x6
 1005 020b 80       		.byte	0x80
 1006 020c B9020000 		.4byte	0x2b9
 1007 0210 0A       		.uleb128 0xa
 1008 0211 49000000 		.4byte	.LASF43
 1009 0215 06       		.byte	0x6
 1010 0216 81       		.byte	0x81
 1011 0217 8C000000 		.4byte	0x8c
 1012 021b 00       		.byte	0
 1013 021c 0A       		.uleb128 0xa
 1014 021d 98020000 		.4byte	.LASF44
 1015 0221 06       		.byte	0x6
 1016 0222 82       		.byte	0x82
 1017 0223 8C000000 		.4byte	0x8c
 1018 0227 01       		.byte	0x1
 1019 0228 0A       		.uleb128 0xa
 1020 0229 62040000 		.4byte	.LASF45
 1021 022d 06       		.byte	0x6
 1022 022e 83       		.byte	0x83
 1023 022f 8C000000 		.4byte	0x8c
 1024 0233 02       		.byte	0x2
 1025 0234 0A       		.uleb128 0xa
 1026 0235 6A040000 		.4byte	.LASF46
 1027 0239 06       		.byte	0x6
 1028 023a 84       		.byte	0x84
 1029 023b 8C000000 		.4byte	0x8c
 1030 023f 03       		.byte	0x3
 1031 0240 0A       		.uleb128 0xa
 1032 0241 55040000 		.4byte	.LASF47
 1033 0245 06       		.byte	0x6
 1034 0246 85       		.byte	0x85
 1035 0247 8C000000 		.4byte	0x8c
 1036 024b 04       		.byte	0x4
 1037 024c 0A       		.uleb128 0xa
 1038 024d C4010000 		.4byte	.LASF48
 1039 0251 06       		.byte	0x6
 1040 0252 86       		.byte	0x86
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 26


 1041 0253 8C000000 		.4byte	0x8c
 1042 0257 05       		.byte	0x5
 1043 0258 0A       		.uleb128 0xa
 1044 0259 7D030000 		.4byte	.LASF49
 1045 025d 06       		.byte	0x6
 1046 025e 87       		.byte	0x87
 1047 025f 8C000000 		.4byte	0x8c
 1048 0263 06       		.byte	0x6
 1049 0264 0A       		.uleb128 0xa
 1050 0265 F2020000 		.4byte	.LASF50
 1051 0269 06       		.byte	0x6
 1052 026a 88       		.byte	0x88
 1053 026b 8C000000 		.4byte	0x8c
 1054 026f 07       		.byte	0x7
 1055 0270 0A       		.uleb128 0xa
 1056 0271 FB050000 		.4byte	.LASF51
 1057 0275 06       		.byte	0x6
 1058 0276 89       		.byte	0x89
 1059 0277 8C000000 		.4byte	0x8c
 1060 027b 08       		.byte	0x8
 1061 027c 0A       		.uleb128 0xa
 1062 027d 94010000 		.4byte	.LASF52
 1063 0281 06       		.byte	0x6
 1064 0282 8A       		.byte	0x8a
 1065 0283 8C000000 		.4byte	0x8c
 1066 0287 09       		.byte	0x9
 1067 0288 0A       		.uleb128 0xa
 1068 0289 C0040000 		.4byte	.LASF53
 1069 028d 06       		.byte	0x6
 1070 028e 8B       		.byte	0x8b
 1071 028f 8C000000 		.4byte	0x8c
 1072 0293 0A       		.byte	0xa
 1073 0294 0A       		.uleb128 0xa
 1074 0295 1B020000 		.4byte	.LASF54
 1075 0299 06       		.byte	0x6
 1076 029a 8C       		.byte	0x8c
 1077 029b 8C000000 		.4byte	0x8c
 1078 029f 0B       		.byte	0xb
 1079 02a0 0A       		.uleb128 0xa
 1080 02a1 0B030000 		.4byte	.LASF55
 1081 02a5 06       		.byte	0x6
 1082 02a6 8D       		.byte	0x8d
 1083 02a7 8C000000 		.4byte	0x8c
 1084 02ab 0C       		.byte	0xc
 1085 02ac 0A       		.uleb128 0xa
 1086 02ad FD020000 		.4byte	.LASF56
 1087 02b1 06       		.byte	0x6
 1088 02b2 8F       		.byte	0x8f
 1089 02b3 C5000000 		.4byte	0xc5
 1090 02b7 10       		.byte	0x10
 1091 02b8 00       		.byte	0
 1092 02b9 03       		.uleb128 0x3
 1093 02ba 78000000 		.4byte	.LASF57
 1094 02be 06       		.byte	0x6
 1095 02bf 91       		.byte	0x91
 1096 02c0 08020000 		.4byte	0x208
 1097 02c4 09       		.uleb128 0x9
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 27


 1098 02c5 0C       		.byte	0xc
 1099 02c6 07       		.byte	0x7
 1100 02c7 5C       		.byte	0x5c
 1101 02c8 F1020000 		.4byte	0x2f1
 1102 02cc 0A       		.uleb128 0xa
 1103 02cd B1030000 		.4byte	.LASF58
 1104 02d1 07       		.byte	0x7
 1105 02d2 5D       		.byte	0x5d
 1106 02d3 C5000000 		.4byte	0xc5
 1107 02d7 00       		.byte	0
 1108 02d8 0A       		.uleb128 0xa
 1109 02d9 FD020000 		.4byte	.LASF56
 1110 02dd 07       		.byte	0x7
 1111 02de 5E       		.byte	0x5e
 1112 02df C5000000 		.4byte	0xc5
 1113 02e3 04       		.byte	0x4
 1114 02e4 0A       		.uleb128 0xa
 1115 02e5 CE030000 		.4byte	.LASF59
 1116 02e9 07       		.byte	0x7
 1117 02ea 5F       		.byte	0x5f
 1118 02eb 8C000000 		.4byte	0x8c
 1119 02ef 08       		.byte	0x8
 1120 02f0 00       		.byte	0
 1121 02f1 03       		.uleb128 0x3
 1122 02f2 F5030000 		.4byte	.LASF60
 1123 02f6 07       		.byte	0x7
 1124 02f7 63       		.byte	0x63
 1125 02f8 C4020000 		.4byte	0x2c4
 1126 02fc 0D       		.uleb128 0xd
 1127 02fd F3060000 		.4byte	.LASF61
 1128 0301 01       		.byte	0x1
 1129 0302 41       		.byte	0x41
 1130 0303 00000000 		.4byte	.LFB66
 1131 0307 28000000 		.4byte	.LFE66-.LFB66
 1132 030b 01       		.uleb128 0x1
 1133 030c 9C       		.byte	0x9c
 1134 030d 2A030000 		.4byte	0x32a
 1135 0311 0E       		.uleb128 0xe
 1136 0312 18000000 		.4byte	.LVL0
 1137 0316 2A070000 		.4byte	0x72a
 1138 031a 0F       		.uleb128 0xf
 1139 031b 1E000000 		.4byte	.LVL1
 1140 031f 37070000 		.4byte	0x737
 1141 0323 10       		.uleb128 0x10
 1142 0324 01       		.uleb128 0x1
 1143 0325 50       		.byte	0x50
 1144 0326 01       		.uleb128 0x1
 1145 0327 31       		.byte	0x31
 1146 0328 00       		.byte	0
 1147 0329 00       		.byte	0
 1148 032a 0D       		.uleb128 0xd
 1149 032b E3000000 		.4byte	.LASF62
 1150 032f 01       		.byte	0x1
 1151 0330 30       		.byte	0x30
 1152 0331 00000000 		.4byte	.LFB64
 1153 0335 0C000000 		.4byte	.LFE64-.LFB64
 1154 0339 01       		.uleb128 0x1
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 28


 1155 033a 9C       		.byte	0x9c
 1156 033b 52030000 		.4byte	0x352
 1157 033f 0E       		.uleb128 0xe
 1158 0340 06000000 		.4byte	.LVL2
 1159 0344 48070000 		.4byte	0x748
 1160 0348 0E       		.uleb128 0xe
 1161 0349 0A000000 		.4byte	.LVL3
 1162 034d 4F070000 		.4byte	0x74f
 1163 0351 00       		.byte	0
 1164 0352 0D       		.uleb128 0xd
 1165 0353 28050000 		.4byte	.LASF63
 1166 0357 01       		.byte	0x1
 1167 0358 22       		.byte	0x22
 1168 0359 00000000 		.4byte	.LFB63
 1169 035d 28000000 		.4byte	.LFE63-.LFB63
 1170 0361 01       		.uleb128 0x1
 1171 0362 9C       		.byte	0x9c
 1172 0363 91030000 		.4byte	0x391
 1173 0367 0E       		.uleb128 0xe
 1174 0368 12000000 		.4byte	.LVL4
 1175 036c 56070000 		.4byte	0x756
 1176 0370 11       		.uleb128 0x11
 1177 0371 18000000 		.4byte	.LVL5
 1178 0375 5D070000 		.4byte	0x75d
 1179 0379 87030000 		.4byte	0x387
 1180 037d 10       		.uleb128 0x10
 1181 037e 01       		.uleb128 0x1
 1182 037f 50       		.byte	0x50
 1183 0380 05       		.uleb128 0x5
 1184 0381 03       		.byte	0x3
 1185 0382 00000000 		.4byte	limit_isr_handler
 1186 0386 00       		.byte	0
 1187 0387 0E       		.uleb128 0xe
 1188 0388 1E000000 		.4byte	.LVL6
 1189 038c 2A030000 		.4byte	0x32a
 1190 0390 00       		.byte	0
 1191 0391 12       		.uleb128 0x12
 1192 0392 E2060000 		.4byte	.LASF64
 1193 0396 01       		.byte	0x1
 1194 0397 3B       		.byte	0x3b
 1195 0398 8C000000 		.4byte	0x8c
 1196 039c 00000000 		.4byte	.LFB65
 1197 03a0 08000000 		.4byte	.LFE65-.LFB65
 1198 03a4 01       		.uleb128 0x1
 1199 03a5 9C       		.byte	0x9c
 1200 03a6 B4030000 		.4byte	0x3b4
 1201 03aa 0E       		.uleb128 0xe
 1202 03ab 06000000 		.4byte	.LVL7
 1203 03af 6E070000 		.4byte	0x76e
 1204 03b3 00       		.byte	0
 1205 03b4 13       		.uleb128 0x13
 1206 03b5 E4010000 		.4byte	.LASF65
 1207 03b9 01       		.byte	0x1
 1208 03ba 5F       		.byte	0x5f
 1209 03bb 00000000 		.4byte	.LFB67
 1210 03bf BC020000 		.4byte	.LFE67-.LFB67
 1211 03c3 01       		.uleb128 0x1
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 29


 1212 03c4 9C       		.byte	0x9c
 1213 03c5 CB050000 		.4byte	0x5cb
 1214 03c9 14       		.uleb128 0x14
 1215 03ca 9E040000 		.4byte	.LASF80
 1216 03ce 01       		.byte	0x1
 1217 03cf 5F       		.byte	0x5f
 1218 03d0 8C000000 		.4byte	0x8c
 1219 03d4 00000000 		.4byte	.LLST0
 1220 03d8 15       		.uleb128 0x15
 1221 03d9 8E020000 		.4byte	.LASF66
 1222 03dd 01       		.byte	0x1
 1223 03de 64       		.byte	0x64
 1224 03df F1020000 		.4byte	0x2f1
 1225 03e3 02       		.uleb128 0x2
 1226 03e4 91       		.byte	0x91
 1227 03e5 4C       		.sleb128 -52
 1228 03e6 16       		.uleb128 0x16
 1229 03e7 29060000 		.4byte	.LASF67
 1230 03eb 01       		.byte	0x1
 1231 03ec 65       		.byte	0x65
 1232 03ed CB050000 		.4byte	0x5cb
 1233 03f1 2C000000 		.4byte	.LLST1
 1234 03f5 16       		.uleb128 0x16
 1235 03f6 21060000 		.4byte	.LASF68
 1236 03fa 01       		.byte	0x1
 1237 03fb 6D       		.byte	0x6d
 1238 03fc 8C000000 		.4byte	0x8c
 1239 0400 59000000 		.4byte	.LLST2
 1240 0404 15       		.uleb128 0x15
 1241 0405 A6010000 		.4byte	.LASF69
 1242 0409 01       		.byte	0x1
 1243 040a 6E       		.byte	0x6e
 1244 040b D1050000 		.4byte	0x5d1
 1245 040f 02       		.uleb128 0x2
 1246 0410 91       		.byte	0x91
 1247 0411 48       		.sleb128 -56
 1248 0412 15       		.uleb128 0x15
 1249 0413 4F000000 		.4byte	.LASF70
 1250 0417 01       		.byte	0x1
 1251 0418 6F       		.byte	0x6f
 1252 0419 ED010000 		.4byte	0x1ed
 1253 041d 03       		.uleb128 0x3
 1254 041e 91       		.byte	0x91
 1255 041f BC7F     		.sleb128 -68
 1256 0421 16       		.uleb128 0x16
 1257 0422 DF050000 		.4byte	.LASF26
 1258 0426 01       		.byte	0x1
 1259 0427 70       		.byte	0x70
 1260 0428 C5000000 		.4byte	0xc5
 1261 042c 9B000000 		.4byte	.LLST3
 1262 0430 17       		.uleb128 0x17
 1263 0431 69647800 		.ascii	"idx\000"
 1264 0435 01       		.byte	0x1
 1265 0436 71       		.byte	0x71
 1266 0437 8C000000 		.4byte	0x8c
 1267 043b D4000000 		.4byte	.LLST4
 1268 043f 16       		.uleb128 0x16
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 30


 1269 0440 06060000 		.4byte	.LASF71
 1270 0444 01       		.byte	0x1
 1271 0445 81       		.byte	0x81
 1272 0446 E1050000 		.4byte	0x5e1
 1273 044a 58010000 		.4byte	.LLST5
 1274 044e 16       		.uleb128 0x16
 1275 044f 35040000 		.4byte	.LASF72
 1276 0453 01       		.byte	0x1
 1277 0454 82       		.byte	0x82
 1278 0455 C5000000 		.4byte	0xc5
 1279 0459 91010000 		.4byte	.LLST6
 1280 045d 16       		.uleb128 0x16
 1281 045e A5000000 		.4byte	.LASF73
 1282 0462 01       		.byte	0x1
 1283 0463 84       		.byte	0x84
 1284 0464 8C000000 		.4byte	0x8c
 1285 0468 DD010000 		.4byte	.LLST7
 1286 046c 16       		.uleb128 0x16
 1287 046d F2000000 		.4byte	.LASF74
 1288 0471 01       		.byte	0x1
 1289 0472 84       		.byte	0x84
 1290 0473 8C000000 		.4byte	0x8c
 1291 0477 F0010000 		.4byte	.LLST8
 1292 047b 16       		.uleb128 0x16
 1293 047c 03010000 		.4byte	.LASF75
 1294 0480 01       		.byte	0x1
 1295 0481 84       		.byte	0x84
 1296 0482 8C000000 		.4byte	0x8c
 1297 0486 1A020000 		.4byte	.LLST9
 1298 048a 16       		.uleb128 0x16
 1299 048b 86060000 		.4byte	.LASF76
 1300 048f 01       		.byte	0x1
 1301 0490 FA       		.byte	0xfa
 1302 0491 A2000000 		.4byte	0xa2
 1303 0495 44020000 		.4byte	.LLST10
 1304 0499 18       		.uleb128 0x18
 1305 049a 90010000 		.4byte	.LBB2
 1306 049e 5A000000 		.4byte	.LBE2-.LBB2
 1307 04a2 2C050000 		.4byte	0x52c
 1308 04a6 16       		.uleb128 0x16
 1309 04a7 AF010000 		.4byte	.LASF77
 1310 04ab 01       		.byte	0x1
 1311 04ac CD       		.byte	0xcd
 1312 04ad 8C000000 		.4byte	0x8c
 1313 04b1 62020000 		.4byte	.LLST11
 1314 04b5 11       		.uleb128 0x11
 1315 04b6 A2010000 		.4byte	.LVL54
 1316 04ba 37070000 		.4byte	0x737
 1317 04be C8040000 		.4byte	0x4c8
 1318 04c2 10       		.uleb128 0x10
 1319 04c3 01       		.uleb128 0x1
 1320 04c4 50       		.byte	0x50
 1321 04c5 01       		.uleb128 0x1
 1322 04c6 36       		.byte	0x36
 1323 04c7 00       		.byte	0
 1324 04c8 11       		.uleb128 0x11
 1325 04c9 AE010000 		.4byte	.LVL55
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 31


 1326 04cd 37070000 		.4byte	0x737
 1327 04d1 DB040000 		.4byte	0x4db
 1328 04d5 10       		.uleb128 0x10
 1329 04d6 01       		.uleb128 0x1
 1330 04d7 50       		.byte	0x50
 1331 04d8 01       		.uleb128 0x1
 1332 04d9 37       		.byte	0x37
 1333 04da 00       		.byte	0
 1334 04db 0E       		.uleb128 0xe
 1335 04dc B4010000 		.4byte	.LVL56
 1336 04e0 91030000 		.4byte	0x391
 1337 04e4 11       		.uleb128 0x11
 1338 04e5 C0010000 		.4byte	.LVL57
 1339 04e9 37070000 		.4byte	0x737
 1340 04ed F7040000 		.4byte	0x4f7
 1341 04f1 10       		.uleb128 0x10
 1342 04f2 01       		.uleb128 0x1
 1343 04f3 50       		.byte	0x50
 1344 04f4 01       		.uleb128 0x1
 1345 04f5 38       		.byte	0x38
 1346 04f6 00       		.byte	0
 1347 04f7 11       		.uleb128 0x11
 1348 04f8 CE010000 		.4byte	.LVL58
 1349 04fc 37070000 		.4byte	0x737
 1350 0500 0A050000 		.4byte	0x50a
 1351 0504 10       		.uleb128 0x10
 1352 0505 01       		.uleb128 0x1
 1353 0506 50       		.byte	0x50
 1354 0507 01       		.uleb128 0x1
 1355 0508 39       		.byte	0x39
 1356 0509 00       		.byte	0
 1357 050a 0E       		.uleb128 0xe
 1358 050b DC010000 		.4byte	.LVL59
 1359 050f 2A070000 		.4byte	0x72a
 1360 0513 0E       		.uleb128 0xe
 1361 0514 E0010000 		.4byte	.LVL60
 1362 0518 79070000 		.4byte	0x779
 1363 051c 0F       		.uleb128 0xf
 1364 051d E8010000 		.4byte	.LVL61
 1365 0521 86070000 		.4byte	0x786
 1366 0525 10       		.uleb128 0x10
 1367 0526 01       		.uleb128 0x1
 1368 0527 50       		.byte	0x50
 1369 0528 01       		.uleb128 0x1
 1370 0529 34       		.byte	0x34
 1371 052a 00       		.byte	0
 1372 052b 00       		.byte	0
 1373 052c 11       		.uleb128 0x11
 1374 052d 2C000000 		.4byte	.LVL12
 1375 0531 97070000 		.4byte	0x797
 1376 0535 40050000 		.4byte	0x540
 1377 0539 10       		.uleb128 0x10
 1378 053a 01       		.uleb128 0x1
 1379 053b 50       		.byte	0x50
 1380 053c 02       		.uleb128 0x2
 1381 053d 7A       		.byte	0x7a
 1382 053e 00       		.sleb128 0
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 32


 1383 053f 00       		.byte	0
 1384 0540 11       		.uleb128 0x11
 1385 0541 9E000000 		.4byte	.LVL26
 1386 0545 AC070000 		.4byte	0x7ac
 1387 0549 5E050000 		.4byte	0x55e
 1388 054d 10       		.uleb128 0x10
 1389 054e 01       		.uleb128 0x1
 1390 054f 51       		.byte	0x51
 1391 0550 05       		.uleb128 0x5
 1392 0551 03       		.byte	0x3
 1393 0552 00000000 		.4byte	sys_position
 1394 0556 10       		.uleb128 0x10
 1395 0557 01       		.uleb128 0x1
 1396 0558 50       		.byte	0x50
 1397 0559 03       		.uleb128 0x3
 1398 055a 91       		.byte	0x91
 1399 055b BC7F     		.sleb128 -68
 1400 055d 00       		.byte	0
 1401 055e 0E       		.uleb128 0xe
 1402 055f 22010000 		.4byte	.LVL34
 1403 0563 C8070000 		.4byte	0x7c8
 1404 0567 11       		.uleb128 0x11
 1405 0568 46010000 		.4byte	.LVL41
 1406 056c DD070000 		.4byte	0x7dd
 1407 0570 82050000 		.4byte	0x582
 1408 0574 10       		.uleb128 0x10
 1409 0575 01       		.uleb128 0x1
 1410 0576 51       		.byte	0x51
 1411 0577 02       		.uleb128 0x2
 1412 0578 91       		.byte	0x91
 1413 0579 4C       		.sleb128 -52
 1414 057a 10       		.uleb128 0x10
 1415 057b 01       		.uleb128 0x1
 1416 057c 50       		.byte	0x50
 1417 057d 03       		.uleb128 0x3
 1418 057e 91       		.byte	0x91
 1419 057f BC7F     		.sleb128 -68
 1420 0581 00       		.byte	0
 1421 0582 0E       		.uleb128 0xe
 1422 0583 4E010000 		.4byte	.LVL42
 1423 0587 F7070000 		.4byte	0x7f7
 1424 058b 0E       		.uleb128 0xe
 1425 058c 52010000 		.4byte	.LVL43
 1426 0590 04080000 		.4byte	0x804
 1427 0594 0E       		.uleb128 0xe
 1428 0595 58010000 		.4byte	.LVL44
 1429 0599 91030000 		.4byte	0x391
 1430 059d 0E       		.uleb128 0xe
 1431 059e 86010000 		.4byte	.LVL51
 1432 05a2 F7070000 		.4byte	0x7f7
 1433 05a6 0E       		.uleb128 0xe
 1434 05a7 F4010000 		.4byte	.LVL64
 1435 05ab 11080000 		.4byte	0x811
 1436 05af 0E       		.uleb128 0xe
 1437 05b0 FE010000 		.4byte	.LVL65
 1438 05b4 1E080000 		.4byte	0x81e
 1439 05b8 0E       		.uleb128 0xe
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 33


 1440 05b9 6A020000 		.4byte	.LVL78
 1441 05bd 2F080000 		.4byte	0x82f
 1442 05c1 0E       		.uleb128 0xe
 1443 05c2 84020000 		.4byte	.LVL82
 1444 05c6 2F080000 		.4byte	0x82f
 1445 05ca 00       		.byte	0
 1446 05cb 06       		.uleb128 0x6
 1447 05cc 04       		.byte	0x4
 1448 05cd F1020000 		.4byte	0x2f1
 1449 05d1 0B       		.uleb128 0xb
 1450 05d2 8C000000 		.4byte	0x8c
 1451 05d6 E1050000 		.4byte	0x5e1
 1452 05da 0C       		.uleb128 0xc
 1453 05db ED000000 		.4byte	0xed
 1454 05df 02       		.byte	0x2
 1455 05e0 00       		.byte	0
 1456 05e1 02       		.uleb128 0x2
 1457 05e2 01       		.byte	0x1
 1458 05e3 02       		.byte	0x2
 1459 05e4 47040000 		.4byte	.LASF78
 1460 05e8 19       		.uleb128 0x19
 1461 05e9 0F060000 		.4byte	.LASF79
 1462 05ed 01       		.byte	0x1
 1463 05ee 2201     		.2byte	0x122
 1464 05f0 00000000 		.4byte	.LFB68
 1465 05f4 40000000 		.4byte	.LFE68-.LFB68
 1466 05f8 01       		.uleb128 0x1
 1467 05f9 9C       		.byte	0x9c
 1468 05fa 65060000 		.4byte	0x665
 1469 05fe 1A       		.uleb128 0x1a
 1470 05ff 4F000000 		.4byte	.LASF70
 1471 0603 01       		.byte	0x1
 1472 0604 2201     		.2byte	0x122
 1473 0606 65060000 		.4byte	0x665
 1474 060a 75020000 		.4byte	.LLST12
 1475 060e 11       		.uleb128 0x11
 1476 060f 06000000 		.4byte	.LVL89
 1477 0613 45080000 		.4byte	0x845
 1478 0617 23060000 		.4byte	0x623
 1479 061b 10       		.uleb128 0x10
 1480 061c 01       		.uleb128 0x1
 1481 061d 50       		.byte	0x50
 1482 061e 03       		.uleb128 0x3
 1483 061f F3       		.byte	0xf3
 1484 0620 01       		.uleb128 0x1
 1485 0621 50       		.byte	0x50
 1486 0622 00       		.byte	0
 1487 0623 11       		.uleb128 0x11
 1488 0624 1A000000 		.4byte	.LVL90
 1489 0628 5A080000 		.4byte	0x85a
 1490 062c 36060000 		.4byte	0x636
 1491 0630 10       		.uleb128 0x10
 1492 0631 01       		.uleb128 0x1
 1493 0632 50       		.byte	0x50
 1494 0633 01       		.uleb128 0x1
 1495 0634 38       		.byte	0x38
 1496 0635 00       		.byte	0
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 34


 1497 0636 0E       		.uleb128 0xe
 1498 0637 1E000000 		.4byte	.LVL91
 1499 063b 79070000 		.4byte	0x779
 1500 063f 0E       		.uleb128 0xe
 1501 0640 30000000 		.4byte	.LVL92
 1502 0644 2A070000 		.4byte	0x72a
 1503 0648 11       		.uleb128 0x11
 1504 0649 36000000 		.4byte	.LVL93
 1505 064d 37070000 		.4byte	0x737
 1506 0651 5B060000 		.4byte	0x65b
 1507 0655 10       		.uleb128 0x10
 1508 0656 01       		.uleb128 0x1
 1509 0657 50       		.byte	0x50
 1510 0658 01       		.uleb128 0x1
 1511 0659 32       		.byte	0x32
 1512 065a 00       		.byte	0
 1513 065b 0E       		.uleb128 0xe
 1514 065c 3A000000 		.4byte	.LVL94
 1515 0660 79070000 		.4byte	0x779
 1516 0664 00       		.byte	0
 1517 0665 06       		.uleb128 0x6
 1518 0666 04       		.byte	0x4
 1519 0667 C5000000 		.4byte	0xc5
 1520 066b 1B       		.uleb128 0x1b
 1521 066c 0E050000 		.4byte	.LASF81
 1522 0670 08       		.byte	0x8
 1523 0671 9606     		.2byte	0x696
 1524 0673 77060000 		.4byte	0x677
 1525 0677 08       		.uleb128 0x8
 1526 0678 A2000000 		.4byte	0xa2
 1527 067c 1C       		.uleb128 0x1c
 1528 067d 7D010000 		.4byte	.LASF82
 1529 0681 05       		.byte	0x5
 1530 0682 6A       		.byte	0x6a
 1531 0683 FD010000 		.4byte	0x1fd
 1532 0687 1D       		.uleb128 0x1d
 1533 0688 73797300 		.ascii	"sys\000"
 1534 068c 06       		.byte	0x6
 1535 068d 92       		.byte	0x92
 1536 068e B9020000 		.4byte	0x2b9
 1537 0692 0B       		.uleb128 0xb
 1538 0693 A2000000 		.4byte	0xa2
 1539 0697 A2060000 		.4byte	0x6a2
 1540 069b 0C       		.uleb128 0xc
 1541 069c ED000000 		.4byte	0xed
 1542 06a0 02       		.byte	0x2
 1543 06a1 00       		.byte	0
 1544 06a2 1E       		.uleb128 0x1e
 1545 06a3 B7010000 		.4byte	.LASF83
 1546 06a7 06       		.byte	0x6
 1547 06a8 95       		.byte	0x95
 1548 06a9 92060000 		.4byte	0x692
 1549 06ad 05       		.uleb128 0x5
 1550 06ae 03       		.byte	0x3
 1551 06af 00000000 		.4byte	sys_position
 1552 06b3 1E       		.uleb128 0x1e
 1553 06b4 1E030000 		.4byte	.LASF84
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 35


 1554 06b8 06       		.byte	0x6
 1555 06b9 96       		.byte	0x96
 1556 06ba 92060000 		.4byte	0x692
 1557 06be 05       		.uleb128 0x5
 1558 06bf 03       		.byte	0x3
 1559 06c0 00000000 		.4byte	sys_probe_position
 1560 06c4 1E       		.uleb128 0x1e
 1561 06c5 A9040000 		.4byte	.LASF85
 1562 06c9 06       		.byte	0x6
 1563 06ca 98       		.byte	0x98
 1564 06cb F4000000 		.4byte	0xf4
 1565 06cf 05       		.uleb128 0x5
 1566 06d0 03       		.byte	0x3
 1567 06d1 00000000 		.4byte	sys_probe_state
 1568 06d5 1E       		.uleb128 0x1e
 1569 06d6 74060000 		.4byte	.LASF86
 1570 06da 06       		.byte	0x6
 1571 06db 99       		.byte	0x99
 1572 06dc F4000000 		.4byte	0xf4
 1573 06e0 05       		.uleb128 0x5
 1574 06e1 03       		.byte	0x3
 1575 06e2 00000000 		.4byte	sys_rt_exec_state
 1576 06e6 1E       		.uleb128 0x1e
 1577 06e7 0B000000 		.4byte	.LASF87
 1578 06eb 06       		.byte	0x6
 1579 06ec 9A       		.byte	0x9a
 1580 06ed F4000000 		.4byte	0xf4
 1581 06f1 05       		.uleb128 0x5
 1582 06f2 03       		.byte	0x3
 1583 06f3 00000000 		.4byte	sys_rt_exec_alarm
 1584 06f7 1E       		.uleb128 0x1e
 1585 06f8 31030000 		.4byte	.LASF88
 1586 06fc 06       		.byte	0x6
 1587 06fd 9B       		.byte	0x9b
 1588 06fe F4000000 		.4byte	0xf4
 1589 0702 05       		.uleb128 0x5
 1590 0703 03       		.byte	0x3
 1591 0704 00000000 		.4byte	sys_rt_exec_motion_override
 1592 0708 1E       		.uleb128 0x1e
 1593 0709 1D000000 		.4byte	.LASF89
 1594 070d 06       		.byte	0x6
 1595 070e 9C       		.byte	0x9c
 1596 070f F4000000 		.4byte	0xf4
 1597 0713 05       		.uleb128 0x5
 1598 0714 03       		.byte	0x3
 1599 0715 00000000 		.4byte	sys_rt_exec_accessory_override
 1600 0719 1E       		.uleb128 0x1e
 1601 071a D4010000 		.4byte	.LASF90
 1602 071e 09       		.byte	0x9
 1603 071f 11       		.byte	0x11
 1604 0720 8C000000 		.4byte	0x8c
 1605 0724 05       		.uleb128 0x5
 1606 0725 03       		.byte	0x3
 1607 0726 00000000 		.4byte	exec_lcd_status
 1608 072a 1F       		.uleb128 0x1f
 1609 072b 68020000 		.4byte	.LASF96
 1610 072f 0C       		.byte	0xc
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 36


 1611 0730 42       		.byte	0x42
 1612 0731 37070000 		.4byte	0x737
 1613 0735 20       		.uleb128 0x20
 1614 0736 00       		.byte	0
 1615 0737 21       		.uleb128 0x21
 1616 0738 47010000 		.4byte	.LASF94
 1617 073c 06       		.byte	0x6
 1618 073d C7       		.byte	0xc7
 1619 073e 48070000 		.4byte	0x748
 1620 0742 22       		.uleb128 0x22
 1621 0743 8C000000 		.4byte	0x8c
 1622 0747 00       		.byte	0
 1623 0748 23       		.uleb128 0x23
 1624 0749 C7020000 		.4byte	.LASF91
 1625 074d 0A       		.byte	0xa
 1626 074e 2A       		.byte	0x2a
 1627 074f 23       		.uleb128 0x23
 1628 0750 5C060000 		.4byte	.LASF92
 1629 0754 0B       		.byte	0xb
 1630 0755 19       		.byte	0x19
 1631 0756 23       		.uleb128 0x23
 1632 0757 D8030000 		.4byte	.LASF93
 1633 075b 0A       		.byte	0xa
 1634 075c 29       		.byte	0x29
 1635 075d 21       		.uleb128 0x21
 1636 075e D1040000 		.4byte	.LASF95
 1637 0762 0B       		.byte	0xb
 1638 0763 18       		.byte	0x18
 1639 0764 6E070000 		.4byte	0x76e
 1640 0768 22       		.uleb128 0x22
 1641 0769 DA000000 		.4byte	0xda
 1642 076d 00       		.byte	0
 1643 076e 24       		.uleb128 0x24
 1644 076f 88000000 		.4byte	.LASF113
 1645 0773 0A       		.byte	0xa
 1646 0774 28       		.byte	0x28
 1647 0775 AD000000 		.4byte	0xad
 1648 0779 1F       		.uleb128 0x1f
 1649 077a 31060000 		.4byte	.LASF97
 1650 077e 0D       		.byte	0xd
 1651 077f 29       		.byte	0x29
 1652 0780 86070000 		.4byte	0x786
 1653 0784 20       		.uleb128 0x20
 1654 0785 00       		.byte	0
 1655 0786 21       		.uleb128 0x21
 1656 0787 4D030000 		.4byte	.LASF98
 1657 078b 06       		.byte	0x6
 1658 078c C6       		.byte	0xc6
 1659 078d 97070000 		.4byte	0x797
 1660 0791 22       		.uleb128 0x22
 1661 0792 8C000000 		.4byte	0x8c
 1662 0796 00       		.byte	0
 1663 0797 25       		.uleb128 0x25
 1664 0798 4A020000 		.4byte	.LASF100
 1665 079c 05       		.byte	0x5
 1666 079d 88       		.byte	0x88
 1667 079e 8C000000 		.4byte	0x8c
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 37


 1668 07a2 AC070000 		.4byte	0x7ac
 1669 07a6 22       		.uleb128 0x22
 1670 07a7 8C000000 		.4byte	0x8c
 1671 07ab 00       		.byte	0
 1672 07ac 21       		.uleb128 0x21
 1673 07ad 8E030000 		.4byte	.LASF99
 1674 07b1 06       		.byte	0x6
 1675 07b2 B9       		.byte	0xb9
 1676 07b3 C2070000 		.4byte	0x7c2
 1677 07b7 22       		.uleb128 0x22
 1678 07b8 65060000 		.4byte	0x665
 1679 07bc 22       		.uleb128 0x22
 1680 07bd C2070000 		.4byte	0x7c2
 1681 07c1 00       		.byte	0
 1682 07c2 06       		.uleb128 0x6
 1683 07c3 04       		.byte	0x4
 1684 07c4 A2000000 		.4byte	0xa2
 1685 07c8 25       		.uleb128 0x25
 1686 07c9 23050000 		.4byte	.LASF101
 1687 07cd 0E       		.byte	0xe
 1688 07ce 86       		.byte	0x86
 1689 07cf CC000000 		.4byte	0xcc
 1690 07d3 DD070000 		.4byte	0x7dd
 1691 07d7 22       		.uleb128 0x22
 1692 07d8 CC000000 		.4byte	0xcc
 1693 07dc 00       		.byte	0
 1694 07dd 25       		.uleb128 0x25
 1695 07de F3010000 		.4byte	.LASF102
 1696 07e2 07       		.byte	0x7
 1697 07e3 6D       		.byte	0x6d
 1698 07e4 8C000000 		.4byte	0x8c
 1699 07e8 F7070000 		.4byte	0x7f7
 1700 07ec 22       		.uleb128 0x22
 1701 07ed 65060000 		.4byte	0x665
 1702 07f1 22       		.uleb128 0x22
 1703 07f2 CB050000 		.4byte	0x5cb
 1704 07f6 00       		.byte	0
 1705 07f7 1F       		.uleb128 0x1f
 1706 07f8 56000000 		.4byte	.LASF103
 1707 07fc 0F       		.byte	0xf
 1708 07fd 35       		.byte	0x35
 1709 07fe 04080000 		.4byte	0x804
 1710 0802 20       		.uleb128 0x20
 1711 0803 00       		.byte	0
 1712 0804 1F       		.uleb128 0x1f
 1713 0805 00000000 		.4byte	.LASF104
 1714 0809 0F       		.byte	0xf
 1715 080a 23       		.byte	0x23
 1716 080b 11080000 		.4byte	0x811
 1717 080f 20       		.uleb128 0x20
 1718 0810 00       		.byte	0
 1719 0811 1F       		.uleb128 0x1f
 1720 0812 1A010000 		.4byte	.LASF105
 1721 0816 0F       		.byte	0xf
 1722 0817 2C       		.byte	0x2c
 1723 0818 1E080000 		.4byte	0x81e
 1724 081c 20       		.uleb128 0x20
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 38


 1725 081d 00       		.byte	0
 1726 081e 21       		.uleb128 0x21
 1727 081f 6C060000 		.4byte	.LASF106
 1728 0823 10       		.byte	0x10
 1729 0824 76       		.byte	0x76
 1730 0825 2F080000 		.4byte	0x82f
 1731 0829 22       		.uleb128 0x22
 1732 082a B9000000 		.4byte	0xb9
 1733 082e 00       		.byte	0
 1734 082f 26       		.uleb128 0x26
 1735 0830 81000000 		.4byte	.LASF107
 1736 0834 0E       		.byte	0xe
 1737 0835 1B01     		.2byte	0x11b
 1738 0837 62000000 		.4byte	0x62
 1739 083b 45080000 		.4byte	0x845
 1740 083f 22       		.uleb128 0x22
 1741 0840 CC000000 		.4byte	0xcc
 1742 0844 00       		.byte	0
 1743 0845 25       		.uleb128 0x25
 1744 0846 2C010000 		.4byte	.LASF108
 1745 084a 06       		.byte	0x6
 1746 084b C2       		.byte	0xc2
 1747 084c 8C000000 		.4byte	0x8c
 1748 0850 5A080000 		.4byte	0x85a
 1749 0854 22       		.uleb128 0x22
 1750 0855 65060000 		.4byte	0x665
 1751 0859 00       		.byte	0
 1752 085a 27       		.uleb128 0x27
 1753 085b C8000000 		.4byte	.LASF109
 1754 085f 06       		.byte	0x6
 1755 0860 C5       		.byte	0xc5
 1756 0861 22       		.uleb128 0x22
 1757 0862 8C000000 		.4byte	0x8c
 1758 0866 00       		.byte	0
 1759 0867 00       		.byte	0
 1760              		.section	.debug_abbrev,"",%progbits
 1761              	.Ldebug_abbrev0:
 1762 0000 01       		.uleb128 0x1
 1763 0001 11       		.uleb128 0x11
 1764 0002 01       		.byte	0x1
 1765 0003 25       		.uleb128 0x25
 1766 0004 0E       		.uleb128 0xe
 1767 0005 13       		.uleb128 0x13
 1768 0006 0B       		.uleb128 0xb
 1769 0007 03       		.uleb128 0x3
 1770 0008 0E       		.uleb128 0xe
 1771 0009 1B       		.uleb128 0x1b
 1772 000a 0E       		.uleb128 0xe
 1773 000b 55       		.uleb128 0x55
 1774 000c 17       		.uleb128 0x17
 1775 000d 11       		.uleb128 0x11
 1776 000e 01       		.uleb128 0x1
 1777 000f 10       		.uleb128 0x10
 1778 0010 17       		.uleb128 0x17
 1779 0011 00       		.byte	0
 1780 0012 00       		.byte	0
 1781 0013 02       		.uleb128 0x2
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 39


 1782 0014 24       		.uleb128 0x24
 1783 0015 00       		.byte	0
 1784 0016 0B       		.uleb128 0xb
 1785 0017 0B       		.uleb128 0xb
 1786 0018 3E       		.uleb128 0x3e
 1787 0019 0B       		.uleb128 0xb
 1788 001a 03       		.uleb128 0x3
 1789 001b 0E       		.uleb128 0xe
 1790 001c 00       		.byte	0
 1791 001d 00       		.byte	0
 1792 001e 03       		.uleb128 0x3
 1793 001f 16       		.uleb128 0x16
 1794 0020 00       		.byte	0
 1795 0021 03       		.uleb128 0x3
 1796 0022 0E       		.uleb128 0xe
 1797 0023 3A       		.uleb128 0x3a
 1798 0024 0B       		.uleb128 0xb
 1799 0025 3B       		.uleb128 0x3b
 1800 0026 0B       		.uleb128 0xb
 1801 0027 49       		.uleb128 0x49
 1802 0028 13       		.uleb128 0x13
 1803 0029 00       		.byte	0
 1804 002a 00       		.byte	0
 1805 002b 04       		.uleb128 0x4
 1806 002c 24       		.uleb128 0x24
 1807 002d 00       		.byte	0
 1808 002e 0B       		.uleb128 0xb
 1809 002f 0B       		.uleb128 0xb
 1810 0030 3E       		.uleb128 0x3e
 1811 0031 0B       		.uleb128 0xb
 1812 0032 03       		.uleb128 0x3
 1813 0033 08       		.uleb128 0x8
 1814 0034 00       		.byte	0
 1815 0035 00       		.byte	0
 1816 0036 05       		.uleb128 0x5
 1817 0037 16       		.uleb128 0x16
 1818 0038 00       		.byte	0
 1819 0039 03       		.uleb128 0x3
 1820 003a 0E       		.uleb128 0xe
 1821 003b 3A       		.uleb128 0x3a
 1822 003c 0B       		.uleb128 0xb
 1823 003d 3B       		.uleb128 0x3b
 1824 003e 05       		.uleb128 0x5
 1825 003f 49       		.uleb128 0x49
 1826 0040 13       		.uleb128 0x13
 1827 0041 00       		.byte	0
 1828 0042 00       		.byte	0
 1829 0043 06       		.uleb128 0x6
 1830 0044 0F       		.uleb128 0xf
 1831 0045 00       		.byte	0
 1832 0046 0B       		.uleb128 0xb
 1833 0047 0B       		.uleb128 0xb
 1834 0048 49       		.uleb128 0x49
 1835 0049 13       		.uleb128 0x13
 1836 004a 00       		.byte	0
 1837 004b 00       		.byte	0
 1838 004c 07       		.uleb128 0x7
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 40


 1839 004d 15       		.uleb128 0x15
 1840 004e 00       		.byte	0
 1841 004f 27       		.uleb128 0x27
 1842 0050 19       		.uleb128 0x19
 1843 0051 00       		.byte	0
 1844 0052 00       		.byte	0
 1845 0053 08       		.uleb128 0x8
 1846 0054 35       		.uleb128 0x35
 1847 0055 00       		.byte	0
 1848 0056 49       		.uleb128 0x49
 1849 0057 13       		.uleb128 0x13
 1850 0058 00       		.byte	0
 1851 0059 00       		.byte	0
 1852 005a 09       		.uleb128 0x9
 1853 005b 13       		.uleb128 0x13
 1854 005c 01       		.byte	0x1
 1855 005d 0B       		.uleb128 0xb
 1856 005e 0B       		.uleb128 0xb
 1857 005f 3A       		.uleb128 0x3a
 1858 0060 0B       		.uleb128 0xb
 1859 0061 3B       		.uleb128 0x3b
 1860 0062 0B       		.uleb128 0xb
 1861 0063 01       		.uleb128 0x1
 1862 0064 13       		.uleb128 0x13
 1863 0065 00       		.byte	0
 1864 0066 00       		.byte	0
 1865 0067 0A       		.uleb128 0xa
 1866 0068 0D       		.uleb128 0xd
 1867 0069 00       		.byte	0
 1868 006a 03       		.uleb128 0x3
 1869 006b 0E       		.uleb128 0xe
 1870 006c 3A       		.uleb128 0x3a
 1871 006d 0B       		.uleb128 0xb
 1872 006e 3B       		.uleb128 0x3b
 1873 006f 0B       		.uleb128 0xb
 1874 0070 49       		.uleb128 0x49
 1875 0071 13       		.uleb128 0x13
 1876 0072 38       		.uleb128 0x38
 1877 0073 0B       		.uleb128 0xb
 1878 0074 00       		.byte	0
 1879 0075 00       		.byte	0
 1880 0076 0B       		.uleb128 0xb
 1881 0077 01       		.uleb128 0x1
 1882 0078 01       		.byte	0x1
 1883 0079 49       		.uleb128 0x49
 1884 007a 13       		.uleb128 0x13
 1885 007b 01       		.uleb128 0x1
 1886 007c 13       		.uleb128 0x13
 1887 007d 00       		.byte	0
 1888 007e 00       		.byte	0
 1889 007f 0C       		.uleb128 0xc
 1890 0080 21       		.uleb128 0x21
 1891 0081 00       		.byte	0
 1892 0082 49       		.uleb128 0x49
 1893 0083 13       		.uleb128 0x13
 1894 0084 2F       		.uleb128 0x2f
 1895 0085 0B       		.uleb128 0xb
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 41


 1896 0086 00       		.byte	0
 1897 0087 00       		.byte	0
 1898 0088 0D       		.uleb128 0xd
 1899 0089 2E       		.uleb128 0x2e
 1900 008a 01       		.byte	0x1
 1901 008b 3F       		.uleb128 0x3f
 1902 008c 19       		.uleb128 0x19
 1903 008d 03       		.uleb128 0x3
 1904 008e 0E       		.uleb128 0xe
 1905 008f 3A       		.uleb128 0x3a
 1906 0090 0B       		.uleb128 0xb
 1907 0091 3B       		.uleb128 0x3b
 1908 0092 0B       		.uleb128 0xb
 1909 0093 11       		.uleb128 0x11
 1910 0094 01       		.uleb128 0x1
 1911 0095 12       		.uleb128 0x12
 1912 0096 06       		.uleb128 0x6
 1913 0097 40       		.uleb128 0x40
 1914 0098 18       		.uleb128 0x18
 1915 0099 9742     		.uleb128 0x2117
 1916 009b 19       		.uleb128 0x19
 1917 009c 01       		.uleb128 0x1
 1918 009d 13       		.uleb128 0x13
 1919 009e 00       		.byte	0
 1920 009f 00       		.byte	0
 1921 00a0 0E       		.uleb128 0xe
 1922 00a1 898201   		.uleb128 0x4109
 1923 00a4 00       		.byte	0
 1924 00a5 11       		.uleb128 0x11
 1925 00a6 01       		.uleb128 0x1
 1926 00a7 31       		.uleb128 0x31
 1927 00a8 13       		.uleb128 0x13
 1928 00a9 00       		.byte	0
 1929 00aa 00       		.byte	0
 1930 00ab 0F       		.uleb128 0xf
 1931 00ac 898201   		.uleb128 0x4109
 1932 00af 01       		.byte	0x1
 1933 00b0 11       		.uleb128 0x11
 1934 00b1 01       		.uleb128 0x1
 1935 00b2 31       		.uleb128 0x31
 1936 00b3 13       		.uleb128 0x13
 1937 00b4 00       		.byte	0
 1938 00b5 00       		.byte	0
 1939 00b6 10       		.uleb128 0x10
 1940 00b7 8A8201   		.uleb128 0x410a
 1941 00ba 00       		.byte	0
 1942 00bb 02       		.uleb128 0x2
 1943 00bc 18       		.uleb128 0x18
 1944 00bd 9142     		.uleb128 0x2111
 1945 00bf 18       		.uleb128 0x18
 1946 00c0 00       		.byte	0
 1947 00c1 00       		.byte	0
 1948 00c2 11       		.uleb128 0x11
 1949 00c3 898201   		.uleb128 0x4109
 1950 00c6 01       		.byte	0x1
 1951 00c7 11       		.uleb128 0x11
 1952 00c8 01       		.uleb128 0x1
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 42


 1953 00c9 31       		.uleb128 0x31
 1954 00ca 13       		.uleb128 0x13
 1955 00cb 01       		.uleb128 0x1
 1956 00cc 13       		.uleb128 0x13
 1957 00cd 00       		.byte	0
 1958 00ce 00       		.byte	0
 1959 00cf 12       		.uleb128 0x12
 1960 00d0 2E       		.uleb128 0x2e
 1961 00d1 01       		.byte	0x1
 1962 00d2 3F       		.uleb128 0x3f
 1963 00d3 19       		.uleb128 0x19
 1964 00d4 03       		.uleb128 0x3
 1965 00d5 0E       		.uleb128 0xe
 1966 00d6 3A       		.uleb128 0x3a
 1967 00d7 0B       		.uleb128 0xb
 1968 00d8 3B       		.uleb128 0x3b
 1969 00d9 0B       		.uleb128 0xb
 1970 00da 49       		.uleb128 0x49
 1971 00db 13       		.uleb128 0x13
 1972 00dc 11       		.uleb128 0x11
 1973 00dd 01       		.uleb128 0x1
 1974 00de 12       		.uleb128 0x12
 1975 00df 06       		.uleb128 0x6
 1976 00e0 40       		.uleb128 0x40
 1977 00e1 18       		.uleb128 0x18
 1978 00e2 9742     		.uleb128 0x2117
 1979 00e4 19       		.uleb128 0x19
 1980 00e5 01       		.uleb128 0x1
 1981 00e6 13       		.uleb128 0x13
 1982 00e7 00       		.byte	0
 1983 00e8 00       		.byte	0
 1984 00e9 13       		.uleb128 0x13
 1985 00ea 2E       		.uleb128 0x2e
 1986 00eb 01       		.byte	0x1
 1987 00ec 3F       		.uleb128 0x3f
 1988 00ed 19       		.uleb128 0x19
 1989 00ee 03       		.uleb128 0x3
 1990 00ef 0E       		.uleb128 0xe
 1991 00f0 3A       		.uleb128 0x3a
 1992 00f1 0B       		.uleb128 0xb
 1993 00f2 3B       		.uleb128 0x3b
 1994 00f3 0B       		.uleb128 0xb
 1995 00f4 27       		.uleb128 0x27
 1996 00f5 19       		.uleb128 0x19
 1997 00f6 11       		.uleb128 0x11
 1998 00f7 01       		.uleb128 0x1
 1999 00f8 12       		.uleb128 0x12
 2000 00f9 06       		.uleb128 0x6
 2001 00fa 40       		.uleb128 0x40
 2002 00fb 18       		.uleb128 0x18
 2003 00fc 9642     		.uleb128 0x2116
 2004 00fe 19       		.uleb128 0x19
 2005 00ff 01       		.uleb128 0x1
 2006 0100 13       		.uleb128 0x13
 2007 0101 00       		.byte	0
 2008 0102 00       		.byte	0
 2009 0103 14       		.uleb128 0x14
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 43


 2010 0104 05       		.uleb128 0x5
 2011 0105 00       		.byte	0
 2012 0106 03       		.uleb128 0x3
 2013 0107 0E       		.uleb128 0xe
 2014 0108 3A       		.uleb128 0x3a
 2015 0109 0B       		.uleb128 0xb
 2016 010a 3B       		.uleb128 0x3b
 2017 010b 0B       		.uleb128 0xb
 2018 010c 49       		.uleb128 0x49
 2019 010d 13       		.uleb128 0x13
 2020 010e 02       		.uleb128 0x2
 2021 010f 17       		.uleb128 0x17
 2022 0110 00       		.byte	0
 2023 0111 00       		.byte	0
 2024 0112 15       		.uleb128 0x15
 2025 0113 34       		.uleb128 0x34
 2026 0114 00       		.byte	0
 2027 0115 03       		.uleb128 0x3
 2028 0116 0E       		.uleb128 0xe
 2029 0117 3A       		.uleb128 0x3a
 2030 0118 0B       		.uleb128 0xb
 2031 0119 3B       		.uleb128 0x3b
 2032 011a 0B       		.uleb128 0xb
 2033 011b 49       		.uleb128 0x49
 2034 011c 13       		.uleb128 0x13
 2035 011d 02       		.uleb128 0x2
 2036 011e 18       		.uleb128 0x18
 2037 011f 00       		.byte	0
 2038 0120 00       		.byte	0
 2039 0121 16       		.uleb128 0x16
 2040 0122 34       		.uleb128 0x34
 2041 0123 00       		.byte	0
 2042 0124 03       		.uleb128 0x3
 2043 0125 0E       		.uleb128 0xe
 2044 0126 3A       		.uleb128 0x3a
 2045 0127 0B       		.uleb128 0xb
 2046 0128 3B       		.uleb128 0x3b
 2047 0129 0B       		.uleb128 0xb
 2048 012a 49       		.uleb128 0x49
 2049 012b 13       		.uleb128 0x13
 2050 012c 02       		.uleb128 0x2
 2051 012d 17       		.uleb128 0x17
 2052 012e 00       		.byte	0
 2053 012f 00       		.byte	0
 2054 0130 17       		.uleb128 0x17
 2055 0131 34       		.uleb128 0x34
 2056 0132 00       		.byte	0
 2057 0133 03       		.uleb128 0x3
 2058 0134 08       		.uleb128 0x8
 2059 0135 3A       		.uleb128 0x3a
 2060 0136 0B       		.uleb128 0xb
 2061 0137 3B       		.uleb128 0x3b
 2062 0138 0B       		.uleb128 0xb
 2063 0139 49       		.uleb128 0x49
 2064 013a 13       		.uleb128 0x13
 2065 013b 02       		.uleb128 0x2
 2066 013c 17       		.uleb128 0x17
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 44


 2067 013d 00       		.byte	0
 2068 013e 00       		.byte	0
 2069 013f 18       		.uleb128 0x18
 2070 0140 0B       		.uleb128 0xb
 2071 0141 01       		.byte	0x1
 2072 0142 11       		.uleb128 0x11
 2073 0143 01       		.uleb128 0x1
 2074 0144 12       		.uleb128 0x12
 2075 0145 06       		.uleb128 0x6
 2076 0146 01       		.uleb128 0x1
 2077 0147 13       		.uleb128 0x13
 2078 0148 00       		.byte	0
 2079 0149 00       		.byte	0
 2080 014a 19       		.uleb128 0x19
 2081 014b 2E       		.uleb128 0x2e
 2082 014c 01       		.byte	0x1
 2083 014d 3F       		.uleb128 0x3f
 2084 014e 19       		.uleb128 0x19
 2085 014f 03       		.uleb128 0x3
 2086 0150 0E       		.uleb128 0xe
 2087 0151 3A       		.uleb128 0x3a
 2088 0152 0B       		.uleb128 0xb
 2089 0153 3B       		.uleb128 0x3b
 2090 0154 05       		.uleb128 0x5
 2091 0155 27       		.uleb128 0x27
 2092 0156 19       		.uleb128 0x19
 2093 0157 11       		.uleb128 0x11
 2094 0158 01       		.uleb128 0x1
 2095 0159 12       		.uleb128 0x12
 2096 015a 06       		.uleb128 0x6
 2097 015b 40       		.uleb128 0x40
 2098 015c 18       		.uleb128 0x18
 2099 015d 9742     		.uleb128 0x2117
 2100 015f 19       		.uleb128 0x19
 2101 0160 01       		.uleb128 0x1
 2102 0161 13       		.uleb128 0x13
 2103 0162 00       		.byte	0
 2104 0163 00       		.byte	0
 2105 0164 1A       		.uleb128 0x1a
 2106 0165 05       		.uleb128 0x5
 2107 0166 00       		.byte	0
 2108 0167 03       		.uleb128 0x3
 2109 0168 0E       		.uleb128 0xe
 2110 0169 3A       		.uleb128 0x3a
 2111 016a 0B       		.uleb128 0xb
 2112 016b 3B       		.uleb128 0x3b
 2113 016c 05       		.uleb128 0x5
 2114 016d 49       		.uleb128 0x49
 2115 016e 13       		.uleb128 0x13
 2116 016f 02       		.uleb128 0x2
 2117 0170 17       		.uleb128 0x17
 2118 0171 00       		.byte	0
 2119 0172 00       		.byte	0
 2120 0173 1B       		.uleb128 0x1b
 2121 0174 34       		.uleb128 0x34
 2122 0175 00       		.byte	0
 2123 0176 03       		.uleb128 0x3
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 45


 2124 0177 0E       		.uleb128 0xe
 2125 0178 3A       		.uleb128 0x3a
 2126 0179 0B       		.uleb128 0xb
 2127 017a 3B       		.uleb128 0x3b
 2128 017b 05       		.uleb128 0x5
 2129 017c 49       		.uleb128 0x49
 2130 017d 13       		.uleb128 0x13
 2131 017e 3F       		.uleb128 0x3f
 2132 017f 19       		.uleb128 0x19
 2133 0180 3C       		.uleb128 0x3c
 2134 0181 19       		.uleb128 0x19
 2135 0182 00       		.byte	0
 2136 0183 00       		.byte	0
 2137 0184 1C       		.uleb128 0x1c
 2138 0185 34       		.uleb128 0x34
 2139 0186 00       		.byte	0
 2140 0187 03       		.uleb128 0x3
 2141 0188 0E       		.uleb128 0xe
 2142 0189 3A       		.uleb128 0x3a
 2143 018a 0B       		.uleb128 0xb
 2144 018b 3B       		.uleb128 0x3b
 2145 018c 0B       		.uleb128 0xb
 2146 018d 49       		.uleb128 0x49
 2147 018e 13       		.uleb128 0x13
 2148 018f 3F       		.uleb128 0x3f
 2149 0190 19       		.uleb128 0x19
 2150 0191 3C       		.uleb128 0x3c
 2151 0192 19       		.uleb128 0x19
 2152 0193 00       		.byte	0
 2153 0194 00       		.byte	0
 2154 0195 1D       		.uleb128 0x1d
 2155 0196 34       		.uleb128 0x34
 2156 0197 00       		.byte	0
 2157 0198 03       		.uleb128 0x3
 2158 0199 08       		.uleb128 0x8
 2159 019a 3A       		.uleb128 0x3a
 2160 019b 0B       		.uleb128 0xb
 2161 019c 3B       		.uleb128 0x3b
 2162 019d 0B       		.uleb128 0xb
 2163 019e 49       		.uleb128 0x49
 2164 019f 13       		.uleb128 0x13
 2165 01a0 3F       		.uleb128 0x3f
 2166 01a1 19       		.uleb128 0x19
 2167 01a2 3C       		.uleb128 0x3c
 2168 01a3 19       		.uleb128 0x19
 2169 01a4 00       		.byte	0
 2170 01a5 00       		.byte	0
 2171 01a6 1E       		.uleb128 0x1e
 2172 01a7 34       		.uleb128 0x34
 2173 01a8 00       		.byte	0
 2174 01a9 03       		.uleb128 0x3
 2175 01aa 0E       		.uleb128 0xe
 2176 01ab 3A       		.uleb128 0x3a
 2177 01ac 0B       		.uleb128 0xb
 2178 01ad 3B       		.uleb128 0x3b
 2179 01ae 0B       		.uleb128 0xb
 2180 01af 49       		.uleb128 0x49
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 46


 2181 01b0 13       		.uleb128 0x13
 2182 01b1 3F       		.uleb128 0x3f
 2183 01b2 19       		.uleb128 0x19
 2184 01b3 02       		.uleb128 0x2
 2185 01b4 18       		.uleb128 0x18
 2186 01b5 00       		.byte	0
 2187 01b6 00       		.byte	0
 2188 01b7 1F       		.uleb128 0x1f
 2189 01b8 2E       		.uleb128 0x2e
 2190 01b9 01       		.byte	0x1
 2191 01ba 3F       		.uleb128 0x3f
 2192 01bb 19       		.uleb128 0x19
 2193 01bc 03       		.uleb128 0x3
 2194 01bd 0E       		.uleb128 0xe
 2195 01be 3A       		.uleb128 0x3a
 2196 01bf 0B       		.uleb128 0xb
 2197 01c0 3B       		.uleb128 0x3b
 2198 01c1 0B       		.uleb128 0xb
 2199 01c2 3C       		.uleb128 0x3c
 2200 01c3 19       		.uleb128 0x19
 2201 01c4 01       		.uleb128 0x1
 2202 01c5 13       		.uleb128 0x13
 2203 01c6 00       		.byte	0
 2204 01c7 00       		.byte	0
 2205 01c8 20       		.uleb128 0x20
 2206 01c9 18       		.uleb128 0x18
 2207 01ca 00       		.byte	0
 2208 01cb 00       		.byte	0
 2209 01cc 00       		.byte	0
 2210 01cd 21       		.uleb128 0x21
 2211 01ce 2E       		.uleb128 0x2e
 2212 01cf 01       		.byte	0x1
 2213 01d0 3F       		.uleb128 0x3f
 2214 01d1 19       		.uleb128 0x19
 2215 01d2 03       		.uleb128 0x3
 2216 01d3 0E       		.uleb128 0xe
 2217 01d4 3A       		.uleb128 0x3a
 2218 01d5 0B       		.uleb128 0xb
 2219 01d6 3B       		.uleb128 0x3b
 2220 01d7 0B       		.uleb128 0xb
 2221 01d8 27       		.uleb128 0x27
 2222 01d9 19       		.uleb128 0x19
 2223 01da 3C       		.uleb128 0x3c
 2224 01db 19       		.uleb128 0x19
 2225 01dc 01       		.uleb128 0x1
 2226 01dd 13       		.uleb128 0x13
 2227 01de 00       		.byte	0
 2228 01df 00       		.byte	0
 2229 01e0 22       		.uleb128 0x22
 2230 01e1 05       		.uleb128 0x5
 2231 01e2 00       		.byte	0
 2232 01e3 49       		.uleb128 0x49
 2233 01e4 13       		.uleb128 0x13
 2234 01e5 00       		.byte	0
 2235 01e6 00       		.byte	0
 2236 01e7 23       		.uleb128 0x23
 2237 01e8 2E       		.uleb128 0x2e
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 47


 2238 01e9 00       		.byte	0
 2239 01ea 3F       		.uleb128 0x3f
 2240 01eb 19       		.uleb128 0x19
 2241 01ec 03       		.uleb128 0x3
 2242 01ed 0E       		.uleb128 0xe
 2243 01ee 3A       		.uleb128 0x3a
 2244 01ef 0B       		.uleb128 0xb
 2245 01f0 3B       		.uleb128 0x3b
 2246 01f1 0B       		.uleb128 0xb
 2247 01f2 27       		.uleb128 0x27
 2248 01f3 19       		.uleb128 0x19
 2249 01f4 3C       		.uleb128 0x3c
 2250 01f5 19       		.uleb128 0x19
 2251 01f6 00       		.byte	0
 2252 01f7 00       		.byte	0
 2253 01f8 24       		.uleb128 0x24
 2254 01f9 2E       		.uleb128 0x2e
 2255 01fa 00       		.byte	0
 2256 01fb 3F       		.uleb128 0x3f
 2257 01fc 19       		.uleb128 0x19
 2258 01fd 03       		.uleb128 0x3
 2259 01fe 0E       		.uleb128 0xe
 2260 01ff 3A       		.uleb128 0x3a
 2261 0200 0B       		.uleb128 0xb
 2262 0201 3B       		.uleb128 0x3b
 2263 0202 0B       		.uleb128 0xb
 2264 0203 27       		.uleb128 0x27
 2265 0204 19       		.uleb128 0x19
 2266 0205 49       		.uleb128 0x49
 2267 0206 13       		.uleb128 0x13
 2268 0207 3C       		.uleb128 0x3c
 2269 0208 19       		.uleb128 0x19
 2270 0209 00       		.byte	0
 2271 020a 00       		.byte	0
 2272 020b 25       		.uleb128 0x25
 2273 020c 2E       		.uleb128 0x2e
 2274 020d 01       		.byte	0x1
 2275 020e 3F       		.uleb128 0x3f
 2276 020f 19       		.uleb128 0x19
 2277 0210 03       		.uleb128 0x3
 2278 0211 0E       		.uleb128 0xe
 2279 0212 3A       		.uleb128 0x3a
 2280 0213 0B       		.uleb128 0xb
 2281 0214 3B       		.uleb128 0x3b
 2282 0215 0B       		.uleb128 0xb
 2283 0216 27       		.uleb128 0x27
 2284 0217 19       		.uleb128 0x19
 2285 0218 49       		.uleb128 0x49
 2286 0219 13       		.uleb128 0x13
 2287 021a 3C       		.uleb128 0x3c
 2288 021b 19       		.uleb128 0x19
 2289 021c 01       		.uleb128 0x1
 2290 021d 13       		.uleb128 0x13
 2291 021e 00       		.byte	0
 2292 021f 00       		.byte	0
 2293 0220 26       		.uleb128 0x26
 2294 0221 2E       		.uleb128 0x2e
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 48


 2295 0222 01       		.byte	0x1
 2296 0223 3F       		.uleb128 0x3f
 2297 0224 19       		.uleb128 0x19
 2298 0225 03       		.uleb128 0x3
 2299 0226 0E       		.uleb128 0xe
 2300 0227 3A       		.uleb128 0x3a
 2301 0228 0B       		.uleb128 0xb
 2302 0229 3B       		.uleb128 0x3b
 2303 022a 05       		.uleb128 0x5
 2304 022b 27       		.uleb128 0x27
 2305 022c 19       		.uleb128 0x19
 2306 022d 49       		.uleb128 0x49
 2307 022e 13       		.uleb128 0x13
 2308 022f 3C       		.uleb128 0x3c
 2309 0230 19       		.uleb128 0x19
 2310 0231 01       		.uleb128 0x1
 2311 0232 13       		.uleb128 0x13
 2312 0233 00       		.byte	0
 2313 0234 00       		.byte	0
 2314 0235 27       		.uleb128 0x27
 2315 0236 2E       		.uleb128 0x2e
 2316 0237 01       		.byte	0x1
 2317 0238 3F       		.uleb128 0x3f
 2318 0239 19       		.uleb128 0x19
 2319 023a 03       		.uleb128 0x3
 2320 023b 0E       		.uleb128 0xe
 2321 023c 3A       		.uleb128 0x3a
 2322 023d 0B       		.uleb128 0xb
 2323 023e 3B       		.uleb128 0x3b
 2324 023f 0B       		.uleb128 0xb
 2325 0240 27       		.uleb128 0x27
 2326 0241 19       		.uleb128 0x19
 2327 0242 3C       		.uleb128 0x3c
 2328 0243 19       		.uleb128 0x19
 2329 0244 00       		.byte	0
 2330 0245 00       		.byte	0
 2331 0246 00       		.byte	0
 2332              		.section	.debug_loc,"",%progbits
 2333              	.Ldebug_loc0:
 2334              	.LLST0:
 2335 0000 00000000 		.4byte	.LVL8
 2336 0004 26000000 		.4byte	.LVL11
 2337 0008 0100     		.2byte	0x1
 2338 000a 50       		.byte	0x50
 2339 000b 26000000 		.4byte	.LVL11
 2340 000f 9E020000 		.4byte	.LVL87
 2341 0013 0400     		.2byte	0x4
 2342 0015 F3       		.byte	0xf3
 2343 0016 01       		.uleb128 0x1
 2344 0017 50       		.byte	0x50
 2345 0018 9F       		.byte	0x9f
 2346 0019 9E020000 		.4byte	.LVL87
 2347 001d BC020000 		.4byte	.LFE67
 2348 0021 0100     		.2byte	0x1
 2349 0023 50       		.byte	0x50
 2350 0024 00000000 		.4byte	0
 2351 0028 00000000 		.4byte	0
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 49


 2352              	.LLST1:
 2353 002c 12000000 		.4byte	.LVL9
 2354 0030 42010000 		.4byte	.LVL40
 2355 0034 0300     		.2byte	0x3
 2356 0036 91       		.byte	0x91
 2357 0037 4C       		.sleb128 -52
 2358 0038 9F       		.byte	0x9f
 2359 0039 42010000 		.4byte	.LVL40
 2360 003d 45010000 		.4byte	.LVL41-1
 2361 0041 0100     		.2byte	0x1
 2362 0043 51       		.byte	0x51
 2363 0044 45010000 		.4byte	.LVL41-1
 2364 0048 9E020000 		.4byte	.LVL87
 2365 004c 0300     		.2byte	0x3
 2366 004e 91       		.byte	0x91
 2367 004f 4C       		.sleb128 -52
 2368 0050 9F       		.byte	0x9f
 2369 0051 00000000 		.4byte	0
 2370 0055 00000000 		.4byte	0
 2371              	.LLST2:
 2372 0059 1E000000 		.4byte	.LVL10
 2373 005d 94000000 		.4byte	.LVL24
 2374 0061 0200     		.2byte	0x2
 2375 0063 33       		.byte	0x33
 2376 0064 9F       		.byte	0x9f
 2377 0065 94000000 		.4byte	.LVL24
 2378 0069 96000000 		.4byte	.LVL25
 2379 006d 0100     		.2byte	0x1
 2380 006f 53       		.byte	0x53
 2381 0070 96000000 		.4byte	.LVL25
 2382 0074 26020000 		.4byte	.LVL73
 2383 0078 0100     		.2byte	0x1
 2384 007a 5A       		.byte	0x5a
 2385 007b 26020000 		.4byte	.LVL73
 2386 007f 32020000 		.4byte	.LVL74
 2387 0083 0100     		.2byte	0x1
 2388 0085 53       		.byte	0x53
 2389 0086 32020000 		.4byte	.LVL74
 2390 008a 98020000 		.4byte	.LVL86
 2391 008e 0300     		.2byte	0x3
 2392 0090 7A       		.byte	0x7a
 2393 0091 7F       		.sleb128 -1
 2394 0092 9F       		.byte	0x9f
 2395 0093 00000000 		.4byte	0
 2396 0097 00000000 		.4byte	0
 2397              	.LLST3:
 2398 009b 1E000000 		.4byte	.LVL10
 2399 009f 26000000 		.4byte	.LVL11
 2400 00a3 0600     		.2byte	0x6
 2401 00a5 9E       		.byte	0x9e
 2402 00a6 04       		.uleb128 0x4
 2403 00a7 00000000 		.4byte	0
 2404 00ab 26000000 		.4byte	.LVL11
 2405 00af 10020000 		.4byte	.LVL68
 2406 00b3 0100     		.2byte	0x1
 2407 00b5 59       		.byte	0x59
 2408 00b6 10020000 		.4byte	.LVL68
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 50


 2409 00ba 16020000 		.4byte	.LVL70
 2410 00be 0100     		.2byte	0x1
 2411 00c0 50       		.byte	0x50
 2412 00c1 16020000 		.4byte	.LVL70
 2413 00c5 9E020000 		.4byte	.LVL87
 2414 00c9 0100     		.2byte	0x1
 2415 00cb 59       		.byte	0x59
 2416 00cc 00000000 		.4byte	0
 2417 00d0 00000000 		.4byte	0
 2418              	.LLST4:
 2419 00d4 1E000000 		.4byte	.LVL10
 2420 00d8 26000000 		.4byte	.LVL11
 2421 00dc 0200     		.2byte	0x2
 2422 00de 30       		.byte	0x30
 2423 00df 9F       		.byte	0x9f
 2424 00e0 26000000 		.4byte	.LVL11
 2425 00e4 7C000000 		.4byte	.LVL19
 2426 00e8 0100     		.2byte	0x1
 2427 00ea 5A       		.byte	0x5a
 2428 00eb 80000000 		.4byte	.LVL20
 2429 00ef 92000000 		.4byte	.LVL23
 2430 00f3 0100     		.2byte	0x1
 2431 00f5 5A       		.byte	0x5a
 2432 00f6 9E000000 		.4byte	.LVL26
 2433 00fa A6000000 		.4byte	.LVL27
 2434 00fe 0200     		.2byte	0x2
 2435 0100 30       		.byte	0x30
 2436 0101 9F       		.byte	0x9f
 2437 0102 A6000000 		.4byte	.LVL27
 2438 0106 12010000 		.4byte	.LVL31
 2439 010a 0100     		.2byte	0x1
 2440 010c 53       		.byte	0x53
 2441 010d 14010000 		.4byte	.LVL32
 2442 0111 1D010000 		.4byte	.LVL33-1
 2443 0115 0100     		.2byte	0x1
 2444 0117 53       		.byte	0x53
 2445 0118 58010000 		.4byte	.LVL44
 2446 011c 5C010000 		.4byte	.LVL45
 2447 0120 0200     		.2byte	0x2
 2448 0122 30       		.byte	0x30
 2449 0123 9F       		.byte	0x9f
 2450 0124 5C010000 		.4byte	.LVL45
 2451 0128 78010000 		.4byte	.LVL47
 2452 012c 0100     		.2byte	0x1
 2453 012e 53       		.byte	0x53
 2454 012f 7A010000 		.4byte	.LVL48
 2455 0133 80010000 		.4byte	.LVL49
 2456 0137 0100     		.2byte	0x1
 2457 0139 53       		.byte	0x53
 2458 013a 32020000 		.4byte	.LVL74
 2459 013e 8C020000 		.4byte	.LVL84
 2460 0142 0100     		.2byte	0x1
 2461 0144 54       		.byte	0x54
 2462 0145 8E020000 		.4byte	.LVL85
 2463 0149 98020000 		.4byte	.LVL86
 2464 014d 0100     		.2byte	0x1
 2465 014f 54       		.byte	0x54
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 51


 2466 0150 00000000 		.4byte	0
 2467 0154 00000000 		.4byte	0
 2468              	.LLST5:
 2469 0158 86000000 		.4byte	.LVL21
 2470 015c 94000000 		.4byte	.LVL24
 2471 0160 0200     		.2byte	0x2
 2472 0162 31       		.byte	0x31
 2473 0163 9F       		.byte	0x9f
 2474 0164 94000000 		.4byte	.LVL24
 2475 0168 FE010000 		.4byte	.LVL65
 2476 016c 0100     		.2byte	0x1
 2477 016e 55       		.byte	0x55
 2478 016f FE010000 		.4byte	.LVL65
 2479 0173 02020000 		.4byte	.LVL66
 2480 0177 0500     		.2byte	0x5
 2481 0179 75       		.byte	0x75
 2482 017a 00       		.sleb128 0
 2483 017b 31       		.byte	0x31
 2484 017c 27       		.byte	0x27
 2485 017d 9F       		.byte	0x9f
 2486 017e 02020000 		.4byte	.LVL66
 2487 0182 32020000 		.4byte	.LVL74
 2488 0186 0100     		.2byte	0x1
 2489 0188 55       		.byte	0x55
 2490 0189 00000000 		.4byte	0
 2491 018d 00000000 		.4byte	0
 2492              	.LLST6:
 2493 0191 8C000000 		.4byte	.LVL22
 2494 0195 38010000 		.4byte	.LVL38
 2495 0199 0100     		.2byte	0x1
 2496 019b 5B       		.byte	0x5b
 2497 019c 38010000 		.4byte	.LVL38
 2498 01a0 40010000 		.4byte	.LVL39
 2499 01a4 0100     		.2byte	0x1
 2500 01a6 50       		.byte	0x50
 2501 01a7 40010000 		.4byte	.LVL39
 2502 01ab 42010000 		.4byte	.LVL40
 2503 01af 0200     		.2byte	0x2
 2504 01b1 91       		.byte	0x91
 2505 01b2 4C       		.sleb128 -52
 2506 01b3 42010000 		.4byte	.LVL40
 2507 01b7 45010000 		.4byte	.LVL41-1
 2508 01bb 0200     		.2byte	0x2
 2509 01bd 71       		.byte	0x71
 2510 01be 00       		.sleb128 0
 2511 01bf 14020000 		.4byte	.LVL69
 2512 01c3 16020000 		.4byte	.LVL70
 2513 01c7 0100     		.2byte	0x1
 2514 01c9 5B       		.byte	0x5b
 2515 01ca 20020000 		.4byte	.LVL72
 2516 01ce 98020000 		.4byte	.LVL86
 2517 01d2 0100     		.2byte	0x1
 2518 01d4 5B       		.byte	0x5b
 2519 01d5 00000000 		.4byte	0
 2520 01d9 00000000 		.4byte	0
 2521              	.LLST7:
 2522 01dd 58010000 		.4byte	.LVL44
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 52


 2523 01e1 82010000 		.4byte	.LVL50
 2524 01e5 0100     		.2byte	0x1
 2525 01e7 50       		.byte	0x50
 2526 01e8 00000000 		.4byte	0
 2527 01ec 00000000 		.4byte	0
 2528              	.LLST8:
 2529 01f0 9E000000 		.4byte	.LVL26
 2530 01f4 A6000000 		.4byte	.LVL27
 2531 01f8 0200     		.2byte	0x2
 2532 01fa 30       		.byte	0x30
 2533 01fb 9F       		.byte	0x9f
 2534 01fc A6000000 		.4byte	.LVL27
 2535 0200 94010000 		.4byte	.LVL52
 2536 0204 0100     		.2byte	0x1
 2537 0206 54       		.byte	0x54
 2538 0207 EA010000 		.4byte	.LVL62
 2539 020b F0010000 		.4byte	.LVL63
 2540 020f 0100     		.2byte	0x1
 2541 0211 54       		.byte	0x54
 2542 0212 00000000 		.4byte	0
 2543 0216 00000000 		.4byte	0
 2544              	.LLST9:
 2545 021a 9E000000 		.4byte	.LVL26
 2546 021e A6000000 		.4byte	.LVL27
 2547 0222 0200     		.2byte	0x2
 2548 0224 30       		.byte	0x30
 2549 0225 9F       		.byte	0x9f
 2550 0226 A6000000 		.4byte	.LVL27
 2551 022a B4000000 		.4byte	.LVL28
 2552 022e 0100     		.2byte	0x1
 2553 0230 56       		.byte	0x56
 2554 0231 B6000000 		.4byte	.LVL29
 2555 0235 24010000 		.4byte	.LVL35
 2556 0239 0100     		.2byte	0x1
 2557 023b 56       		.byte	0x56
 2558 023c 00000000 		.4byte	0
 2559 0240 00000000 		.4byte	0
 2560              	.LLST10:
 2561 0244 6A020000 		.4byte	.LVL78
 2562 0248 6C020000 		.4byte	.LVL79
 2563 024c 0100     		.2byte	0x1
 2564 024e 50       		.byte	0x50
 2565 024f 84020000 		.4byte	.LVL82
 2566 0253 8A020000 		.4byte	.LVL83
 2567 0257 0100     		.2byte	0x1
 2568 0259 50       		.byte	0x50
 2569 025a 00000000 		.4byte	0
 2570 025e 00000000 		.4byte	0
 2571              	.LLST11:
 2572 0262 96010000 		.4byte	.LVL53
 2573 0266 EA010000 		.4byte	.LVL62
 2574 026a 0100     		.2byte	0x1
 2575 026c 54       		.byte	0x54
 2576 026d 00000000 		.4byte	0
 2577 0271 00000000 		.4byte	0
 2578              	.LLST12:
 2579 0275 00000000 		.4byte	.LVL88
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 53


 2580 0279 05000000 		.4byte	.LVL89-1
 2581 027d 0100     		.2byte	0x1
 2582 027f 50       		.byte	0x50
 2583 0280 05000000 		.4byte	.LVL89-1
 2584 0284 40000000 		.4byte	.LFE68
 2585 0288 0400     		.2byte	0x4
 2586 028a F3       		.byte	0xf3
 2587 028b 01       		.uleb128 0x1
 2588 028c 50       		.byte	0x50
 2589 028d 9F       		.byte	0x9f
 2590 028e 00000000 		.4byte	0
 2591 0292 00000000 		.4byte	0
 2592              		.section	.debug_aranges,"",%progbits
 2593 0000 44000000 		.4byte	0x44
 2594 0004 0200     		.2byte	0x2
 2595 0006 00000000 		.4byte	.Ldebug_info0
 2596 000a 04       		.byte	0x4
 2597 000b 00       		.byte	0
 2598 000c 0000     		.2byte	0
 2599 000e 0000     		.2byte	0
 2600 0010 00000000 		.4byte	.LFB66
 2601 0014 28000000 		.4byte	.LFE66-.LFB66
 2602 0018 00000000 		.4byte	.LFB64
 2603 001c 0C000000 		.4byte	.LFE64-.LFB64
 2604 0020 00000000 		.4byte	.LFB63
 2605 0024 28000000 		.4byte	.LFE63-.LFB63
 2606 0028 00000000 		.4byte	.LFB65
 2607 002c 08000000 		.4byte	.LFE65-.LFB65
 2608 0030 00000000 		.4byte	.LFB67
 2609 0034 BC020000 		.4byte	.LFE67-.LFB67
 2610 0038 00000000 		.4byte	.LFB68
 2611 003c 40000000 		.4byte	.LFE68-.LFB68
 2612 0040 00000000 		.4byte	0
 2613 0044 00000000 		.4byte	0
 2614              		.section	.debug_ranges,"",%progbits
 2615              	.Ldebug_ranges0:
 2616 0000 00000000 		.4byte	.LFB66
 2617 0004 28000000 		.4byte	.LFE66
 2618 0008 00000000 		.4byte	.LFB64
 2619 000c 0C000000 		.4byte	.LFE64
 2620 0010 00000000 		.4byte	.LFB63
 2621 0014 28000000 		.4byte	.LFE63
 2622 0018 00000000 		.4byte	.LFB65
 2623 001c 08000000 		.4byte	.LFE65
 2624 0020 00000000 		.4byte	.LFB67
 2625 0024 BC020000 		.4byte	.LFE67
 2626 0028 00000000 		.4byte	.LFB68
 2627 002c 40000000 		.4byte	.LFE68
 2628 0030 00000000 		.4byte	0
 2629 0034 00000000 		.4byte	0
 2630              		.section	.debug_line,"",%progbits
 2631              	.Ldebug_line0:
 2632 0000 31030000 		.section	.debug_str,"MS",%progbits,1
 2632      0200E601 
 2632      00000201 
 2632      FB0E0D00 
 2632      01010101 
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 54


 2633              	.LASF104:
 2634 0000 73745F77 		.ascii	"st_wake_up\000"
 2634      616B655F 
 2634      757000
 2635              	.LASF87:
 2636 000b 7379735F 		.ascii	"sys_rt_exec_alarm\000"
 2636      72745F65 
 2636      7865635F 
 2636      616C6172 
 2636      6D00
 2637              	.LASF89:
 2638 001d 7379735F 		.ascii	"sys_rt_exec_accessory_override\000"
 2638      72745F65 
 2638      7865635F 
 2638      61636365 
 2638      73736F72 
 2639              	.LASF25:
 2640 003c 61636365 		.ascii	"acceleration\000"
 2640      6C657261 
 2640      74696F6E 
 2640      00
 2641              	.LASF43:
 2642 0049 73746174 		.ascii	"state\000"
 2642      6500
 2643              	.LASF70:
 2644 004f 74617267 		.ascii	"target\000"
 2644      657400
 2645              	.LASF103:
 2646 0056 73745F70 		.ascii	"st_prep_buffer\000"
 2646      7265705F 
 2646      62756666 
 2646      657200
 2647              	.LASF2:
 2648 0065 73686F72 		.ascii	"short int\000"
 2648      7420696E 
 2648      7400
 2649              	.LASF21:
 2650 006f 73697A65 		.ascii	"sizetype\000"
 2650      74797065 
 2650      00
 2651              	.LASF57:
 2652 0078 73797374 		.ascii	"system_t\000"
 2652      656D5F74 
 2652      00
 2653              	.LASF107:
 2654 0081 6C726F75 		.ascii	"lround\000"
 2654      6E6400
 2655              	.LASF113:
 2656 0088 53746174 		.ascii	"Status_Limit_Read\000"
 2656      75735F4C 
 2656      696D6974 
 2656      5F526561 
 2656      6400
 2657              	.LASF4:
 2658 009a 5F5F7569 		.ascii	"__uint16_t\000"
 2658      6E743136 
 2658      5F7400
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 55


 2659              	.LASF73:
 2660 00a5 6C696D69 		.ascii	"limit_state\000"
 2660      745F7374 
 2660      61746500 
 2661              	.LASF30:
 2662 00b1 73746570 		.ascii	"stepper_idle_lock_time\000"
 2662      7065725F 
 2662      69646C65 
 2662      5F6C6F63 
 2662      6B5F7469 
 2663              	.LASF109:
 2664 00c8 73797374 		.ascii	"system_set_exec_state_flag\000"
 2664      656D5F73 
 2664      65745F65 
 2664      7865635F 
 2664      73746174 
 2665              	.LASF62:
 2666 00e3 6C696D69 		.ascii	"limits_disable\000"
 2666      74735F64 
 2666      69736162 
 2666      6C6500
 2667              	.LASF74:
 2668 00f2 61786973 		.ascii	"axislock\000"
 2668      6C6F636B 
 2668      00
 2669              	.LASF12:
 2670 00fb 75696E74 		.ascii	"uint8_t\000"
 2670      385F7400 
 2671              	.LASF75:
 2672 0103 6E5F6163 		.ascii	"n_active_axis\000"
 2672      74697665 
 2672      5F617869 
 2672      7300
 2673              	.LASF24:
 2674 0111 6D61785F 		.ascii	"max_rate\000"
 2674      72617465 
 2674      00
 2675              	.LASF105:
 2676 011a 73745F72 		.ascii	"st_reset\000"
 2676      65736574 
 2676      00
 2677              	.LASF111:
 2678 0123 6C696D69 		.ascii	"limits.c\000"
 2678      74732E63 
 2678      00
 2679              	.LASF108:
 2680 012c 73797374 		.ascii	"system_check_travel_limits\000"
 2680      656D5F63 
 2680      6865636B 
 2680      5F747261 
 2680      76656C5F 
 2681              	.LASF94:
 2682 0147 73797374 		.ascii	"system_set_exec_alarm\000"
 2682      656D5F73 
 2682      65745F65 
 2682      7865635F 
 2682      616C6172 
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 56


 2683              	.LASF41:
 2684 015d 686F6D69 		.ascii	"homing_pulloff\000"
 2684      6E675F70 
 2684      756C6C6F 
 2684      666600
 2685              	.LASF42:
 2686 016c 73657474 		.ascii	"settings_t\000"
 2686      696E6773 
 2686      5F7400
 2687              	.LASF17:
 2688 0177 666C6F61 		.ascii	"float\000"
 2688      7400
 2689              	.LASF82:
 2690 017d 73657474 		.ascii	"settings\000"
 2690      696E6773 
 2690      00
 2691              	.LASF9:
 2692 0186 6C6F6E67 		.ascii	"long long int\000"
 2692      206C6F6E 
 2692      6720696E 
 2692      7400
 2693              	.LASF52:
 2694 0194 7370696E 		.ascii	"spindle_speed_ovr\000"
 2694      646C655F 
 2694      73706565 
 2694      645F6F76 
 2694      7200
 2695              	.LASF69:
 2696 01a6 73746570 		.ascii	"step_pin\000"
 2696      5F70696E 
 2696      00
 2697              	.LASF77:
 2698 01af 72745F65 		.ascii	"rt_exec\000"
 2698      78656300 
 2699              	.LASF83:
 2700 01b7 7379735F 		.ascii	"sys_position\000"
 2700      706F7369 
 2700      74696F6E 
 2700      00
 2701              	.LASF48:
 2702 01c4 70726F62 		.ascii	"probe_succeeded\000"
 2702      655F7375 
 2702      63636565 
 2702      64656400 
 2703              	.LASF90:
 2704 01d4 65786563 		.ascii	"exec_lcd_status\000"
 2704      5F6C6364 
 2704      5F737461 
 2704      74757300 
 2705              	.LASF65:
 2706 01e4 6C696D69 		.ascii	"limits_go_home\000"
 2706      74735F67 
 2706      6F5F686F 
 2706      6D6500
 2707              	.LASF102:
 2708 01f3 706C616E 		.ascii	"plan_buffer_line\000"
 2708      5F627566 
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 57


 2708      6665725F 
 2708      6C696E65 
 2708      00
 2709              	.LASF23:
 2710 0204 73746570 		.ascii	"steps_per_mm\000"
 2710      735F7065 
 2710      725F6D6D 
 2710      00
 2711              	.LASF3:
 2712 0211 5F5F7569 		.ascii	"__uint8_t\000"
 2712      6E74385F 
 2712      7400
 2713              	.LASF54:
 2714 021b 7265706F 		.ascii	"report_ovr_counter\000"
 2714      72745F6F 
 2714      76725F63 
 2714      6F756E74 
 2714      657200
 2715              	.LASF33:
 2716 022e 6172635F 		.ascii	"arc_tolerance\000"
 2716      746F6C65 
 2716      72616E63 
 2716      6500
 2717              	.LASF1:
 2718 023c 756E7369 		.ascii	"unsigned char\000"
 2718      676E6564 
 2718      20636861 
 2718      7200
 2719              	.LASF100:
 2720 024a 6765745F 		.ascii	"get_step_pin_mask\000"
 2720      73746570 
 2720      5F70696E 
 2720      5F6D6173 
 2720      6B00
 2721              	.LASF22:
 2722 025c 6C6F6E67 		.ascii	"long double\000"
 2722      20646F75 
 2722      626C6500 
 2723              	.LASF96:
 2724 0268 6D635F72 		.ascii	"mc_reset\000"
 2724      65736574 
 2724      00
 2725              	.LASF37:
 2726 0271 686F6D69 		.ascii	"homing_dir_mask\000"
 2726      6E675F64 
 2726      69725F6D 
 2726      61736B00 
 2727              	.LASF20:
 2728 0281 63796973 		.ascii	"cyisraddress\000"
 2728      72616464 
 2728      72657373 
 2728      00
 2729              	.LASF66:
 2730 028e 706C616E 		.ascii	"plan_data\000"
 2730      5F646174 
 2730      6100
 2731              	.LASF44:
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 58


 2732 0298 61626F72 		.ascii	"abort\000"
 2732      7400
 2733              	.LASF0:
 2734 029e 7369676E 		.ascii	"signed char\000"
 2734      65642063 
 2734      68617200 
 2735              	.LASF36:
 2736 02aa 666C6167 		.ascii	"flags\000"
 2736      7300
 2737              	.LASF10:
 2738 02b0 6C6F6E67 		.ascii	"long long unsigned int\000"
 2738      206C6F6E 
 2738      6720756E 
 2738      7369676E 
 2738      65642069 
 2739              	.LASF91:
 2740 02c7 53746174 		.ascii	"Status_Limit_InterruptDisable\000"
 2740      75735F4C 
 2740      696D6974 
 2740      5F496E74 
 2740      65727275 
 2741              	.LASF11:
 2742 02e5 756E7369 		.ascii	"unsigned int\000"
 2742      676E6564 
 2742      20696E74 
 2742      00
 2743              	.LASF50:
 2744 02f2 665F6F76 		.ascii	"f_override\000"
 2744      65727269 
 2744      646500
 2745              	.LASF56:
 2746 02fd 7370696E 		.ascii	"spindle_speed\000"
 2746      646C655F 
 2746      73706565 
 2746      6400
 2747              	.LASF55:
 2748 030b 7265706F 		.ascii	"report_wco_counter\000"
 2748      72745F77 
 2748      636F5F63 
 2748      6F756E74 
 2748      657200
 2749              	.LASF84:
 2750 031e 7379735F 		.ascii	"sys_probe_position\000"
 2750      70726F62 
 2750      655F706F 
 2750      73697469 
 2750      6F6E00
 2751              	.LASF88:
 2752 0331 7379735F 		.ascii	"sys_rt_exec_motion_override\000"
 2752      72745F65 
 2752      7865635F 
 2752      6D6F7469 
 2752      6F6E5F6F 
 2753              	.LASF98:
 2754 034d 73797374 		.ascii	"system_clear_exec_state_flag\000"
 2754      656D5F63 
 2754      6C656172 
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 59


 2754      5F657865 
 2754      635F7374 
 2755              	.LASF31:
 2756 036a 73746174 		.ascii	"status_report_mask\000"
 2756      75735F72 
 2756      65706F72 
 2756      745F6D61 
 2756      736B00
 2757              	.LASF49:
 2758 037d 686F6D69 		.ascii	"homing_axis_lock\000"
 2758      6E675F61 
 2758      7869735F 
 2758      6C6F636B 
 2758      00
 2759              	.LASF99:
 2760 038e 73797374 		.ascii	"system_convert_array_steps_to_mpos\000"
 2760      656D5F63 
 2760      6F6E7665 
 2760      72745F61 
 2760      72726179 
 2761              	.LASF58:
 2762 03b1 66656564 		.ascii	"feed_rate\000"
 2762      5F726174 
 2762      6500
 2763              	.LASF5:
 2764 03bb 73686F72 		.ascii	"short unsigned int\000"
 2764      7420756E 
 2764      7369676E 
 2764      65642069 
 2764      6E7400
 2765              	.LASF59:
 2766 03ce 636F6E64 		.ascii	"condition\000"
 2766      6974696F 
 2766      6E00
 2767              	.LASF93:
 2768 03d8 53746174 		.ascii	"Status_Limit_InterruptEnable\000"
 2768      75735F4C 
 2768      696D6974 
 2768      5F496E74 
 2768      65727275 
 2769              	.LASF60:
 2770 03f5 706C616E 		.ascii	"plan_line_data_t\000"
 2770      5F6C696E 
 2770      655F6461 
 2770      74615F74 
 2770      00
 2771              	.LASF19:
 2772 0406 63686172 		.ascii	"char\000"
 2772      00
 2773              	.LASF13:
 2774 040b 75696E74 		.ascii	"uint16_t\000"
 2774      31365F74 
 2774      00
 2775              	.LASF7:
 2776 0414 6C6F6E67 		.ascii	"long int\000"
 2776      20696E74 
 2776      00
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 60


 2777              	.LASF29:
 2778 041d 6469725F 		.ascii	"dir_invert_mask\000"
 2778      696E7665 
 2778      72745F6D 
 2778      61736B00 
 2779              	.LASF14:
 2780 042d 696E7433 		.ascii	"int32_t\000"
 2780      325F7400 
 2781              	.LASF72:
 2782 0435 686F6D69 		.ascii	"homing_rate\000"
 2782      6E675F72 
 2782      61746500 
 2783              	.LASF15:
 2784 0441 75696E74 		.ascii	"uint8\000"
 2784      3800
 2785              	.LASF78:
 2786 0447 5F426F6F 		.ascii	"_Bool\000"
 2786      6C00
 2787              	.LASF34:
 2788 044d 72706D5F 		.ascii	"rpm_max\000"
 2788      6D617800 
 2789              	.LASF47:
 2790 0455 73746570 		.ascii	"step_control\000"
 2790      5F636F6E 
 2790      74726F6C 
 2790      00
 2791              	.LASF45:
 2792 0462 73757370 		.ascii	"suspend\000"
 2792      656E6400 
 2793              	.LASF46:
 2794 046a 736F6674 		.ascii	"soft_limit\000"
 2794      5F6C696D 
 2794      697400
 2795              	.LASF40:
 2796 0475 686F6D69 		.ascii	"homing_debounce_delay\000"
 2796      6E675F64 
 2796      65626F75 
 2796      6E63655F 
 2796      64656C61 
 2797              	.LASF27:
 2798 048b 70756C73 		.ascii	"pulse_microseconds\000"
 2798      655F6D69 
 2798      63726F73 
 2798      65636F6E 
 2798      647300
 2799              	.LASF80:
 2800 049e 6379636C 		.ascii	"cycle_mask\000"
 2800      655F6D61 
 2800      736B00
 2801              	.LASF85:
 2802 04a9 7379735F 		.ascii	"sys_probe_state\000"
 2802      70726F62 
 2802      655F7374 
 2802      61746500 
 2803              	.LASF16:
 2804 04b9 75696E74 		.ascii	"uint32\000"
 2804      333200
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 61


 2805              	.LASF53:
 2806 04c0 7370696E 		.ascii	"spindle_stop_ovr\000"
 2806      646C655F 
 2806      73746F70 
 2806      5F6F7672 
 2806      00
 2807              	.LASF95:
 2808 04d1 6973725F 		.ascii	"isr_Limits_StartEx\000"
 2808      4C696D69 
 2808      74735F53 
 2808      74617274 
 2808      457800
 2809              	.LASF8:
 2810 04e4 6C6F6E67 		.ascii	"long unsigned int\000"
 2810      20756E73 
 2810      69676E65 
 2810      6420696E 
 2810      7400
 2811              	.LASF18:
 2812 04f6 646F7562 		.ascii	"double\000"
 2812      6C6500
 2813              	.LASF39:
 2814 04fd 686F6D69 		.ascii	"homing_seek_rate\000"
 2814      6E675F73 
 2814      65656B5F 
 2814      72617465 
 2814      00
 2815              	.LASF81:
 2816 050e 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2816      52784275 
 2816      66666572 
 2816      00
 2817              	.LASF35:
 2818 051b 72706D5F 		.ascii	"rpm_min\000"
 2818      6D696E00 
 2819              	.LASF101:
 2820 0523 73717274 		.ascii	"sqrt\000"
 2820      00
 2821              	.LASF63:
 2822 0528 6C696D69 		.ascii	"limits_init\000"
 2822      74735F69 
 2822      6E697400 
 2823              	.LASF6:
 2824 0534 5F5F696E 		.ascii	"__int32_t\000"
 2824      7433325F 
 2824      7400
 2825              	.LASF32:
 2826 053e 6A756E63 		.ascii	"junction_deviation\000"
 2826      74696F6E 
 2826      5F646576 
 2826      69617469 
 2826      6F6E00
 2827              	.LASF110:
 2828 0551 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2828      4320342E 
 2828      392E3320 
 2828      32303135 
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 62


 2828      30333033 
 2829 0584 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 2829      20726576 
 2829      6973696F 
 2829      6E203232 
 2829      31323230 
 2830 05b7 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 2830      66756E63 
 2830      74696F6E 
 2830      2D736563 
 2830      74696F6E 
 2831              	.LASF26:
 2832 05df 6D61785F 		.ascii	"max_travel\000"
 2832      74726176 
 2832      656C00
 2833              	.LASF38:
 2834 05ea 686F6D69 		.ascii	"homing_feed_rate\000"
 2834      6E675F66 
 2834      6565645F 
 2834      72617465 
 2834      00
 2835              	.LASF51:
 2836 05fb 725F6F76 		.ascii	"r_override\000"
 2836      65727269 
 2836      646500
 2837              	.LASF71:
 2838 0606 61707072 		.ascii	"approach\000"
 2838      6F616368 
 2838      00
 2839              	.LASF79:
 2840 060f 6C696D69 		.ascii	"limits_soft_check\000"
 2840      74735F73 
 2840      6F66745F 
 2840      63686563 
 2840      6B00
 2841              	.LASF68:
 2842 0621 6E5F6379 		.ascii	"n_cycle\000"
 2842      636C6500 
 2843              	.LASF67:
 2844 0629 706C5F64 		.ascii	"pl_data\000"
 2844      61746100 
 2845              	.LASF97:
 2846 0631 70726F74 		.ascii	"protocol_execute_realtime\000"
 2846      6F636F6C 
 2846      5F657865 
 2846      63757465 
 2846      5F726561 
 2847              	.LASF28:
 2848 064b 73746570 		.ascii	"step_invert_mask\000"
 2848      5F696E76 
 2848      6572745F 
 2848      6D61736B 
 2848      00
 2849              	.LASF92:
 2850 065c 6973725F 		.ascii	"isr_Limits_Stop\000"
 2850      4C696D69 
 2850      74735F53 
ARM GAS  C:\Users\miker\AppData\Local\Temp\ccQCAluu.s 			page 63


 2850      746F7000 
 2851              	.LASF106:
 2852 066c 43794465 		.ascii	"CyDelay\000"
 2852      6C617900 
 2853              	.LASF86:
 2854 0674 7379735F 		.ascii	"sys_rt_exec_state\000"
 2854      72745F65 
 2854      7865635F 
 2854      73746174 
 2854      6500
 2855              	.LASF76:
 2856 0686 7365745F 		.ascii	"set_axis_position\000"
 2856      61786973 
 2856      5F706F73 
 2856      6974696F 
 2856      6E00
 2857              	.LASF112:
 2858 0698 433A5C55 		.ascii	"C:\\Users\\miker\\Documents\\My Libraries\\Code_Rep"
 2858      73657273 
 2858      5C6D696B 
 2858      65725C44 
 2858      6F63756D 
 2859 06c6 6F5C5053 		.ascii	"o\\PSoC_Grbl\\PSoC_Grbl.cydsn\000"
 2859      6F435F47 
 2859      72626C5C 
 2859      50536F43 
 2859      5F477262 
 2860              	.LASF64:
 2861 06e2 6C696D69 		.ascii	"limits_get_state\000"
 2861      74735F67 
 2861      65745F73 
 2861      74617465 
 2861      00
 2862              	.LASF61:
 2863 06f3 6C696D69 		.ascii	"limit_isr_handler\000"
 2863      745F6973 
 2863      725F6861 
 2863      6E646C65 
 2863      7200
 2864              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
